"name","type","class","exported","generic","args","package","priority","Rversion"
".Depends","character","character","FALSE","FALSE","NA","KernSmooth","recommended","4.0.5"
"bkde","closure","function","TRUE","FALSE","(x, kernel = ""normal"", canonical = FALSE, bandwidth,     gridsize = 401L, range.x, truncate = TRUE) ","KernSmooth","recommended","4.0.5"
"bkde2D","closure","function","TRUE","FALSE","(x, bandwidth, gridsize = c(51L, 51L), range.x, truncate = TRUE) ","KernSmooth","recommended","4.0.5"
"bkfe","closure","function","TRUE","FALSE","(x, drv, bandwidth, gridsize = 401L, range.x, binned = FALSE,     truncate = TRUE) ","KernSmooth","recommended","4.0.5"
"dpih","closure","function","TRUE","FALSE","(x, scalest = ""minim"", level = 2L, gridsize = 401L,     range.x = range(x), truncate = TRUE) ","KernSmooth","recommended","4.0.5"
"dpik","closure","function","TRUE","FALSE","(x, scalest = ""minim"", level = 2L, kernel = ""normal"",     canonical = FALSE, gridsize = 401L, range.x = range(x), truncate = TRUE) ","KernSmooth","recommended","4.0.5"
"dpill","closure","function","TRUE","FALSE","(x, y, blockmax = 5, divisor = 20, trim = 0.01, proptrun = 0.05,     gridsize = 401L, range.x = range(x), truncate = TRUE) ","KernSmooth","recommended","4.0.5"
"locpoly","closure","function","TRUE","FALSE","(x, y, drv = 0L, degree, kernel = ""normal"", bandwidth,     gridsize = 401L, bwdisc = 25, range.x, binned = FALSE, truncate = TRUE) ","KernSmooth","recommended","4.0.5"
".Depends","character","character","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"Aids2","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"Animals","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"Boston","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"Cars93","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"Cushings","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"DDT","double","numeric","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"GAGurine","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"Insurance","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"Melanoma","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"Null","closure","function","TRUE","FALSE","(M) ","MASS","recommended","4.0.5"
"OME","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"Pima.te","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"Pima.tr","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"Pima.tr2","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"Rabbit","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"Rubber","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"SP500","double","numeric","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"Shepard","closure","function","TRUE","FALSE","(d, x, p = 2) ","MASS","recommended","4.0.5"
"Sitka","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"Sitka89","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"Skye","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"Traffic","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"UScereal","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"UScrime","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"VA","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"abbey","double","numeric","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"accdeaths","double","ts","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"addterm","closure","function","TRUE","FALSE","(object, ...) ","MASS","recommended","4.0.5"
"anorexia","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"area","closure","function","TRUE","FALSE","(f, a, b, ..., fa = f(a, ...), fb = f(b, ...), limit = 10,     eps = 1e-05) ","MASS","recommended","4.0.5"
"as.fractions","closure","function","TRUE","FALSE","(x) ","MASS","recommended","4.0.5"
"bacteria","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"bandwidth.nrd","closure","function","TRUE","FALSE","(x) ","MASS","recommended","4.0.5"
"bcv","closure","function","TRUE","FALSE","(x, nb = 1000, lower = 0.1 * hmax, upper = hmax) ","MASS","recommended","4.0.5"
"beav1","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"beav2","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"biopsy","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"birthwt","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"boxcox","closure","function","TRUE","FALSE","(object, ...) ","MASS","recommended","4.0.5"
"cabbages","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"caith","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"cats","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"cement","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"chem","double","numeric","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"con2tr","closure","function","TRUE","FALSE","(obj) ","MASS","recommended","4.0.5"
"contr.sdif","closure","function","TRUE","FALSE","(n, contrasts = TRUE, sparse = FALSE) ","MASS","recommended","4.0.5"
"coop","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"corresp","closure","function","TRUE","FALSE","(x, ...) ","MASS","recommended","4.0.5"
"cov.mcd","closure","function","TRUE","FALSE","(...) ","MASS","recommended","4.0.5"
"cov.mve","closure","function","TRUE","FALSE","(...) ","MASS","recommended","4.0.5"
"cov.rob","closure","function","TRUE","FALSE","(x, cor = FALSE, quantile.used = floor((n + p + 1)/2),     method = c(""mve"", ""mcd"", ""classical""), nsamp = ""best"", seed) ","MASS","recommended","4.0.5"
"cov.trob","closure","function","TRUE","FALSE","(x, wt = rep(1, n), cor = FALSE, center = TRUE, nu = 5,     maxit = 25, tol = 0.01) ","MASS","recommended","4.0.5"
"cpus","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"crabs","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"deaths","double","ts","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"denumerate","closure","function","TRUE","FALSE","(x) ","MASS","recommended","4.0.5"
"dose.p","closure","function","TRUE","FALSE","(obj, cf = 1:2, p = 0.5) ","MASS","recommended","4.0.5"
"drivers","double","ts","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"dropterm","closure","function","TRUE","FALSE","(object, ...) ","MASS","recommended","4.0.5"
"eagles","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"enlist","closure","function","TRUE","FALSE","(vec) ","MASS","recommended","4.0.5"
"epil","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"eqscplot","closure","function","TRUE","FALSE","(x, y, ratio = 1, tol = 0.04, uin, ...) ","MASS","recommended","4.0.5"
"farms","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"fbeta","closure","function","TRUE","FALSE","(x, alpha, beta) ","MASS","recommended","4.0.5"
"fgl","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"fitdistr","closure","function","TRUE","FALSE","(x, densfun, start, ...) ","MASS","recommended","4.0.5"
"forbes","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"fractions","closure","function","TRUE","FALSE","(x, cycles = 10, max.denominator = 2000, ...) ","MASS","recommended","4.0.5"
"frequency.polygon","closure","function","TRUE","FALSE","(x, nclass = nclass.freq(x), xlab = """", ylab = """", ...) ","MASS","recommended","4.0.5"
"galaxies","double","numeric","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"gamma.dispersion","closure","function","TRUE","FALSE","(object, ...) ","MASS","recommended","4.0.5"
"gamma.shape","closure","function","TRUE","FALSE","(object, ...) ","MASS","recommended","4.0.5"
"gehan","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"genotype","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"geyser","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"gilgais","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"ginv","closure","function","TRUE","FALSE","(X, tol = sqrt(.Machine$double.eps)) ","MASS","recommended","4.0.5"
"glm.convert","closure","function","TRUE","FALSE","(object) ","MASS","recommended","4.0.5"
"glm.nb","closure","function","TRUE","FALSE","(formula, data, weights, subset, na.action, start = NULL,     etastart, mustart, control = glm.control(...), method = ""glm.fit"",     model = TRUE, x = FALSE, y = TRUE, contrasts = NULL, ...,     init.theta, link = log) ","MASS","recommended","4.0.5"
"glmmPQL","closure","function","TRUE","FALSE","(fixed, random, family, data, correlation, weights,     control, niter = 10, verbose = TRUE, ...) ","MASS","recommended","4.0.5"
"hills","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"hist.FD","closure","function","TRUE","FALSE","(x, prob = TRUE, xlab = deparse(substitute(x)), ...) ","MASS","recommended","4.0.5"
"hist.scott","closure","function","TRUE","FALSE","(x, prob = TRUE, xlab = deparse(substitute(x)), ...) ","MASS","recommended","4.0.5"
"housing","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"huber","closure","function","TRUE","FALSE","(y, k = 1.5, tol = 1e-06) ","MASS","recommended","4.0.5"
"hubers","closure","function","TRUE","FALSE","(y, k = 1.5, mu, s, initmu = median(y), tol = 1e-06) ","MASS","recommended","4.0.5"
"immer","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"is.fractions","closure","function","TRUE","FALSE","(f) ","MASS","recommended","4.0.5"
"isoMDS","closure","function","TRUE","FALSE","(d, y = cmdscale(d, k), k = 2, maxit = 50, trace = TRUE,     tol = 0.001, p = 2) ","MASS","recommended","4.0.5"
"kde2d","closure","function","TRUE","FALSE","(x, y, h, n = 25, lims = c(range(x), range(y))) ","MASS","recommended","4.0.5"
"lda","closure","function","TRUE","FALSE","(x, ...) ","MASS","recommended","4.0.5"
"ldahist","closure","function","TRUE","FALSE","(data, g, nbins = 25, h, x0 = -h/1000, breaks, xlim = range(breaks),     ymax = 0, width, type = c(""histogram"", ""density"", ""both""),     sep = (type != ""density""), col = 5L, xlab = deparse(substitute(data)),     bty = ""n"", ...) ","MASS","recommended","4.0.5"
"leuk","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"lm.gls","closure","function","TRUE","FALSE","(formula, data, W, subset, na.action, inverse = FALSE,     method = ""qr"", model = FALSE, x = FALSE, y = FALSE, contrasts = NULL,     ...) ","MASS","recommended","4.0.5"
"lm.ridge","closure","function","TRUE","FALSE","(formula, data, subset, na.action, lambda = 0, model = FALSE,     x = FALSE, y = FALSE, contrasts = NULL, ...) ","MASS","recommended","4.0.5"
"lmsreg","closure","function","TRUE","FALSE","(...) ","MASS","recommended","4.0.5"
"lmwork","closure","function","TRUE","FALSE","(object) ","MASS","recommended","4.0.5"
"loglm","closure","function","TRUE","FALSE","(formula, data, subset, na.action, ...) ","MASS","recommended","4.0.5"
"loglm1","closure","function","TRUE","FALSE","(formula, data, ...) ","MASS","recommended","4.0.5"
"logtrans","closure","function","TRUE","FALSE","(object, ...) ","MASS","recommended","4.0.5"
"lqs","closure","function","TRUE","FALSE","(x, ...) ","MASS","recommended","4.0.5"
"lqs.formula","closure","function","TRUE","FALSE","(formula, data, ..., method = c(""lts"", ""lqs"", ""lms"",     ""S"", ""model.frame""), subset, na.action, model = TRUE, x.ret = FALSE,     y.ret = FALSE, contrasts = NULL) ","MASS","recommended","4.0.5"
"ltsreg","closure","function","TRUE","FALSE","(...) ","MASS","recommended","4.0.5"
"mammals","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"mca","closure","function","TRUE","FALSE","(df, nf = 2, abbrev = FALSE) ","MASS","recommended","4.0.5"
"mcycle","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"menarche","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"michelson","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"minn38","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"motors","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"muscle","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"mvrnorm","closure","function","TRUE","FALSE","(n = 1, mu, Sigma, tol = 1e-06, empirical = FALSE, EISPACK = FALSE) ","MASS","recommended","4.0.5"
"nclass.freq","closure","function","TRUE","FALSE","(x) ","MASS","recommended","4.0.5"
"neg.bin","closure","function","TRUE","FALSE","(theta = stop(""'theta' must be given"")) ","MASS","recommended","4.0.5"
"negative.binomial","closure","function","TRUE","FALSE","(theta = stop(""'theta' must be specified""), link = ""log"") ","MASS","recommended","4.0.5"
"negexp.SSival","closure","function","TRUE","FALSE","(mCall, data, LHS) ","MASS","recommended","4.0.5"
"newcomb","double","numeric","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"nlschools","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"npk","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"npr1","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"oats","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"painters","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"parcoord","closure","function","TRUE","FALSE","(x, col = 1, lty = 1, var.label = FALSE, ...) ","MASS","recommended","4.0.5"
"petrol","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"phones","list","list","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"polr","closure","function","TRUE","FALSE","(formula, data, weights, start, ..., subset, na.action,     contrasts = NULL, Hess = FALSE, model = TRUE, method = c(""logistic"",         ""probit"", ""loglog"", ""cloglog"", ""cauchit"")) ","MASS","recommended","4.0.5"
"psi.bisquare","closure","function","TRUE","FALSE","(u, c = 4.685, deriv = 0) ","MASS","recommended","4.0.5"
"psi.hampel","closure","function","TRUE","FALSE","(u, a = 2, b = 4, c = 8, deriv = 0) ","MASS","recommended","4.0.5"
"psi.huber","closure","function","TRUE","FALSE","(u, k = 1.345, deriv = 0) ","MASS","recommended","4.0.5"
"qda","closure","function","TRUE","FALSE","(x, ...) ","MASS","recommended","4.0.5"
"quine","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"rational","closure","function","TRUE","FALSE","(x, cycles = 10, max.denominator = 2000, ...) ","MASS","recommended","4.0.5"
"renumerate","closure","function","TRUE","FALSE","(x) ","MASS","recommended","4.0.5"
"rlm","closure","function","TRUE","FALSE","(x, ...) ","MASS","recommended","4.0.5"
"rms.curv","closure","function","TRUE","FALSE","(obj) ","MASS","recommended","4.0.5"
"rnegbin","closure","function","TRUE","FALSE","(n, mu = n, theta = stop(""'theta' must be specified"")) ","MASS","recommended","4.0.5"
"road","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"rotifer","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"sammon","closure","function","TRUE","FALSE","(d, y = cmdscale(d, k), k = 2, niter = 100, trace = TRUE,     magic = 0.2, tol = 1e-04) ","MASS","recommended","4.0.5"
"select","closure","function","TRUE","FALSE","(obj) ","MASS","recommended","4.0.5"
"ships","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"shoes","list","list","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"shrimp","double","numeric","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"shuttle","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"snails","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"stdres","closure","function","TRUE","FALSE","(object) ","MASS","recommended","4.0.5"
"steam","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"stepAIC","closure","function","TRUE","FALSE","(object, scope, scale = 0, direction = c(""both"", ""backward"",     ""forward""), trace = 1, keep = NULL, steps = 1000, use.start = FALSE,     k = 2, ...) ","MASS","recommended","4.0.5"
"stormer","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"studres","closure","function","TRUE","FALSE","(object) ","MASS","recommended","4.0.5"
"survey","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"synth.te","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"synth.tr","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"theta.md","closure","function","TRUE","FALSE","(y, mu, dfr, weights, limit = 20, eps = .Machine$double.eps^0.25) ","MASS","recommended","4.0.5"
"theta.ml","closure","function","TRUE","FALSE","(y, mu, n = sum(weights), weights, limit = 10, eps = .Machine$double.eps^0.25,     trace = FALSE) ","MASS","recommended","4.0.5"
"theta.mm","closure","function","TRUE","FALSE","(y, mu, dfr, weights, limit = 10, eps = .Machine$double.eps^0.25) ","MASS","recommended","4.0.5"
"topo","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"truehist","closure","function","TRUE","FALSE","(data, nbins = ""Scott"", h, x0 = -h/1000, breaks, prob = TRUE,     xlim = range(breaks), ymax = max(est), col = ""cyan"", xlab = deparse(substitute(data)),     bty = ""n"", ...) ","MASS","recommended","4.0.5"
"ucv","closure","function","TRUE","FALSE","(x, nb = 1000, lower = 0.1 * hmax, upper = hmax) ","MASS","recommended","4.0.5"
"waders","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"whiteside","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"width.SJ","closure","function","TRUE","FALSE","(x, nb = 1000, lower = 0.1 * hmax, upper = hmax, method = c(""ste"",     ""dpi"")) ","MASS","recommended","4.0.5"
"write.matrix","closure","function","TRUE","FALSE","(x, file = """", sep = "" "", blocksize) ","MASS","recommended","4.0.5"
"wtloss","list","data.frame","FALSE","FALSE","NA","MASS","recommended","4.0.5"
"%&%","closure","standardGeneric","TRUE","TRUE","(x, y) ","Matrix","recommended","4.0.5"
"..2dge","closure","function","TRUE","FALSE","(from) ","Matrix","recommended","4.0.5"
".C2nC","closure","function","TRUE","FALSE","(from, isTri = is(from, ""triangularMatrix"")) ","Matrix","recommended","4.0.5"
".SuiteSparse_version","closure","function","TRUE","FALSE","() ","Matrix","recommended","4.0.5"
".T2Cmat","closure","function","TRUE","FALSE","(from, isTri = is(from, ""triangularMatrix"")) ","Matrix","recommended","4.0.5"
".__C__BunchKaufman","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__CHMfactor","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__CHMsimpl","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__CHMsuper","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__Cholesky","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__CholeskyFactorization","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__CsparseMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__LU","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__Matrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__MatrixFactorization","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__RsparseMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__Schur","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__TsparseMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__abIndex","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__atomicVector","S4","ClassUnionRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__compMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__corMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dCHMsimpl","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dCHMsuper","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ddenseMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ddiMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__denseLU","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__denseMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dgCMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dgRMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dgTMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dgeMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__diagonalMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dpoMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dppMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dsCMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dsRMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dsTMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dspMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dsparseMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dsparseVector","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dsyMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dtCMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dtRMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dtTMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dtpMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__dtrMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__generalMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__iMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__indMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__index","S4","ClassUnionRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__isparseVector","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__lMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ldenseMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ldiMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__lgCMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__lgRMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__lgTMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__lgeMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__lsCMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__lsRMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__lsTMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__lspMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__lsparseMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__lsparseVector","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__lsyMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ltCMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ltRMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ltTMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ltpMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ltrMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__nCHMsimpl","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__nCHMsuper","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__nMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ndenseMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ngCMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ngRMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ngTMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ngeMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__nsCMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__nsRMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__nsTMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__nspMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__nsparseMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__nsparseVector","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__nsyMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ntCMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ntRMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ntTMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ntpMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__ntrMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__number","S4","ClassUnionRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__pBunchKaufman","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__pCholesky","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__pMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__replValue","S4","ClassUnionRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__rleDiff","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__sparseLU","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__sparseMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__sparseQR","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__sparseVector","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__symmetricMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__triangularMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__xsparseVector","S4","ClassUnionRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__zMatrix","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__C__zsparseVector","S4","classRepresentation","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__!:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__%%:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__%&%:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__%*%:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__%/%:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__&:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__*:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__+:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__-:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__/:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__Arith:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__BunchKaufman:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__Cholesky:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__Compare:methods","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__Logic:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__Math2:methods","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__Math:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__Ops:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__Schur:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__Summary:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__[:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__[<-:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__^:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__all.equal:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__all:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__any:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__anyNA:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__as.array:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__as.integer:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__as.logical:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__as.matrix:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__as.numeric:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__as.vector:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__band:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__cbind2:methods","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__chol2inv:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__chol:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__coerce:methods","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__colMeans:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__colSums:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__cov2cor:stats","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__crossprod:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__determinant:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__diag:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__diag<-:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__diff:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__dim:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__dim<-:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__dimnames:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__dimnames<-:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__drop:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__expand:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__expm:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__facmul:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__forceSymmetric:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__format:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__head:utils","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__image:graphics","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__is.finite:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__is.infinite:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__is.na:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__isDiagonal:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__isSymmetric:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__isTriangular:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__kronecker:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__length:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__log:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__lu:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__mean:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__nnzero:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__norm:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__pack:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__print:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__prod:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__qr.Q:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__qr.R:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__qr.coef:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__qr.fitted:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__qr.qty:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__qr.qy:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__qr.resid:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__qr:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__rbind2:methods","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__rcond:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__rep:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__rowMeans:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__rowSums:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__show:methods","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__skewpart:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__solve:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__sum:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__summary:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__symmpart:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__t:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__tail:utils","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__tcrossprod:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__toeplitz:stats","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__tril:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__triu:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__unname:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__unpack:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__update:stats","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__updown:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__which:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__writeMM:Matrix","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".__T__zapsmall:base","environment","environment","TRUE","FALSE","NA","Matrix","recommended","4.0.5"
".asmatrix","closure","function","TRUE","FALSE","(x) ","Matrix","recommended","4.0.5"
".bdiag","closure","function","TRUE","FALSE","(lst) ","Matrix","recommended","4.0.5"
".dense2sy","closure","function","TRUE","FALSE","(from, ...) ","Matrix","recommended","4.0.5"
".diag.dsC","closure","function","TRUE","FALSE","(x, Chx = Cholesky(x, LDL = TRUE), res.kind = ""diag"") ","Matrix","recommended","4.0.5"
".diag2mat","closure","function","TRUE","FALSE","(from) ","Matrix","recommended","4.0.5"
".diag2sT","closure","function","TRUE","FALSE","(from, uplo = ""U"", kind = .M.kind(from)) ","Matrix","recommended","4.0.5"
".diag2tT","closure","function","TRUE","FALSE","(from, uplo = ""U"", kind = .M.kind(from), drop0 = TRUE) ","Matrix","recommended","4.0.5"
".diagU2N","closure","function","TRUE","FALSE","(x, cl, checkDense = FALSE) ","Matrix","recommended","4.0.5"
".dsy2dsp","closure","function","TRUE","FALSE","(from) ","Matrix","recommended","4.0.5"
".dsy2mat","closure","function","TRUE","FALSE","(from, keep.dimnames = TRUE) ","Matrix","recommended","4.0.5"
".dxC2mat","closure","function","TRUE","FALSE","(from, chkUdiag = TRUE) ","Matrix","recommended","4.0.5"
".formatSparseSimple","closure","function","TRUE","FALSE","(m, asLogical = FALSE, digits = NULL, col.names, note.dropping.colnames = TRUE,     dn = dimnames(m)) ","Matrix","recommended","4.0.5"
".m2dgC","closure","function","TRUE","FALSE","(from) ","Matrix","recommended","4.0.5"
".m2lgC","closure","function","TRUE","FALSE","(from) ","Matrix","recommended","4.0.5"
".m2ngC","closure","function","TRUE","FALSE","(from) ","Matrix","recommended","4.0.5"
".nC2d","closure","function","TRUE","FALSE","(from) ","Matrix","recommended","4.0.5"
".nC2l","closure","function","TRUE","FALSE","(from) ","Matrix","recommended","4.0.5"
".solve.dgC.chol","closure","function","TRUE","FALSE","(x, y) ","Matrix","recommended","4.0.5"
".solve.dgC.lu","closure","function","TRUE","FALSE","(a, b, tol = .Machine$double.eps) ","Matrix","recommended","4.0.5"
".solve.dgC.qr","closure","function","TRUE","FALSE","(x, y, order = 1L) ","Matrix","recommended","4.0.5"
".sparseDiagonal","closure","function","TRUE","FALSE","(n, x = 1, uplo = ""U"", shape = if (missing(cols)) ""t"" else ""g"",     unitri, kind, cols = if (n) 0:(n - 1L) else integer(0)) ","Matrix","recommended","4.0.5"
".symDiagonal","closure","function","TRUE","FALSE","(n, x = rep.int(1, n), uplo = ""U"", kind) ","Matrix","recommended","4.0.5"
".trDiagonal","closure","function","TRUE","FALSE","(n, x = 1, uplo = ""U"", unitri = TRUE, kind) ","Matrix","recommended","4.0.5"
".updateCHMfactor","closure","function","TRUE","FALSE","(object, parent, mult) ","Matrix","recommended","4.0.5"
".validateCsparse","closure","function","TRUE","FALSE","(x, sort.if.needed = FALSE) ","Matrix","recommended","4.0.5"
"Arith","closure","groupGenericFunction","TRUE","TRUE","(e1, e2) ","Matrix","recommended","4.0.5"
"BunchKaufman","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"Cholesky","closure","standardGeneric","TRUE","TRUE","(A, perm = TRUE, LDL = !super, super = FALSE, Imult = 0,     ...) ","Matrix","recommended","4.0.5"
"Compare","closure","groupGenericFunction","TRUE","TRUE","(e1, e2) ","Matrix","recommended","4.0.5"
"Diagonal","closure","function","TRUE","FALSE","(n, x = NULL) ","Matrix","recommended","4.0.5"
"Hilbert","closure","function","TRUE","FALSE","(n) ","Matrix","recommended","4.0.5"
"KhatriRao","closure","function","TRUE","FALSE","(X, Y = X, FUN = ""*"", make.dimnames = FALSE) ","Matrix","recommended","4.0.5"
"Logic","closure","groupGenericFunction","TRUE","TRUE","(e1, e2) ","Matrix","recommended","4.0.5"
"Math","closure","groupGenericFunction","TRUE","TRUE","(x) ","Matrix","recommended","4.0.5"
"Math2","closure","groupGenericFunction","TRUE","TRUE","(x, digits) ","Matrix","recommended","4.0.5"
"Matrix","closure","function","TRUE","FALSE","(data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL,     sparse = NULL, doDiag = TRUE, forceCheck = FALSE) ","Matrix","recommended","4.0.5"
"MatrixClass","closure","function","TRUE","FALSE","(cl, cld = getClassDef(cl), ...Matrix = TRUE, dropVirtual = TRUE,     ...) ","Matrix","recommended","4.0.5"
"Ops","closure","groupGenericFunction","TRUE","TRUE","(e1, e2) ","Matrix","recommended","4.0.5"
"Schur","closure","standardGeneric","TRUE","TRUE","(x, vectors, ...) ","Matrix","recommended","4.0.5"
"Summary","closure","groupGenericFunction","TRUE","TRUE","(x, ..., na.rm = FALSE) ","Matrix","recommended","4.0.5"
"T2graph","closure","function","TRUE","FALSE","(from, need.uniq = is_not_uniqT(from), edgemode = NULL) ","Matrix","recommended","4.0.5"
"abIseq","closure","function","TRUE","FALSE","(from = 1, to = 1, by = ((to - from)/(length.out - 1)),     length.out = NULL, along.with = NULL) ","Matrix","recommended","4.0.5"
"abIseq1","closure","function","TRUE","FALSE","(from = 1, to = 1) ","Matrix","recommended","4.0.5"
"all.equal","closure","standardGeneric","TRUE","TRUE","(target, current, ...) ","Matrix","recommended","4.0.5"
"anyDuplicatedT","closure","function","TRUE","FALSE","(x, di = dim(x)) ","Matrix","recommended","4.0.5"
"as.array","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"as.matrix","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"band","closure","standardGeneric","TRUE","TRUE","(x, k1, k2, ...) ","Matrix","recommended","4.0.5"
"bandSparse","closure","function","TRUE","FALSE","(n, m = n, k, diagonals, symmetric = FALSE, repr = ""C"",     giveCsparse = (repr == ""C"")) ","Matrix","recommended","4.0.5"
"bdiag","closure","function","TRUE","FALSE","(...) ","Matrix","recommended","4.0.5"
"c.sparseVector","closure","function","TRUE","FALSE","(...) ","Matrix","recommended","4.0.5"
"cBind","closure","function","TRUE","FALSE","(..., deparse.level = 1) ","Matrix","recommended","4.0.5"
"cbind2","closure","standardGeneric","TRUE","TRUE","(x, y, ...) ","Matrix","recommended","4.0.5"
"chol","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"chol2inv","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"coerce","closure","nonstandardGenericFunction","TRUE","TRUE","(from, to, strict = TRUE) ","Matrix","recommended","4.0.5"
"colMeans","closure","standardGeneric","TRUE","TRUE","(x, na.rm = FALSE, dims = 1, ...) ","Matrix","recommended","4.0.5"
"colSums","closure","standardGeneric","TRUE","TRUE","(x, na.rm = FALSE, dims = 1, ...) ","Matrix","recommended","4.0.5"
"condest","closure","function","TRUE","FALSE","(A, t = min(n, 5), normA = norm(A, ""1""), silent = FALSE,     quiet = TRUE) ","Matrix","recommended","4.0.5"
"cov2cor","closure","standardGeneric","TRUE","TRUE","(V) ","Matrix","recommended","4.0.5"
"crossprod","closure","standardGeneric","TRUE","TRUE","(x, y = NULL, ...) ","Matrix","recommended","4.0.5"
"det","closure","function","TRUE","FALSE","(x, ...) ","Matrix","recommended","4.0.5"
"determinant","closure","standardGeneric","TRUE","TRUE","(x, logarithm = TRUE, ...) ","Matrix","recommended","4.0.5"
"diag","closure","standardGeneric","TRUE","TRUE","(x = 1, nrow, ncol, names = TRUE) ","Matrix","recommended","4.0.5"
"diag<-","closure","standardGeneric","TRUE","TRUE","(x, value) ","Matrix","recommended","4.0.5"
"diagN2U","closure","function","TRUE","FALSE","(x, cl = getClassDef(class(x)), checkDense = FALSE) ","Matrix","recommended","4.0.5"
"diagU2N","closure","function","TRUE","FALSE","(x, cl = getClassDef(class(x)), checkDense = FALSE) ","Matrix","recommended","4.0.5"
"diff","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"drop","closure","standardGeneric","TRUE","TRUE","(x) ","Matrix","recommended","4.0.5"
"drop0","closure","function","TRUE","FALSE","(x, tol = 0, is.Csparse = NA) ","Matrix","recommended","4.0.5"
"expand","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"expm","closure","standardGeneric","TRUE","TRUE","(x) ","Matrix","recommended","4.0.5"
"fac2Sparse","closure","function","TRUE","FALSE","(from, to = c(""d"", ""i"", ""l"", ""n"", ""z""), drop.unused.levels = TRUE,     repr = c(""C"", ""T"", ""R""), giveCsparse, factorPatt12, contrasts.arg = NULL) ","Matrix","recommended","4.0.5"
"fac2sparse","closure","function","TRUE","FALSE","(from, to = c(""d"", ""i"", ""l"", ""n"", ""z""), drop.unused.levels = TRUE,     repr = c(""C"", ""T"", ""R""), giveCsparse) ","Matrix","recommended","4.0.5"
"facmul","closure","standardGeneric","TRUE","TRUE","(x, factor, y, transpose, left, ...) ","Matrix","recommended","4.0.5"
"forceSymmetric","closure","standardGeneric","TRUE","TRUE","(x, uplo) ","Matrix","recommended","4.0.5"
"format","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"formatSpMatrix","closure","function","TRUE","FALSE","(x, digits = NULL, maxp = 1e+09, cld = getClassDef(class(x)),     zero.print = ""."", col.names, note.dropping.colnames = TRUE,     uniDiag = TRUE, align = c(""fancy"", ""right"")) ","Matrix","recommended","4.0.5"
"formatSparseM","closure","function","TRUE","FALSE","(x, zero.print = ""."", align = c(""fancy"", ""right""), m = as(x,     ""matrix""), asLogical = NULL, uniDiag = NULL, digits = NULL,     cx, iN0, dn = dimnames(m)) ","Matrix","recommended","4.0.5"
"graph2T","closure","function","TRUE","FALSE","(from, use.weights = graph.has.weights(from) && graph.non.1.weights(from)) ","Matrix","recommended","4.0.5"
"head","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"image","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"invPerm","closure","function","TRUE","FALSE","(p, zero.p = FALSE, zero.res = FALSE) ","Matrix","recommended","4.0.5"
"is.null.DN","closure","function","TRUE","FALSE","(dn) ","Matrix","recommended","4.0.5"
"isDiagonal","closure","standardGeneric","TRUE","TRUE","(object) ","Matrix","recommended","4.0.5"
"isLDL","closure","function","TRUE","FALSE","(x) ","Matrix","recommended","4.0.5"
"isSymmetric","closure","standardGeneric","TRUE","TRUE","(object, ...) ","Matrix","recommended","4.0.5"
"isTriangular","closure","standardGeneric","TRUE","TRUE","(object, upper = NA, ...) ","Matrix","recommended","4.0.5"
"kronecker","closure","standardGeneric","TRUE","TRUE","(X, Y, FUN = ""*"", make.dimnames = FALSE, ...) ","Matrix","recommended","4.0.5"
"lu","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"mat2triplet","closure","function","TRUE","FALSE","(x, uniqT = FALSE) ","Matrix","recommended","4.0.5"
"mean","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"nearPD","closure","function","TRUE","FALSE","(x, corr = FALSE, keepDiag = FALSE, base.matrix = FALSE,     do2eigen = TRUE, doSym = FALSE, doDykstra = TRUE, only.values = FALSE,     ensureSymmetry = !isSymmetric(x), eig.tol = 1e-06, conv.tol = 1e-07,     posd.tol = 1e-08, maxit = 100L, conv.norm.type = ""I"", trace = FALSE) ","Matrix","recommended","4.0.5"
"nnzero","closure","standardGeneric","TRUE","TRUE","(x, na.counted = NA) ","Matrix","recommended","4.0.5"
"norm","closure","standardGeneric","TRUE","TRUE","(x, type, ...) ","Matrix","recommended","4.0.5"
"onenormest","closure","function","TRUE","FALSE","(A, t = min(n, 5), A.x, At.x, n, silent = FALSE, quiet = silent,     iter.max = 10, eps = 4 * .Machine$double.eps) ","Matrix","recommended","4.0.5"
"pack","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"print","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"printSpMatrix","closure","function","TRUE","FALSE","(x, digits = NULL, maxp = max(100L, getOption(""max.print"")),     cld = getClassDef(class(x)), zero.print = ""."", col.names,     note.dropping.colnames = TRUE, uniDiag = TRUE, col.trailer = """",     align = c(""fancy"", ""right"")) ","Matrix","recommended","4.0.5"
"printSpMatrix2","closure","function","TRUE","FALSE","(x, digits = NULL, maxp = max(100L, getOption(""max.print"")),     zero.print = ""."", col.names, note.dropping.colnames = TRUE,     uniDiag = TRUE, suppRows = NULL, suppCols = NULL, col.trailer = if (suppCols) ""......"" else """",     align = c(""fancy"", ""right""), width = getOption(""width""),     fitWidth = TRUE) ","Matrix","recommended","4.0.5"
"qr","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"qr.Q","closure","standardGeneric","TRUE","TRUE","(qr, complete = FALSE, Dvec) ","Matrix","recommended","4.0.5"
"qr.R","closure","standardGeneric","TRUE","TRUE","(qr, complete = FALSE, ...) ","Matrix","recommended","4.0.5"
"qr.coef","closure","standardGeneric","TRUE","TRUE","(qr, y) ","Matrix","recommended","4.0.5"
"qr.fitted","closure","standardGeneric","TRUE","TRUE","(qr, y, k = qr$rank) ","Matrix","recommended","4.0.5"
"qr.qty","closure","standardGeneric","TRUE","TRUE","(qr, y) ","Matrix","recommended","4.0.5"
"qr.qy","closure","standardGeneric","TRUE","TRUE","(qr, y) ","Matrix","recommended","4.0.5"
"qr.resid","closure","standardGeneric","TRUE","TRUE","(qr, y) ","Matrix","recommended","4.0.5"
"qr2rankMatrix","closure","function","TRUE","FALSE","(qr, tol = NULL, isBqr = is.qr(qr), do.warn = TRUE) ","Matrix","recommended","4.0.5"
"qrR","closure","function","TRUE","FALSE","(qr, complete = FALSE, backPermute = TRUE, row.names = TRUE) ","Matrix","recommended","4.0.5"
"rBind","closure","function","TRUE","FALSE","(..., deparse.level = 1) ","Matrix","recommended","4.0.5"
"rankMatrix","closure","function","TRUE","FALSE","(x, tol = NULL, method = c(""tolNorm2"", ""qr.R"", ""qrLINPACK"",     ""qr"", ""useGrad"", ""maybeGrad""), sval = svd(x, 0, 0)$d, warn.t = TRUE,     warn.qr = TRUE) ","Matrix","recommended","4.0.5"
"rbind2","closure","standardGeneric","TRUE","TRUE","(x, y, ...) ","Matrix","recommended","4.0.5"
"rcond","closure","standardGeneric","TRUE","TRUE","(x, norm, ...) ","Matrix","recommended","4.0.5"
"readHB","closure","function","TRUE","FALSE","(file) ","Matrix","recommended","4.0.5"
"readMM","closure","function","TRUE","FALSE","(file) ","Matrix","recommended","4.0.5"
"rep2abI","closure","function","TRUE","FALSE","(x, times) ","Matrix","recommended","4.0.5"
"rowMeans","closure","standardGeneric","TRUE","TRUE","(x, na.rm = FALSE, dims = 1, ...) ","Matrix","recommended","4.0.5"
"rowSums","closure","standardGeneric","TRUE","TRUE","(x, na.rm = FALSE, dims = 1, ...) ","Matrix","recommended","4.0.5"
"rsparsematrix","closure","function","TRUE","FALSE","(nrow, ncol, density, nnz = round(density * maxE), symmetric = FALSE,     rand.x = function(n) signif(rnorm(n), 2), ...) ","Matrix","recommended","4.0.5"
"show","closure","standardGeneric","TRUE","TRUE","(object) ","Matrix","recommended","4.0.5"
"skewpart","closure","standardGeneric","TRUE","TRUE","(x) ","Matrix","recommended","4.0.5"
"solve","closure","standardGeneric","TRUE","TRUE","(a, b, ...) ","Matrix","recommended","4.0.5"
"spMatrix","closure","function","TRUE","FALSE","(nrow, ncol, i = integer(), j = integer(), x = numeric()) ","Matrix","recommended","4.0.5"
"sparse.model.matrix","closure","function","TRUE","FALSE","(object, data = environment(object), contrasts.arg = NULL,     xlev = NULL, transpose = FALSE, drop.unused.levels = FALSE,     row.names = TRUE, sep = """", verbose = FALSE, ...) ","Matrix","recommended","4.0.5"
"sparseMatrix","closure","function","TRUE","FALSE","(i = ep, j = ep, p, x, dims, dimnames, symmetric = FALSE,     triangular = FALSE, index1 = TRUE, repr = ""C"", giveCsparse = (repr ==         ""C""), check = TRUE, use.last.ij = FALSE) ","Matrix","recommended","4.0.5"
"sparseVector","closure","function","TRUE","FALSE","(x, i, length) ","Matrix","recommended","4.0.5"
"summary","closure","standardGeneric","TRUE","TRUE","(object, ...) ","Matrix","recommended","4.0.5"
"symmpart","closure","standardGeneric","TRUE","TRUE","(x) ","Matrix","recommended","4.0.5"
"t","closure","standardGeneric","TRUE","TRUE","(x) ","Matrix","recommended","4.0.5"
"tail","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"tcrossprod","closure","standardGeneric","TRUE","TRUE","(x, y = NULL, ...) ","Matrix","recommended","4.0.5"
"toeplitz","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"tril","closure","standardGeneric","TRUE","TRUE","(x, k = 0, ...) ","Matrix","recommended","4.0.5"
"triu","closure","standardGeneric","TRUE","TRUE","(x, k = 0, ...) ","Matrix","recommended","4.0.5"
"uniqTsparse","closure","function","TRUE","FALSE","(x, class.x = c(class(x))) ","Matrix","recommended","4.0.5"
"unname","closure","standardGeneric","TRUE","TRUE","(obj, force = FALSE) ","Matrix","recommended","4.0.5"
"unpack","closure","standardGeneric","TRUE","TRUE","(x, ...) ","Matrix","recommended","4.0.5"
"update","closure","standardGeneric","TRUE","TRUE","(object, ...) ","Matrix","recommended","4.0.5"
"updown","closure","standardGeneric","TRUE","TRUE","(update, C, L) ","Matrix","recommended","4.0.5"
"which","closure","standardGeneric","TRUE","TRUE","(x, arr.ind = FALSE, useNames = TRUE) ","Matrix","recommended","4.0.5"
"writeMM","closure","standardGeneric","TRUE","TRUE","(obj, file, ...) ","Matrix","recommended","4.0.5"
"zapsmall","closure","standardGeneric","TRUE","TRUE","(x, digits = getOption(""digits"")) ","Matrix","recommended","4.0.5"
"!","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"!.hexmode","closure","function","TRUE","FALSE","(a) ","base","base","4.0.5"
"!.octmode","closure","function","TRUE","FALSE","(a) ","base","base","4.0.5"
"!=","builtin","function","TRUE","NA","(e1, e2) ","base","base","4.0.5"
"$","special","function","TRUE","NA","","base","base","4.0.5"
"$.DLLInfo","closure","function","TRUE","FALSE","(x, name) ","base","base","4.0.5"
"$.package_version","closure","function","TRUE","FALSE","(x, name) ","base","base","4.0.5"
"$<-","special","function","TRUE","NA","","base","base","4.0.5"
"$<-.data.frame","closure","function","TRUE","FALSE","(x, name, value) ","base","base","4.0.5"
"%%","builtin","function","TRUE","NA","(e1, e2) ","base","base","4.0.5"
"%*%","builtin","function","TRUE","NA","(x, y) ","base","base","4.0.5"
"%/%","builtin","function","TRUE","NA","(e1, e2) ","base","base","4.0.5"
"%in%","closure","function","TRUE","FALSE","(x, table) ","base","base","4.0.5"
"%o%","closure","function","TRUE","FALSE","(X, Y) ","base","base","4.0.5"
"%x%","closure","function","TRUE","FALSE","(X, Y) ","base","base","4.0.5"
"&","builtin","function","TRUE","NA","(e1, e2) ","base","base","4.0.5"
"&&","special","function","TRUE","NA","","base","base","4.0.5"
"&.hexmode","closure","function","TRUE","FALSE","(a, b) ","base","base","4.0.5"
"&.octmode","closure","function","TRUE","FALSE","(a, b) ","base","base","4.0.5"
"(","builtin","function","TRUE","NA","","base","base","4.0.5"
"*","builtin","function","TRUE","NA","(e1, e2) ","base","base","4.0.5"
"*.difftime","closure","function","TRUE","FALSE","(e1, e2) ","base","base","4.0.5"
"+","builtin","function","TRUE","NA","(e1, e2) ","base","base","4.0.5"
"+.Date","closure","function","TRUE","FALSE","(e1, e2) ","base","base","4.0.5"
"+.POSIXt","closure","function","TRUE","FALSE","(e1, e2) ","base","base","4.0.5"
"-","builtin","function","TRUE","NA","(e1, e2) ","base","base","4.0.5"
"-.Date","closure","function","TRUE","FALSE","(e1, e2) ","base","base","4.0.5"
"-.POSIXt","closure","function","TRUE","FALSE","(e1, e2) ","base","base","4.0.5"
"...elt","builtin","function","TRUE","NA","(n) ","base","base","4.0.5"
"...length","builtin","function","TRUE","NA","() ","base","base","4.0.5"
"..deparseOpts","character","character","TRUE","FALSE","NA","base","base","4.0.5"
"..getNamespace","closure","function","TRUE","FALSE","(name, where) ","base","base","4.0.5"
".ArgsEnv","environment","environment","TRUE","FALSE","NA","base","base","4.0.5"
".AutoloadEnv","environment","environment","TRUE","FALSE","NA","base","base","4.0.5"
".BaseNamespaceEnv","environment","environment","TRUE","FALSE","NA","base","base","4.0.5"
".C","builtin","function","TRUE","NA","(.NAME, ..., NAOK = FALSE, DUP = TRUE, PACKAGE, ENCODING) ","base","base","4.0.5"
".C_R_addTaskCallback","list","CallRoutine/NativeSymbolInfo","TRUE","FALSE","NA","base","base","4.0.5"
".C_R_getTaskCallbackNames","list","CallRoutine/NativeSymbolInfo","TRUE","FALSE","NA","base","base","4.0.5"
".C_R_removeTaskCallback","list","CallRoutine/NativeSymbolInfo","TRUE","FALSE","NA","base","base","4.0.5"
".Call","builtin","function","TRUE","NA","(.NAME, ..., PACKAGE) ","base","base","4.0.5"
".Call.graphics","builtin","function","TRUE","NA","(.NAME, ..., PACKAGE) ","base","base","4.0.5"
".Date","closure","function","TRUE","FALSE","(xx, cl = ""Date"") ","base","base","4.0.5"
".Defunct","closure","function","TRUE","FALSE","(new, package = NULL, msg) ","base","base","4.0.5"
".Deprecated","closure","function","TRUE","FALSE","(new, package = NULL, msg, old = as.character(sys.call(sys.parent()))[1L]) ","base","base","4.0.5"
".Device","character","character","TRUE","FALSE","NA","base","base","4.0.5"
".Devices","pairlist","pairlist","TRUE","FALSE","NA","base","base","4.0.5"
".External","builtin","function","TRUE","NA","(.NAME, ..., PACKAGE) ","base","base","4.0.5"
".External.graphics","builtin","function","TRUE","NA","(.NAME, ..., PACKAGE) ","base","base","4.0.5"
".External2","builtin","function","TRUE","NA","(.NAME, ..., PACKAGE) ","base","base","4.0.5"
".F_dchdc","NULL","NULL","TRUE","FALSE","NA","base","base","4.0.5"
".F_dqrcf","list","FortranRoutine/NativeSymbolInfo","TRUE","FALSE","NA","base","base","4.0.5"
".F_dqrdc2","list","FortranRoutine/NativeSymbolInfo","TRUE","FALSE","NA","base","base","4.0.5"
".F_dqrqty","list","FortranRoutine/NativeSymbolInfo","TRUE","FALSE","NA","base","base","4.0.5"
".F_dqrqy","list","FortranRoutine/NativeSymbolInfo","TRUE","FALSE","NA","base","base","4.0.5"
".F_dqrrsd","list","FortranRoutine/NativeSymbolInfo","TRUE","FALSE","NA","base","base","4.0.5"
".F_dqrxb","list","FortranRoutine/NativeSymbolInfo","TRUE","FALSE","NA","base","base","4.0.5"
".F_dtrco","list","FortranRoutine/NativeSymbolInfo","TRUE","FALSE","NA","base","base","4.0.5"
".First.sys","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
".Fortran","builtin","function","TRUE","NA","(.NAME, ..., NAOK = FALSE, DUP = TRUE, PACKAGE, ENCODING) ","base","base","4.0.5"
".GenericArgsEnv","environment","environment","TRUE","FALSE","NA","base","base","4.0.5"
".GlobalEnv","environment","environment","TRUE","FALSE","NA","base","base","4.0.5"
".Internal","special","function","TRUE","NA","(call) ","base","base","4.0.5"
".Last.value","character","character","TRUE","FALSE","NA","base","base","4.0.5"
".Library","character","character","TRUE","FALSE","NA","base","base","4.0.5"
".Library.site","character","character","TRUE","FALSE","NA","base","base","4.0.5"
".Machine","list","list","TRUE","FALSE","NA","base","base","4.0.5"
".NotYetImplemented","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
".NotYetUsed","closure","function","TRUE","FALSE","(arg, error = TRUE) ","base","base","4.0.5"
".OptRequireMethods","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
".Options","pairlist","pairlist","TRUE","FALSE","NA","base","base","4.0.5"
".POSIXct","closure","function","TRUE","FALSE","(xx, tz = NULL, cl = c(""POSIXct"", ""POSIXt"")) ","base","base","4.0.5"
".POSIXlt","closure","function","TRUE","FALSE","(xx, tz = NULL, cl = c(""POSIXlt"", ""POSIXt"")) ","base","base","4.0.5"
".Platform","list","list","TRUE","FALSE","NA","base","base","4.0.5"
".Primitive","builtin","function","TRUE","NA","(name) ","base","base","4.0.5"
".S3PrimitiveGenerics","character","character","TRUE","FALSE","NA","base","base","4.0.5"
".S3_methods_table","character","matrix/array","TRUE","FALSE","NA","base","base","4.0.5"
".S3method","closure","function","TRUE","FALSE","(generic, class, method) ","base","base","4.0.5"
".Script","closure","function","TRUE","FALSE","(interpreter, script, args, ...) ","base","base","4.0.5"
".TAOCP1997init","closure","function","TRUE","FALSE","(seed) ","base","base","4.0.5"
".__H__.cbind","closure","function","TRUE","FALSE","(..., deparse.level = 1) ","base","base","4.0.5"
".__H__.rbind","closure","function","TRUE","FALSE","(..., deparse.level = 1) ","base","base","4.0.5"
".__S3MethodsTable__.","environment","environment","TRUE","FALSE","NA","base","base","4.0.5"
".amatch_bounds","closure","function","TRUE","FALSE","(x = 0.1) ","base","base","4.0.5"
".amatch_costs","closure","function","TRUE","FALSE","(x = NULL) ","base","base","4.0.5"
".bincode","closure","function","TRUE","FALSE","(x, breaks, right = TRUE, include.lowest = FALSE) ","base","base","4.0.5"
".cache_class","builtin","function","TRUE","NA","(class, extends) ","base","base","4.0.5"
".class2","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
".col","closure","function","TRUE","FALSE","(dim) ","base","base","4.0.5"
".colMeans","closure","function","TRUE","FALSE","(x, m, n, na.rm = FALSE) ","base","base","4.0.5"
".colSums","closure","function","TRUE","FALSE","(x, m, n, na.rm = FALSE) ","base","base","4.0.5"
".decode_numeric_version","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
".deparseOpts","closure","function","TRUE","FALSE","(control) ","base","base","4.0.5"
".detach","closure","function","TRUE","FALSE","(pos) ","base","base","4.0.5"
".difftime","closure","function","TRUE","FALSE","(xx, units, cl = ""difftime"") ","base","base","4.0.5"
".doSortWrap","closure","function","TRUE","FALSE","(vec, decr, nalast, noNA = NA) ","base","base","4.0.5"
".doTrace","closure","function","TRUE","FALSE","(expr, msg) ","base","base","4.0.5"
".doWrap","closure","function","TRUE","FALSE","(vec, decr, nalast, noNA = NA) ","base","base","4.0.5"
".dynLibs","closure","function","TRUE","FALSE","(new) ","base","base","4.0.5"
".encode_numeric_version","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
".expand_R_libs_env_var","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
".format.zeros","closure","function","TRUE","FALSE","(x, zero.print, nx = suppressWarnings(as.numeric(x)),     replace = FALSE, warn.non.fitting = TRUE) ","base","base","4.0.5"
".getNamespace","closure","function","TRUE","FALSE","(name) ","base","base","4.0.5"
".getNamespaceInfo","closure","function","TRUE","FALSE","(ns, which) ","base","base","4.0.5"
".getRequiredPackages","closure","function","TRUE","FALSE","(file = ""DESCRIPTION"", lib.loc = NULL, quietly = FALSE,     useImports = FALSE) ","base","base","4.0.5"
".getRequiredPackages2","closure","function","TRUE","FALSE","(pkgInfo, quietly = FALSE, lib.loc = NULL, useImports = FALSE) ","base","base","4.0.5"
".gt","closure","function","TRUE","FALSE","(x, i, j) ","base","base","4.0.5"
".gtn","closure","function","TRUE","FALSE","(x, strictly) ","base","base","4.0.5"
".handleSimpleError","closure","function","TRUE","FALSE","(h, msg, call) ","base","base","4.0.5"
".isMethodsDispatchOn","builtin","function","TRUE","NA","(onOff = NULL) ","base","base","4.0.5"
".isOpen","closure","function","TRUE","FALSE","(srcfile) ","base","base","4.0.5"
".kappa_tri","closure","function","TRUE","FALSE","(z, exact = FALSE, LINPACK = TRUE, norm = NULL, ...) ","base","base","4.0.5"
".knownS3Generics","character","character","TRUE","FALSE","NA","base","base","4.0.5"
".kronecker","closure","function","TRUE","FALSE","(X, Y, FUN = ""*"", make.dimnames = FALSE, ...) ","base","base","4.0.5"
".leap.seconds","double","POSIXct/POSIXt","TRUE","FALSE","NA","base","base","4.0.5"
".libPaths","closure","function","TRUE","FALSE","(new) ","base","base","4.0.5"
".makeMessage","closure","function","TRUE","FALSE","(..., domain = NULL, appendLF = FALSE) ","base","base","4.0.5"
".make_numeric_version","closure","function","TRUE","FALSE","(x, strict = TRUE, regexp, classes = NULL) ","base","base","4.0.5"
".mapply","closure","function","TRUE","FALSE","(FUN, dots, MoreArgs) ","base","base","4.0.5"
".maskedMsg","closure","function","TRUE","FALSE","(same, pkg, by) ","base","base","4.0.5"
".mergeExportMethods","closure","function","TRUE","FALSE","(new, ns) ","base","base","4.0.5"
".mergeImportMethods","closure","function","TRUE","FALSE","(impenv, expenv, metaname) ","base","base","4.0.5"
".methodsNamespace","environment","environment","TRUE","FALSE","NA","base","base","4.0.5"
".noGenerics","logical","logical","TRUE","FALSE","NA","base","base","4.0.5"
".packageStartupMessage","closure","function","TRUE","FALSE","(message, call = NULL) ","base","base","4.0.5"
".packages","closure","function","TRUE","FALSE","(all.available = FALSE, lib.loc = NULL) ","base","base","4.0.5"
".popath","character","character","TRUE","FALSE","NA","base","base","4.0.5"
".primTrace","builtin","function","TRUE","NA","(obj) ","base","base","4.0.5"
".primUntrace","builtin","function","TRUE","NA","(obj) ","base","base","4.0.5"
".rmpkg","closure","function","TRUE","FALSE","(pkg) ","base","base","4.0.5"
".row","closure","function","TRUE","FALSE","(dim) ","base","base","4.0.5"
".rowMeans","closure","function","TRUE","FALSE","(x, m, n, na.rm = FALSE) ","base","base","4.0.5"
".rowNamesDF<-","closure","function","TRUE","FALSE","(x, make.names = FALSE, value) ","base","base","4.0.5"
".rowSums","closure","function","TRUE","FALSE","(x, m, n, na.rm = FALSE) ","base","base","4.0.5"
".row_names_info","closure","function","TRUE","FALSE","(x, type = 1L) ","base","base","4.0.5"
".set_row_names","closure","function","TRUE","FALSE","(n) ","base","base","4.0.5"
".signalSimpleWarning","closure","function","TRUE","FALSE","(msg, call) ","base","base","4.0.5"
".standard_regexps","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
".subset","builtin","function","TRUE","NA","(x, ...) ","base","base","4.0.5"
".subset2","builtin","function","TRUE","NA","(x, ...) ","base","base","4.0.5"
".traceback","closure","function","TRUE","FALSE","(x = NULL, max.lines = getOption(""traceback.max.lines"",     getOption(""deparse.max.lines"", -1L))) ","base","base","4.0.5"
".tryResumeInterrupt","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
".userHooksEnv","environment","environment","TRUE","FALSE","NA","base","base","4.0.5"
".valid.factor","closure","function","TRUE","FALSE","(object) ","base","base","4.0.5"
"/","builtin","function","TRUE","NA","(e1, e2) ","base","base","4.0.5"
"/.difftime","closure","function","TRUE","FALSE","(e1, e2) ","base","base","4.0.5"
":","builtin","function","TRUE","NA","","base","base","4.0.5"
"::","closure","function","TRUE","FALSE","(pkg, name) ","base","base","4.0.5"
":::","closure","function","TRUE","FALSE","(pkg, name) ","base","base","4.0.5"
"<","builtin","function","TRUE","NA","(e1, e2) ","base","base","4.0.5"
"<-","special","function","TRUE","NA","","base","base","4.0.5"
"<<-","special","function","TRUE","NA","","base","base","4.0.5"
"<=","builtin","function","TRUE","NA","(e1, e2) ","base","base","4.0.5"
"=","special","function","TRUE","NA","","base","base","4.0.5"
"==","builtin","function","TRUE","NA","(e1, e2) ","base","base","4.0.5"
">","builtin","function","TRUE","NA","(e1, e2) ","base","base","4.0.5"
">=","builtin","function","TRUE","NA","(e1, e2) ","base","base","4.0.5"
"@","special","function","TRUE","NA","","base","base","4.0.5"
"@<-","special","function","TRUE","NA","","base","base","4.0.5"
"Arg","builtin","function","TRUE","NA","(z) ","base","base","4.0.5"
"Conj","builtin","function","TRUE","NA","(z) ","base","base","4.0.5"
"Cstack_info","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"Encoding","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"Encoding<-","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"F","logical","logical","TRUE","FALSE","NA","base","base","4.0.5"
"Filter","closure","function","TRUE","FALSE","(f, x) ","base","base","4.0.5"
"Find","closure","function","TRUE","FALSE","(f, x, right = FALSE, nomatch = NULL) ","base","base","4.0.5"
"I","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"ISOdate","closure","function","TRUE","FALSE","(year, month, day, hour = 12, min = 0, sec = 0, tz = ""GMT"") ","base","base","4.0.5"
"ISOdatetime","closure","function","TRUE","FALSE","(year, month, day, hour, min, sec, tz = """") ","base","base","4.0.5"
"Im","builtin","function","TRUE","NA","(z) ","base","base","4.0.5"
"LETTERS","character","character","TRUE","FALSE","NA","base","base","4.0.5"
"La.svd","closure","function","TRUE","FALSE","(x, nu = min(n, p), nv = min(n, p)) ","base","base","4.0.5"
"La_library","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"La_version","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"Map","closure","function","TRUE","FALSE","(f, ...) ","base","base","4.0.5"
"Math.Date","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"Math.POSIXt","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"Math.data.frame","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"Math.difftime","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"Math.factor","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"Mod","builtin","function","TRUE","NA","(z) ","base","base","4.0.5"
"NCOL","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"NROW","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"Negate","closure","function","TRUE","FALSE","(f) ","base","base","4.0.5"
"NextMethod","closure","function","TRUE","FALSE","(generic = NULL, object = NULL, ...) ","base","base","4.0.5"
"OlsonNames","closure","function","TRUE","FALSE","(tzdir = NULL) ","base","base","4.0.5"
"Ops.Date","closure","function","TRUE","FALSE","(e1, e2) ","base","base","4.0.5"
"Ops.POSIXt","closure","function","TRUE","FALSE","(e1, e2) ","base","base","4.0.5"
"Ops.data.frame","closure","function","TRUE","FALSE","(e1, e2 = NULL) ","base","base","4.0.5"
"Ops.difftime","closure","function","TRUE","FALSE","(e1, e2) ","base","base","4.0.5"
"Ops.factor","closure","function","TRUE","FALSE","(e1, e2) ","base","base","4.0.5"
"Ops.numeric_version","closure","function","TRUE","FALSE","(e1, e2) ","base","base","4.0.5"
"Ops.ordered","closure","function","TRUE","FALSE","(e1, e2) ","base","base","4.0.5"
"Position","closure","function","TRUE","FALSE","(f, x, right = FALSE, nomatch = NA_integer_) ","base","base","4.0.5"
"R.Version","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"R.home","closure","function","TRUE","FALSE","(component = ""home"") ","base","base","4.0.5"
"R.version","list","simple.list","TRUE","FALSE","NA","base","base","4.0.5"
"R.version.string","character","character","TRUE","FALSE","NA","base","base","4.0.5"
"RNGkind","closure","function","TRUE","FALSE","(kind = NULL, normal.kind = NULL, sample.kind = NULL) ","base","base","4.0.5"
"RNGversion","closure","function","TRUE","FALSE","(vstr) ","base","base","4.0.5"
"R_system_version","closure","function","TRUE","FALSE","(x, strict = TRUE) ","base","base","4.0.5"
"Re","builtin","function","TRUE","NA","(z) ","base","base","4.0.5"
"Recall","closure","function","TRUE","FALSE","(...) ","base","base","4.0.5"
"Reduce","closure","function","TRUE","FALSE","(f, x, init, right = FALSE, accumulate = FALSE) ","base","base","4.0.5"
"Summary.Date","closure","function","TRUE","FALSE","(..., na.rm) ","base","base","4.0.5"
"Summary.POSIXct","closure","function","TRUE","FALSE","(..., na.rm) ","base","base","4.0.5"
"Summary.POSIXlt","closure","function","TRUE","FALSE","(..., na.rm) ","base","base","4.0.5"
"Summary.data.frame","closure","function","TRUE","FALSE","(..., na.rm) ","base","base","4.0.5"
"Summary.difftime","closure","function","TRUE","FALSE","(..., na.rm) ","base","base","4.0.5"
"Summary.factor","closure","function","TRUE","FALSE","(..., na.rm) ","base","base","4.0.5"
"Summary.numeric_version","closure","function","TRUE","FALSE","(..., na.rm) ","base","base","4.0.5"
"Summary.ordered","closure","function","TRUE","FALSE","(..., na.rm) ","base","base","4.0.5"
"Sys.Date","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"Sys.chmod","closure","function","TRUE","FALSE","(paths, mode = ""0777"", use_umask = TRUE) ","base","base","4.0.5"
"Sys.getenv","closure","function","TRUE","FALSE","(x = NULL, unset = """", names = NA) ","base","base","4.0.5"
"Sys.getlocale","closure","function","TRUE","FALSE","(category = ""LC_ALL"") ","base","base","4.0.5"
"Sys.getpid","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"Sys.glob","closure","function","TRUE","FALSE","(paths, dirmark = FALSE) ","base","base","4.0.5"
"Sys.info","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"Sys.localeconv","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"Sys.readlink","closure","function","TRUE","FALSE","(paths) ","base","base","4.0.5"
"Sys.setFileTime","closure","function","TRUE","FALSE","(path, time) ","base","base","4.0.5"
"Sys.setenv","closure","function","TRUE","FALSE","(...) ","base","base","4.0.5"
"Sys.setlocale","closure","function","TRUE","FALSE","(category = ""LC_ALL"", locale = """") ","base","base","4.0.5"
"Sys.sleep","closure","function","TRUE","FALSE","(time) ","base","base","4.0.5"
"Sys.time","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"Sys.timezone","closure","function","TRUE","FALSE","(location = TRUE) ","base","base","4.0.5"
"Sys.umask","closure","function","TRUE","FALSE","(mode = NA) ","base","base","4.0.5"
"Sys.unsetenv","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"Sys.which","closure","function","TRUE","FALSE","(names) ","base","base","4.0.5"
"T","logical","logical","TRUE","FALSE","NA","base","base","4.0.5"
"UseMethod","special","function","TRUE","NA","(generic, object) ","base","base","4.0.5"
"Vectorize","closure","function","TRUE","FALSE","(FUN, vectorize.args = arg.names, SIMPLIFY = TRUE, USE.NAMES = TRUE) ","base","base","4.0.5"
"[","special","function","TRUE","NA","","base","base","4.0.5"
"[.AsIs","closure","function","TRUE","FALSE","(x, i, ...) ","base","base","4.0.5"
"[.DLLInfoList","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"[.Date","closure","function","TRUE","FALSE","(x, ..., drop = TRUE) ","base","base","4.0.5"
"[.Dlist","closure","function","TRUE","FALSE","(x, i, ...) ","base","base","4.0.5"
"[.POSIXct","closure","function","TRUE","FALSE","(x, ..., drop = TRUE) ","base","base","4.0.5"
"[.POSIXlt","closure","function","TRUE","FALSE","(x, i, j, drop = TRUE) ","base","base","4.0.5"
"[.data.frame","closure","function","TRUE","FALSE","(x, i, j, drop = if (missing(i)) TRUE else length(cols) ==     1) ","base","base","4.0.5"
"[.difftime","closure","function","TRUE","FALSE","(x, ..., drop = TRUE) ","base","base","4.0.5"
"[.factor","closure","function","TRUE","FALSE","(x, ..., drop = FALSE) ","base","base","4.0.5"
"[.hexmode","closure","function","TRUE","FALSE","(x, i) ","base","base","4.0.5"
"[.listof","closure","function","TRUE","FALSE","(x, i, ...) ","base","base","4.0.5"
"[.noquote","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"[.numeric_version","closure","function","TRUE","FALSE","(x, i, j) ","base","base","4.0.5"
"[.octmode","closure","function","TRUE","FALSE","(x, i) ","base","base","4.0.5"
"[.simple.list","closure","function","TRUE","FALSE","(x, i, ...) ","base","base","4.0.5"
"[.table","closure","function","TRUE","FALSE","(x, i, j, ..., drop = TRUE) ","base","base","4.0.5"
"[.warnings","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"[<-","special","function","TRUE","NA","","base","base","4.0.5"
"[<-.Date","closure","function","TRUE","FALSE","(x, ..., value) ","base","base","4.0.5"
"[<-.POSIXct","closure","function","TRUE","FALSE","(x, ..., value) ","base","base","4.0.5"
"[<-.POSIXlt","closure","function","TRUE","FALSE","(x, i, j, value) ","base","base","4.0.5"
"[<-.data.frame","closure","function","TRUE","FALSE","(x, i, j, value) ","base","base","4.0.5"
"[<-.factor","closure","function","TRUE","FALSE","(x, ..., value) ","base","base","4.0.5"
"[<-.numeric_version","closure","function","TRUE","FALSE","(x, i, j, value) ","base","base","4.0.5"
"[[","special","function","TRUE","NA","","base","base","4.0.5"
"[[.Date","closure","function","TRUE","FALSE","(x, ..., drop = TRUE) ","base","base","4.0.5"
"[[.POSIXct","closure","function","TRUE","FALSE","(x, ..., drop = TRUE) ","base","base","4.0.5"
"[[.POSIXlt","closure","function","TRUE","FALSE","(x, i, drop = TRUE) ","base","base","4.0.5"
"[[.data.frame","closure","function","TRUE","FALSE","(x, ..., exact = TRUE) ","base","base","4.0.5"
"[[.factor","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"[[.numeric_version","closure","function","TRUE","FALSE","(x, ..., exact = NA) ","base","base","4.0.5"
"[[<-","special","function","TRUE","NA","","base","base","4.0.5"
"[[<-.POSIXlt","closure","function","TRUE","FALSE","(x, i, value) ","base","base","4.0.5"
"[[<-.data.frame","closure","function","TRUE","FALSE","(x, i, j, value) ","base","base","4.0.5"
"[[<-.factor","closure","function","TRUE","FALSE","(x, ..., value) ","base","base","4.0.5"
"[[<-.numeric_version","closure","function","TRUE","FALSE","(x, ..., value) ","base","base","4.0.5"
"^","builtin","function","TRUE","NA","(e1, e2) ","base","base","4.0.5"
"abbreviate","closure","function","TRUE","FALSE","(names.arg, minlength = 4L, use.classes = TRUE, dot = FALSE,     strict = FALSE, method = c(""left.kept"", ""both.sides""), named = TRUE) ","base","base","4.0.5"
"abs","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"acos","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"acosh","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"activeBindingFunction","closure","function","TRUE","FALSE","(sym, env) ","base","base","4.0.5"
"addNA","closure","function","TRUE","FALSE","(x, ifany = FALSE) ","base","base","4.0.5"
"addTaskCallback","closure","function","TRUE","FALSE","(f, data = NULL, name = character()) ","base","base","4.0.5"
"agrep","closure","function","TRUE","FALSE","(pattern, x, max.distance = 0.1, costs = NULL, ignore.case = FALSE,     value = FALSE, fixed = TRUE, useBytes = FALSE) ","base","base","4.0.5"
"agrepl","closure","function","TRUE","FALSE","(pattern, x, max.distance = 0.1, costs = NULL, ignore.case = FALSE,     fixed = TRUE, useBytes = FALSE) ","base","base","4.0.5"
"alist","closure","function","TRUE","FALSE","(...) ","base","base","4.0.5"
"all","builtin","function","TRUE","NA","(..., na.rm = FALSE) ","base","base","4.0.5"
"all.equal","closure","function","TRUE","TRUE","(target, current, ...) ","base","base","4.0.5"
"all.equal.POSIXt","closure","function","TRUE","FALSE","(target, current, ..., tolerance = 0.001, scale) ","base","base","4.0.5"
"all.equal.character","closure","function","TRUE","FALSE","(target, current, ..., check.attributes = TRUE) ","base","base","4.0.5"
"all.equal.default","closure","function","TRUE","FALSE","(target, current, ...) ","base","base","4.0.5"
"all.equal.envRefClass","closure","function","TRUE","FALSE","(target, current, ...) ","base","base","4.0.5"
"all.equal.environment","closure","function","TRUE","FALSE","(target, current, all.names = TRUE, ...) ","base","base","4.0.5"
"all.equal.factor","closure","function","TRUE","FALSE","(target, current, ..., check.attributes = TRUE) ","base","base","4.0.5"
"all.equal.formula","closure","function","TRUE","FALSE","(target, current, ...) ","base","base","4.0.5"
"all.equal.language","closure","function","TRUE","FALSE","(target, current, ...) ","base","base","4.0.5"
"all.equal.list","closure","function","TRUE","FALSE","(target, current, ..., check.attributes = TRUE, use.names = TRUE) ","base","base","4.0.5"
"all.equal.numeric","closure","function","TRUE","FALSE","(target, current, tolerance = sqrt(.Machine$double.eps),     scale = NULL, countEQ = FALSE, formatFUN = function(err,         what) format(err), ..., check.attributes = TRUE) ","base","base","4.0.5"
"all.equal.raw","closure","function","TRUE","FALSE","(target, current, ..., check.attributes = TRUE) ","base","base","4.0.5"
"all.names","closure","function","TRUE","FALSE","(expr, functions = TRUE, max.names = -1L, unique = FALSE) ","base","base","4.0.5"
"all.vars","closure","function","TRUE","FALSE","(expr, functions = FALSE, max.names = -1L, unique = TRUE) ","base","base","4.0.5"
"allowInterrupts","closure","function","TRUE","FALSE","(expr) ","base","base","4.0.5"
"any","builtin","function","TRUE","NA","(..., na.rm = FALSE) ","base","base","4.0.5"
"anyDuplicated","closure","function","TRUE","FALSE","(x, incomparables = FALSE, ...) ","base","base","4.0.5"
"anyDuplicated.array","closure","function","TRUE","FALSE","(x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE,     ...) ","base","base","4.0.5"
"anyDuplicated.data.frame","closure","function","TRUE","FALSE","(x, incomparables = FALSE, fromLast = FALSE, ...) ","base","base","4.0.5"
"anyDuplicated.default","closure","function","TRUE","FALSE","(x, incomparables = FALSE, fromLast = FALSE, ...) ","base","base","4.0.5"
"anyDuplicated.matrix","closure","function","TRUE","FALSE","(x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE,     ...) ","base","base","4.0.5"
"anyNA","builtin","function","TRUE","NA","(x, recursive = FALSE) ","base","base","4.0.5"
"anyNA.POSIXlt","closure","function","TRUE","FALSE","(x, recursive = FALSE) ","base","base","4.0.5"
"anyNA.data.frame","closure","function","TRUE","FALSE","(x, recursive = FALSE) ","base","base","4.0.5"
"anyNA.numeric_version","closure","function","TRUE","FALSE","(x, recursive = FALSE) ","base","base","4.0.5"
"aperm","closure","function","TRUE","FALSE","(a, perm, ...) ","base","base","4.0.5"
"aperm.default","closure","function","TRUE","FALSE","(a, perm = NULL, resize = TRUE, ...) ","base","base","4.0.5"
"aperm.table","closure","function","TRUE","FALSE","(a, perm = NULL, resize = TRUE, keep.class = TRUE, ...) ","base","base","4.0.5"
"append","closure","function","TRUE","FALSE","(x, values, after = length(x)) ","base","base","4.0.5"
"apply","closure","function","TRUE","FALSE","(X, MARGIN, FUN, ...) ","base","base","4.0.5"
"args","closure","function","TRUE","FALSE","(name) ","base","base","4.0.5"
"array","closure","function","TRUE","FALSE","(data = NA, dim = length(data), dimnames = NULL) ","base","base","4.0.5"
"arrayInd","closure","function","TRUE","FALSE","(ind, .dim, .dimnames = NULL, useNames = FALSE) ","base","base","4.0.5"
"as.Date","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.Date.POSIXct","closure","function","TRUE","FALSE","(x, tz = ""UTC"", ...) ","base","base","4.0.5"
"as.Date.POSIXlt","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.Date.character","closure","function","TRUE","FALSE","(x, format, tryFormats = c(""%Y-%m-%d"", ""%Y/%m/%d""),     optional = FALSE, ...) ","base","base","4.0.5"
"as.Date.default","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.Date.factor","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.Date.numeric","closure","function","TRUE","FALSE","(x, origin, ...) ","base","base","4.0.5"
"as.POSIXct","closure","function","TRUE","FALSE","(x, tz = """", ...) ","base","base","4.0.5"
"as.POSIXct.Date","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.POSIXct.POSIXlt","closure","function","TRUE","FALSE","(x, tz = """", ...) ","base","base","4.0.5"
"as.POSIXct.default","closure","function","TRUE","FALSE","(x, tz = """", ...) ","base","base","4.0.5"
"as.POSIXct.numeric","closure","function","TRUE","FALSE","(x, tz = """", origin, ...) ","base","base","4.0.5"
"as.POSIXlt","closure","function","TRUE","FALSE","(x, tz = """", ...) ","base","base","4.0.5"
"as.POSIXlt.Date","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.POSIXlt.POSIXct","closure","function","TRUE","FALSE","(x, tz = """", ...) ","base","base","4.0.5"
"as.POSIXlt.character","closure","function","TRUE","FALSE","(x, tz = """", format, tryFormats = c(""%Y-%m-%d %H:%M:%OS"",     ""%Y/%m/%d %H:%M:%OS"", ""%Y-%m-%d %H:%M"", ""%Y/%m/%d %H:%M"",     ""%Y-%m-%d"", ""%Y/%m/%d""), optional = FALSE, ...) ","base","base","4.0.5"
"as.POSIXlt.default","closure","function","TRUE","FALSE","(x, tz = """", optional = FALSE, ...) ","base","base","4.0.5"
"as.POSIXlt.factor","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.POSIXlt.numeric","closure","function","TRUE","FALSE","(x, tz = """", origin, ...) ","base","base","4.0.5"
"as.array","closure","function","TRUE","TRUE","(x, ...) ","base","base","4.0.5"
"as.array.default","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.call","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"as.character","builtin","function","TRUE","NA","(x, ...) ","base","base","4.0.5"
"as.character.Date","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.character.POSIXt","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.character.condition","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.character.default","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.character.error","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.character.factor","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.character.hexmode","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.character.numeric_version","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.character.octmode","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.character.srcref","closure","function","TRUE","FALSE","(x, useSource = TRUE, to = x, ...) ","base","base","4.0.5"
"as.complex","builtin","function","TRUE","NA","(x, ...) ","base","base","4.0.5"
"as.data.frame","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ...) ","base","base","4.0.5"
"as.data.frame.AsIs","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ...) ","base","base","4.0.5"
"as.data.frame.Date","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x))) ","base","base","4.0.5"
"as.data.frame.POSIXct","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x))) ","base","base","4.0.5"
"as.data.frame.POSIXlt","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ...) ","base","base","4.0.5"
"as.data.frame.array","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ...) ","base","base","4.0.5"
"as.data.frame.character","closure","function","TRUE","FALSE","(x, ..., stringsAsFactors = default.stringsAsFactors()) ","base","base","4.0.5"
"as.data.frame.complex","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x))) ","base","base","4.0.5"
"as.data.frame.data.frame","closure","function","TRUE","FALSE","(x, row.names = NULL, ...) ","base","base","4.0.5"
"as.data.frame.default","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.data.frame.difftime","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x))) ","base","base","4.0.5"
"as.data.frame.factor","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x))) ","base","base","4.0.5"
"as.data.frame.integer","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x))) ","base","base","4.0.5"
"as.data.frame.list","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ..., cut.names = FALSE,     col.names = names(x), fix.empty.names = TRUE, stringsAsFactors = default.stringsAsFactors()) ","base","base","4.0.5"
"as.data.frame.logical","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x))) ","base","base","4.0.5"
"as.data.frame.matrix","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, make.names = TRUE,     ..., stringsAsFactors = default.stringsAsFactors()) ","base","base","4.0.5"
"as.data.frame.model.matrix","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, make.names = TRUE,     ...) ","base","base","4.0.5"
"as.data.frame.noquote","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x))) ","base","base","4.0.5"
"as.data.frame.numeric","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x))) ","base","base","4.0.5"
"as.data.frame.numeric_version","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x))) ","base","base","4.0.5"
"as.data.frame.ordered","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x))) ","base","base","4.0.5"
"as.data.frame.raw","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x))) ","base","base","4.0.5"
"as.data.frame.table","closure","function","TRUE","FALSE","(x, row.names = NULL, ..., responseName = ""Freq"", stringsAsFactors = TRUE,     sep = """", base = list(LETTERS)) ","base","base","4.0.5"
"as.data.frame.ts","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.data.frame.vector","closure","function","TRUE","FALSE","(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x))) ","base","base","4.0.5"
"as.difftime","closure","function","TRUE","FALSE","(tim, format = ""%X"", units = ""auto"", tz = ""UTC"") ","base","base","4.0.5"
"as.double","builtin","function","TRUE","NA","(x, ...) ","base","base","4.0.5"
"as.double.POSIXlt","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.double.difftime","closure","function","TRUE","FALSE","(x, units = ""auto"", ...) ","base","base","4.0.5"
"as.environment","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"as.expression","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.expression.default","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.factor","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"as.function","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.function.default","closure","function","TRUE","FALSE","(x, envir = parent.frame(), ...) ","base","base","4.0.5"
"as.hexmode","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"as.integer","builtin","function","TRUE","NA","(x, ...) ","base","base","4.0.5"
"as.list","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.list.Date","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.list.POSIXct","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.list.POSIXlt","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.list.data.frame","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.list.default","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.list.difftime","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.list.environment","closure","function","TRUE","FALSE","(x, all.names = FALSE, sorted = FALSE, ...) ","base","base","4.0.5"
"as.list.factor","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.list.function","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.list.numeric_version","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.logical","builtin","function","TRUE","NA","(x, ...) ","base","base","4.0.5"
"as.logical.factor","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.matrix","closure","function","TRUE","TRUE","(x, ...) ","base","base","4.0.5"
"as.matrix.POSIXlt","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.matrix.data.frame","closure","function","TRUE","FALSE","(x, rownames.force = NA, ...) ","base","base","4.0.5"
"as.matrix.default","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.matrix.noquote","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.name","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"as.null","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.null.default","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.numeric","builtin","function","TRUE","NA","(x, ...) ","base","base","4.0.5"
"as.numeric_version","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"as.octmode","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"as.ordered","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"as.package_version","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"as.pairlist","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"as.qr","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"as.raw","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"as.single","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.single.default","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.symbol","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"as.table","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.table.default","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"as.vector","closure","function","TRUE","TRUE","(x, mode = ""any"") ","base","base","4.0.5"
"as.vector.factor","closure","function","TRUE","FALSE","(x, mode = ""any"") ","base","base","4.0.5"
"asNamespace","closure","function","TRUE","FALSE","(ns, base.OK = TRUE) ","base","base","4.0.5"
"asS3","closure","function","TRUE","FALSE","(object, flag = TRUE, complete = TRUE) ","base","base","4.0.5"
"asS4","closure","function","TRUE","FALSE","(object, flag = TRUE, complete = TRUE) ","base","base","4.0.5"
"asin","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"asinh","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"asplit","closure","function","TRUE","FALSE","(x, MARGIN) ","base","base","4.0.5"
"assign","closure","function","TRUE","FALSE","(x, value, pos = -1, envir = as.environment(pos), inherits = FALSE,     immediate = TRUE) ","base","base","4.0.5"
"atan","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"atan2","closure","function","TRUE","FALSE","(y, x) ","base","base","4.0.5"
"atanh","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"attach","closure","function","TRUE","FALSE","(what, pos = 2L, name = deparse1(substitute(what), backtick = FALSE),     warn.conflicts = TRUE) ","base","base","4.0.5"
"attachNamespace","closure","function","TRUE","FALSE","(ns, pos = 2L, depends = NULL, exclude, include.only) ","base","base","4.0.5"
"attr","builtin","function","TRUE","NA","(x, which, exact = FALSE) ","base","base","4.0.5"
"attr.all.equal","closure","function","TRUE","FALSE","(target, current, ..., check.attributes = TRUE, check.names = TRUE) ","base","base","4.0.5"
"attr<-","builtin","function","TRUE","NA","(x, which, value) ","base","base","4.0.5"
"attributes","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"attributes<-","builtin","function","TRUE","NA","(x, value) ","base","base","4.0.5"
"autoload","closure","function","TRUE","FALSE","(name, package, reset = FALSE, ...) ","base","base","4.0.5"
"autoloader","closure","function","TRUE","FALSE","(name, package, ...) ","base","base","4.0.5"
"backsolve","closure","function","TRUE","FALSE","(r, x, k = ncol(r), upper.tri = TRUE, transpose = FALSE) ","base","base","4.0.5"
"baseenv","builtin","function","TRUE","NA","() ","base","base","4.0.5"
"basename","closure","function","TRUE","FALSE","(path) ","base","base","4.0.5"
"besselI","closure","function","TRUE","FALSE","(x, nu, expon.scaled = FALSE) ","base","base","4.0.5"
"besselJ","closure","function","TRUE","FALSE","(x, nu) ","base","base","4.0.5"
"besselK","closure","function","TRUE","FALSE","(x, nu, expon.scaled = FALSE) ","base","base","4.0.5"
"besselY","closure","function","TRUE","FALSE","(x, nu) ","base","base","4.0.5"
"beta","closure","function","TRUE","FALSE","(a, b) ","base","base","4.0.5"
"bindingIsActive","closure","function","TRUE","FALSE","(sym, env) ","base","base","4.0.5"
"bindingIsLocked","closure","function","TRUE","FALSE","(sym, env) ","base","base","4.0.5"
"bindtextdomain","closure","function","TRUE","FALSE","(domain, dirname = NULL) ","base","base","4.0.5"
"bitwAnd","closure","function","TRUE","FALSE","(a, b) ","base","base","4.0.5"
"bitwNot","closure","function","TRUE","FALSE","(a) ","base","base","4.0.5"
"bitwOr","closure","function","TRUE","FALSE","(a, b) ","base","base","4.0.5"
"bitwShiftL","closure","function","TRUE","FALSE","(a, n) ","base","base","4.0.5"
"bitwShiftR","closure","function","TRUE","FALSE","(a, n) ","base","base","4.0.5"
"bitwXor","closure","function","TRUE","FALSE","(a, b) ","base","base","4.0.5"
"body","closure","function","TRUE","FALSE","(fun = sys.function(sys.parent())) ","base","base","4.0.5"
"body<-","closure","function","TRUE","TRUE","(fun, envir = environment(fun), value) ","base","base","4.0.5"
"bquote","closure","function","TRUE","FALSE","(expr, where = parent.frame(), splice = FALSE) ","base","base","4.0.5"
"break","special","function","TRUE","NA","","base","base","4.0.5"
"browser","builtin","function","TRUE","NA","(text = """", condition = NULL, expr = TRUE, skipCalls = 0L) ","base","base","4.0.5"
"browserCondition","closure","function","TRUE","FALSE","(n = 1L) ","base","base","4.0.5"
"browserSetDebug","closure","function","TRUE","FALSE","(n = 1L) ","base","base","4.0.5"
"browserText","closure","function","TRUE","FALSE","(n = 1L) ","base","base","4.0.5"
"builtins","closure","function","TRUE","FALSE","(internal = FALSE) ","base","base","4.0.5"
"by","closure","function","TRUE","FALSE","(data, INDICES, FUN, ..., simplify = TRUE) ","base","base","4.0.5"
"by.data.frame","closure","function","TRUE","FALSE","(data, INDICES, FUN, ..., simplify = TRUE) ","base","base","4.0.5"
"by.default","closure","function","TRUE","FALSE","(data, INDICES, FUN, ..., simplify = TRUE) ","base","base","4.0.5"
"bzfile","closure","function","TRUE","FALSE","(description, open = """", encoding = getOption(""encoding""),     compression = 9) ","base","base","4.0.5"
"c","builtin","function","TRUE","NA","(...) ","base","base","4.0.5"
"c.Date","closure","function","TRUE","FALSE","(..., recursive = FALSE) ","base","base","4.0.5"
"c.POSIXct","closure","function","TRUE","FALSE","(..., recursive = FALSE) ","base","base","4.0.5"
"c.POSIXlt","closure","function","TRUE","FALSE","(..., recursive = FALSE) ","base","base","4.0.5"
"c.difftime","closure","function","TRUE","FALSE","(..., recursive = FALSE) ","base","base","4.0.5"
"c.noquote","closure","function","TRUE","FALSE","(..., recursive = FALSE) ","base","base","4.0.5"
"c.numeric_version","closure","function","TRUE","FALSE","(..., recursive = FALSE) ","base","base","4.0.5"
"c.warnings","closure","function","TRUE","FALSE","(..., recursive = FALSE) ","base","base","4.0.5"
"call","special","function","TRUE","NA","(name, ...) ","base","base","4.0.5"
"callCC","closure","function","TRUE","FALSE","(fun) ","base","base","4.0.5"
"capabilities","closure","function","TRUE","FALSE","(what = NULL, Xchk = any(nas %in% c(""X11"", ""jpeg"", ""png"",     ""tiff""))) ","base","base","4.0.5"
"casefold","closure","function","TRUE","FALSE","(x, upper = FALSE) ","base","base","4.0.5"
"cat","closure","function","TRUE","FALSE","(..., file = """", sep = "" "", fill = FALSE, labels = NULL,     append = FALSE) ","base","base","4.0.5"
"cbind","closure","function","TRUE","FALSE","(..., deparse.level = 1) ","base","base","4.0.5"
"cbind.data.frame","closure","function","TRUE","FALSE","(..., deparse.level = 1) ","base","base","4.0.5"
"ceiling","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"char.expand","closure","function","TRUE","FALSE","(input, target, nomatch = stop(""no match"")) ","base","base","4.0.5"
"charToRaw","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"character","closure","function","TRUE","FALSE","(length = 0L) ","base","base","4.0.5"
"charmatch","closure","function","TRUE","FALSE","(x, table, nomatch = NA_integer_) ","base","base","4.0.5"
"chartr","closure","function","TRUE","FALSE","(old, new, x) ","base","base","4.0.5"
"check_tzones","closure","function","TRUE","FALSE","(...) ","base","base","4.0.5"
"chkDots","closure","function","TRUE","FALSE","(..., which.call = -1, allowed = character(0)) ","base","base","4.0.5"
"chol","closure","function","TRUE","TRUE","(x, ...) ","base","base","4.0.5"
"chol.default","closure","function","TRUE","FALSE","(x, pivot = FALSE, LINPACK = FALSE, tol = -1, ...) ","base","base","4.0.5"
"chol2inv","closure","function","TRUE","TRUE","(x, size = NCOL(x), LINPACK = FALSE) ","base","base","4.0.5"
"choose","closure","function","TRUE","FALSE","(n, k) ","base","base","4.0.5"
"class","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"class<-","builtin","function","TRUE","NA","(x, value) ","base","base","4.0.5"
"clearPushBack","closure","function","TRUE","FALSE","(connection) ","base","base","4.0.5"
"close","closure","function","TRUE","FALSE","(con, ...) ","base","base","4.0.5"
"close.connection","closure","function","TRUE","FALSE","(con, type = ""rw"", ...) ","base","base","4.0.5"
"close.srcfile","closure","function","TRUE","FALSE","(con, ...) ","base","base","4.0.5"
"close.srcfilealias","closure","function","TRUE","FALSE","(con, ...) ","base","base","4.0.5"
"closeAllConnections","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"col","closure","function","TRUE","FALSE","(x, as.factor = FALSE) ","base","base","4.0.5"
"colMeans","closure","function","TRUE","TRUE","(x, na.rm = FALSE, dims = 1L) ","base","base","4.0.5"
"colSums","closure","function","TRUE","TRUE","(x, na.rm = FALSE, dims = 1L) ","base","base","4.0.5"
"colnames","closure","function","TRUE","FALSE","(x, do.NULL = TRUE, prefix = ""col"") ","base","base","4.0.5"
"colnames<-","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"commandArgs","closure","function","TRUE","FALSE","(trailingOnly = FALSE) ","base","base","4.0.5"
"comment","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"comment<-","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"complex","closure","function","TRUE","FALSE","(length.out = 0L, real = numeric(), imaginary = numeric(),     modulus = 1, argument = 0) ","base","base","4.0.5"
"computeRestarts","closure","function","TRUE","FALSE","(cond = NULL) ","base","base","4.0.5"
"conditionCall","closure","function","TRUE","FALSE","(c) ","base","base","4.0.5"
"conditionCall.condition","closure","function","TRUE","FALSE","(c) ","base","base","4.0.5"
"conditionMessage","closure","function","TRUE","FALSE","(c) ","base","base","4.0.5"
"conditionMessage.condition","closure","function","TRUE","FALSE","(c) ","base","base","4.0.5"
"conflictRules","closure","function","TRUE","FALSE","(pkg, mask.ok = NULL, exclude = NULL) ","base","base","4.0.5"
"conflicts","closure","function","TRUE","FALSE","(where = search(), detail = FALSE) ","base","base","4.0.5"
"contributors","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"cos","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"cosh","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"cospi","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"crossprod","closure","function","TRUE","TRUE","(x, y = NULL) ","base","base","4.0.5"
"cummax","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"cummin","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"cumprod","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"cumsum","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"curlGetHeaders","closure","function","TRUE","FALSE","(url, redirect = TRUE, verify = TRUE) ","base","base","4.0.5"
"cut","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"cut.Date","closure","function","TRUE","FALSE","(x, breaks, labels = NULL, start.on.monday = TRUE, right = FALSE,     ...) ","base","base","4.0.5"
"cut.POSIXt","closure","function","TRUE","FALSE","(x, breaks, labels = NULL, start.on.monday = TRUE, right = FALSE,     ...) ","base","base","4.0.5"
"cut.default","closure","function","TRUE","FALSE","(x, breaks, labels = NULL, include.lowest = FALSE, right = TRUE,     dig.lab = 3L, ordered_result = FALSE, ...) ","base","base","4.0.5"
"dQuote","closure","function","TRUE","FALSE","(x, q = getOption(""useFancyQuotes"")) ","base","base","4.0.5"
"data.class","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"data.frame","closure","function","TRUE","FALSE","(..., row.names = NULL, check.rows = FALSE, check.names = TRUE,     fix.empty.names = TRUE, stringsAsFactors = default.stringsAsFactors()) ","base","base","4.0.5"
"data.matrix","closure","function","TRUE","FALSE","(frame, rownames.force = NA) ","base","base","4.0.5"
"date","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"debug","closure","function","TRUE","FALSE","(fun, text = """", condition = NULL, signature = NULL) ","base","base","4.0.5"
"debuggingState","closure","function","TRUE","FALSE","(on = NULL) ","base","base","4.0.5"
"debugonce","closure","function","TRUE","FALSE","(fun, text = """", condition = NULL, signature = NULL) ","base","base","4.0.5"
"default.stringsAsFactors","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"delayedAssign","closure","function","TRUE","FALSE","(x, value, eval.env = parent.frame(1), assign.env = parent.frame(1)) ","base","base","4.0.5"
"deparse","closure","function","TRUE","FALSE","(expr, width.cutoff = 60L, backtick = mode(expr) %in%     c(""call"", ""expression"", ""("", ""function""), control = c(""keepNA"",     ""keepInteger"", ""niceNames"", ""showAttributes""), nlines = -1L) ","base","base","4.0.5"
"deparse1","closure","function","TRUE","FALSE","(expr, collapse = "" "", width.cutoff = 500L, ...) ","base","base","4.0.5"
"det","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"detach","closure","function","TRUE","FALSE","(name, pos = 2L, unload = FALSE, character.only = FALSE,     force = FALSE) ","base","base","4.0.5"
"determinant","closure","function","TRUE","TRUE","(x, logarithm = TRUE, ...) ","base","base","4.0.5"
"determinant.matrix","closure","function","TRUE","FALSE","(x, logarithm = TRUE, ...) ","base","base","4.0.5"
"dget","closure","function","TRUE","FALSE","(file, keep.source = FALSE) ","base","base","4.0.5"
"diag","closure","function","TRUE","TRUE","(x = 1, nrow, ncol, names = TRUE) ","base","base","4.0.5"
"diag<-","closure","function","TRUE","TRUE","(x, value) ","base","base","4.0.5"
"diff","closure","function","TRUE","TRUE","(x, ...) ","base","base","4.0.5"
"diff.Date","closure","function","TRUE","FALSE","(x, lag = 1L, differences = 1L, ...) ","base","base","4.0.5"
"diff.POSIXt","closure","function","TRUE","FALSE","(x, lag = 1L, differences = 1L, ...) ","base","base","4.0.5"
"diff.default","closure","function","TRUE","FALSE","(x, lag = 1L, differences = 1L, ...) ","base","base","4.0.5"
"diff.difftime","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"difftime","closure","function","TRUE","FALSE","(time1, time2, tz, units = c(""auto"", ""secs"", ""mins"",     ""hours"", ""days"", ""weeks"")) ","base","base","4.0.5"
"digamma","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"dim","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"dim.data.frame","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"dim<-","builtin","function","TRUE","NA","(x, value) ","base","base","4.0.5"
"dimnames","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"dimnames.data.frame","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"dimnames<-","builtin","function","TRUE","NA","(x, value) ","base","base","4.0.5"
"dimnames<-.data.frame","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"dir","closure","function","TRUE","FALSE","(path = ""."", pattern = NULL, all.files = FALSE, full.names = FALSE,     recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE,     no.. = FALSE) ","base","base","4.0.5"
"dir.create","closure","function","TRUE","FALSE","(path, showWarnings = TRUE, recursive = FALSE, mode = ""0777"") ","base","base","4.0.5"
"dir.exists","closure","function","TRUE","FALSE","(paths) ","base","base","4.0.5"
"dirname","closure","function","TRUE","FALSE","(path) ","base","base","4.0.5"
"do.call","closure","function","TRUE","FALSE","(what, args, quote = FALSE, envir = parent.frame()) ","base","base","4.0.5"
"dontCheck","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"double","closure","function","TRUE","FALSE","(length = 0L) ","base","base","4.0.5"
"dput","closure","function","TRUE","FALSE","(x, file = """", control = c(""keepNA"", ""keepInteger"",     ""niceNames"", ""showAttributes"")) ","base","base","4.0.5"
"drop","closure","function","TRUE","TRUE","(x) ","base","base","4.0.5"
"droplevels","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"droplevels.data.frame","closure","function","TRUE","FALSE","(x, except = NULL, exclude, ...) ","base","base","4.0.5"
"droplevels.factor","closure","function","TRUE","FALSE","(x, exclude = if (anyNA(levels(x))) NULL else NA, ...) ","base","base","4.0.5"
"dump","closure","function","TRUE","FALSE","(list, file = ""dumpdata.R"", append = FALSE, control = ""all"",     envir = parent.frame(), evaluate = TRUE) ","base","base","4.0.5"
"duplicated","closure","function","TRUE","FALSE","(x, incomparables = FALSE, ...) ","base","base","4.0.5"
"duplicated.POSIXlt","closure","function","TRUE","FALSE","(x, incomparables = FALSE, ...) ","base","base","4.0.5"
"duplicated.array","closure","function","TRUE","FALSE","(x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE,     ...) ","base","base","4.0.5"
"duplicated.data.frame","closure","function","TRUE","FALSE","(x, incomparables = FALSE, fromLast = FALSE, ...) ","base","base","4.0.5"
"duplicated.default","closure","function","TRUE","FALSE","(x, incomparables = FALSE, fromLast = FALSE, nmax = NA,     ...) ","base","base","4.0.5"
"duplicated.matrix","closure","function","TRUE","FALSE","(x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE,     ...) ","base","base","4.0.5"
"duplicated.numeric_version","closure","function","TRUE","FALSE","(x, incomparables = FALSE, ...) ","base","base","4.0.5"
"duplicated.warnings","closure","function","TRUE","FALSE","(x, incomparables = FALSE, ...) ","base","base","4.0.5"
"dyn.load","closure","function","TRUE","FALSE","(x, local = TRUE, now = TRUE, ...) ","base","base","4.0.5"
"dyn.unload","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"dynGet","closure","function","TRUE","FALSE","(x, ifnotfound = stop(gettextf(""%s not found"", sQuote(x)),     domain = NA), minframe = 1L, inherits = FALSE) ","base","base","4.0.5"
"eapply","closure","function","TRUE","FALSE","(env, FUN, ..., all.names = FALSE, USE.NAMES = TRUE) ","base","base","4.0.5"
"eigen","closure","function","TRUE","FALSE","(x, symmetric, only.values = FALSE, EISPACK = FALSE) ","base","base","4.0.5"
"emptyenv","builtin","function","TRUE","NA","() ","base","base","4.0.5"
"enc2native","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"enc2utf8","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"encodeString","closure","function","TRUE","FALSE","(x, width = 0L, quote = """", na.encode = TRUE, justify = c(""left"",     ""right"", ""centre"", ""none"")) ","base","base","4.0.5"
"endsWith","closure","function","TRUE","FALSE","(x, suffix) ","base","base","4.0.5"
"enquote","closure","function","TRUE","FALSE","(cl) ","base","base","4.0.5"
"env.profile","closure","function","TRUE","FALSE","(env) ","base","base","4.0.5"
"environment","closure","function","TRUE","FALSE","(fun = NULL) ","base","base","4.0.5"
"environment<-","builtin","function","TRUE","NA","(fun, value) ","base","base","4.0.5"
"environmentIsLocked","closure","function","TRUE","FALSE","(env) ","base","base","4.0.5"
"environmentName","closure","function","TRUE","FALSE","(env) ","base","base","4.0.5"
"errorCondition","closure","function","TRUE","FALSE","(message, ..., class = NULL, call = NULL) ","base","base","4.0.5"
"eval","closure","function","TRUE","FALSE","(expr, envir = parent.frame(), enclos = if (is.list(envir) ||     is.pairlist(envir)) parent.frame() else baseenv()) ","base","base","4.0.5"
"eval.parent","closure","function","TRUE","FALSE","(expr, n = 1) ","base","base","4.0.5"
"evalq","closure","function","TRUE","FALSE","(expr, envir = parent.frame(), enclos = if (is.list(envir) ||     is.pairlist(envir)) parent.frame() else baseenv()) ","base","base","4.0.5"
"exists","closure","function","TRUE","FALSE","(x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame),     frame, mode = ""any"", inherits = TRUE) ","base","base","4.0.5"
"exp","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"expand.grid","closure","function","TRUE","FALSE","(..., KEEP.OUT.ATTRS = TRUE, stringsAsFactors = TRUE) ","base","base","4.0.5"
"expm1","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"expression","special","function","TRUE","NA","(...) ","base","base","4.0.5"
"extSoftVersion","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"factor","closure","function","TRUE","FALSE","(x = character(), levels, labels = levels, exclude = NA,     ordered = is.ordered(x), nmax = NA) ","base","base","4.0.5"
"factorial","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"fifo","closure","function","TRUE","FALSE","(description, open = """", blocking = FALSE, encoding = getOption(""encoding"")) ","base","base","4.0.5"
"file","closure","function","TRUE","FALSE","(description = """", open = """", blocking = TRUE, encoding = getOption(""encoding""),     raw = FALSE, method = getOption(""url.method"", ""default"")) ","base","base","4.0.5"
"file.access","closure","function","TRUE","FALSE","(names, mode = 0) ","base","base","4.0.5"
"file.append","closure","function","TRUE","FALSE","(file1, file2) ","base","base","4.0.5"
"file.choose","closure","function","TRUE","FALSE","(new = FALSE) ","base","base","4.0.5"
"file.copy","closure","function","TRUE","FALSE","(from, to, overwrite = recursive, recursive = FALSE,     copy.mode = TRUE, copy.date = FALSE) ","base","base","4.0.5"
"file.create","closure","function","TRUE","FALSE","(..., showWarnings = TRUE) ","base","base","4.0.5"
"file.exists","closure","function","TRUE","FALSE","(...) ","base","base","4.0.5"
"file.info","closure","function","TRUE","FALSE","(..., extra_cols = TRUE) ","base","base","4.0.5"
"file.link","closure","function","TRUE","FALSE","(from, to) ","base","base","4.0.5"
"file.mode","closure","function","TRUE","FALSE","(...) ","base","base","4.0.5"
"file.mtime","closure","function","TRUE","FALSE","(...) ","base","base","4.0.5"
"file.path","closure","function","TRUE","FALSE","(..., fsep = .Platform$file.sep) ","base","base","4.0.5"
"file.remove","closure","function","TRUE","FALSE","(...) ","base","base","4.0.5"
"file.rename","closure","function","TRUE","FALSE","(from, to) ","base","base","4.0.5"
"file.show","closure","function","TRUE","FALSE","(..., header = rep("""", nfiles), title = ""R Information"",     delete.file = FALSE, pager = getOption(""pager""), encoding = """") ","base","base","4.0.5"
"file.size","closure","function","TRUE","FALSE","(...) ","base","base","4.0.5"
"file.symlink","closure","function","TRUE","FALSE","(from, to) ","base","base","4.0.5"
"find.package","closure","function","TRUE","FALSE","(package = NULL, lib.loc = NULL, quiet = FALSE, verbose = getOption(""verbose"")) ","base","base","4.0.5"
"findInterval","closure","function","TRUE","FALSE","(x, vec, rightmost.closed = FALSE, all.inside = FALSE,     left.open = FALSE) ","base","base","4.0.5"
"findPackageEnv","closure","function","TRUE","FALSE","(info) ","base","base","4.0.5"
"findRestart","closure","function","TRUE","FALSE","(name, cond = NULL) ","base","base","4.0.5"
"floor","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"flush","closure","function","TRUE","FALSE","(con) ","base","base","4.0.5"
"flush.connection","closure","function","TRUE","FALSE","(con) ","base","base","4.0.5"
"for","special","function","TRUE","NA","","base","base","4.0.5"
"force","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"forceAndCall","special","function","TRUE","NA","(n, FUN, ...) ","base","base","4.0.5"
"formals","closure","function","TRUE","FALSE","(fun = sys.function(sys.parent()), envir = parent.frame()) ","base","base","4.0.5"
"formals<-","closure","function","TRUE","FALSE","(fun, envir = environment(fun), value) ","base","base","4.0.5"
"format","closure","function","TRUE","TRUE","(x, ...) ","base","base","4.0.5"
"format.AsIs","closure","function","TRUE","FALSE","(x, width = 12, ...) ","base","base","4.0.5"
"format.Date","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"format.POSIXct","closure","function","TRUE","FALSE","(x, format = """", tz = """", usetz = FALSE, ...) ","base","base","4.0.5"
"format.POSIXlt","closure","function","TRUE","FALSE","(x, format = """", usetz = FALSE, ...) ","base","base","4.0.5"
"format.data.frame","closure","function","TRUE","FALSE","(x, ..., justify = ""none"") ","base","base","4.0.5"
"format.default","closure","function","TRUE","FALSE","(x, trim = FALSE, digits = NULL, nsmall = 0L, justify = c(""left"",     ""right"", ""centre"", ""none""), width = NULL, na.encode = TRUE,     scientific = NA, big.mark = """", big.interval = 3L, small.mark = """",     small.interval = 5L, decimal.mark = getOption(""OutDec""),     zero.print = NULL, drop0trailing = FALSE, ...) ","base","base","4.0.5"
"format.difftime","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"format.factor","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"format.hexmode","closure","function","TRUE","FALSE","(x, width = NULL, upper.case = FALSE, ...) ","base","base","4.0.5"
"format.info","closure","function","TRUE","FALSE","(x, digits = NULL, nsmall = 0L) ","base","base","4.0.5"
"format.libraryIQR","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"format.numeric_version","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"format.octmode","closure","function","TRUE","FALSE","(x, width = NULL, ...) ","base","base","4.0.5"
"format.packageInfo","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"format.pval","closure","function","TRUE","FALSE","(pv, digits = max(1L, getOption(""digits"") - 2L), eps = .Machine$double.eps,     na.form = ""NA"", ...) ","base","base","4.0.5"
"format.summaryDefault","closure","function","TRUE","FALSE","(x, digits = max(3L, getOption(""digits"") - 3L), ...) ","base","base","4.0.5"
"formatC","closure","function","TRUE","FALSE","(x, digits = NULL, width = NULL, format = NULL, flag = """",     mode = NULL, big.mark = """", big.interval = 3L, small.mark = """",     small.interval = 5L, decimal.mark = getOption(""OutDec""),     preserve.width = ""individual"", zero.print = NULL, replace.zero = TRUE,     drop0trailing = FALSE) ","base","base","4.0.5"
"formatDL","closure","function","TRUE","FALSE","(x, y, style = c(""table"", ""list""), width = 0.9 * getOption(""width""),     indent = NULL) ","base","base","4.0.5"
"forwardsolve","closure","function","TRUE","FALSE","(l, x, k = ncol(l), upper.tri = FALSE, transpose = FALSE) ","base","base","4.0.5"
"function","special","function","TRUE","NA","","base","base","4.0.5"
"gamma","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"gc","closure","function","TRUE","FALSE","(verbose = getOption(""verbose""), reset = FALSE, full = TRUE) ","base","base","4.0.5"
"gc.time","builtin","function","TRUE","NA","(on = TRUE) ","base","base","4.0.5"
"gcinfo","closure","function","TRUE","FALSE","(verbose) ","base","base","4.0.5"
"gctorture","closure","function","TRUE","FALSE","(on = TRUE) ","base","base","4.0.5"
"gctorture2","closure","function","TRUE","FALSE","(step, wait = step, inhibit_release = FALSE) ","base","base","4.0.5"
"get","closure","function","TRUE","FALSE","(x, pos = -1L, envir = as.environment(pos), mode = ""any"",     inherits = TRUE) ","base","base","4.0.5"
"get0","closure","function","TRUE","FALSE","(x, envir = pos.to.env(-1L), mode = ""any"", inherits = TRUE,     ifnotfound = NULL) ","base","base","4.0.5"
"getAllConnections","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"getCallingDLL","closure","function","TRUE","FALSE","(f = sys.function(-1), doStop = FALSE) ","base","base","4.0.5"
"getCallingDLLe","closure","function","TRUE","FALSE","(e) ","base","base","4.0.5"
"getConnection","closure","function","TRUE","FALSE","(what) ","base","base","4.0.5"
"getDLLRegisteredRoutines","closure","function","TRUE","FALSE","(dll, addNames = TRUE) ","base","base","4.0.5"
"getDLLRegisteredRoutines.DLLInfo","closure","function","TRUE","FALSE","(dll, addNames = TRUE) ","base","base","4.0.5"
"getDLLRegisteredRoutines.character","closure","function","TRUE","FALSE","(dll, addNames = TRUE) ","base","base","4.0.5"
"getElement","closure","function","TRUE","FALSE","(object, name) ","base","base","4.0.5"
"getExportedValue","closure","function","TRUE","FALSE","(ns, name) ","base","base","4.0.5"
"getHook","closure","function","TRUE","FALSE","(hookName) ","base","base","4.0.5"
"getLoadedDLLs","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"getNamespace","closure","function","TRUE","FALSE","(name) ","base","base","4.0.5"
"getNamespaceExports","closure","function","TRUE","FALSE","(ns) ","base","base","4.0.5"
"getNamespaceImports","closure","function","TRUE","FALSE","(ns) ","base","base","4.0.5"
"getNamespaceInfo","closure","function","TRUE","FALSE","(ns, which) ","base","base","4.0.5"
"getNamespaceName","closure","function","TRUE","FALSE","(ns) ","base","base","4.0.5"
"getNamespaceUsers","closure","function","TRUE","FALSE","(ns) ","base","base","4.0.5"
"getNamespaceVersion","closure","function","TRUE","FALSE","(ns) ","base","base","4.0.5"
"getNativeSymbolInfo","closure","function","TRUE","FALSE","(name, PACKAGE, unlist = TRUE, withRegistrationInfo = FALSE) ","base","base","4.0.5"
"getOption","closure","function","TRUE","FALSE","(x, default = NULL) ","base","base","4.0.5"
"getRversion","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"getSrcLines","closure","function","TRUE","FALSE","(srcfile, first, last) ","base","base","4.0.5"
"getTaskCallbackNames","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"geterrmessage","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"gettext","closure","function","TRUE","FALSE","(..., domain = NULL) ","base","base","4.0.5"
"gettextf","closure","function","TRUE","FALSE","(fmt, ..., domain = NULL) ","base","base","4.0.5"
"getwd","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"gl","closure","function","TRUE","FALSE","(n, k, length = n * k, labels = seq_len(n), ordered = FALSE) ","base","base","4.0.5"
"globalCallingHandlers","closure","function","TRUE","FALSE","(...) ","base","base","4.0.5"
"globalenv","builtin","function","TRUE","NA","() ","base","base","4.0.5"
"gregexpr","closure","function","TRUE","FALSE","(pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE,     useBytes = FALSE) ","base","base","4.0.5"
"grep","closure","function","TRUE","FALSE","(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,     fixed = FALSE, useBytes = FALSE, invert = FALSE) ","base","base","4.0.5"
"grepRaw","closure","function","TRUE","FALSE","(pattern, x, offset = 1L, ignore.case = FALSE, value = FALSE,     fixed = FALSE, all = FALSE, invert = FALSE) ","base","base","4.0.5"
"grepl","closure","function","TRUE","FALSE","(pattern, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE,     useBytes = FALSE) ","base","base","4.0.5"
"grouping","closure","function","TRUE","FALSE","(...) ","base","base","4.0.5"
"gsub","closure","function","TRUE","FALSE","(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,     fixed = FALSE, useBytes = FALSE) ","base","base","4.0.5"
"gzcon","closure","function","TRUE","FALSE","(con, level = 6, allowNonCompressed = TRUE, text = FALSE) ","base","base","4.0.5"
"gzfile","closure","function","TRUE","FALSE","(description, open = """", encoding = getOption(""encoding""),     compression = 6) ","base","base","4.0.5"
"iconv","closure","function","TRUE","FALSE","(x, from = """", to = """", sub = NA, mark = TRUE, toRaw = FALSE) ","base","base","4.0.5"
"iconvlist","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"icuGetCollate","closure","function","TRUE","FALSE","(type = c(""actual"", ""valid"")) ","base","base","4.0.5"
"icuSetCollate","closure","function","TRUE","FALSE","(...) ","base","base","4.0.5"
"identical","closure","function","TRUE","FALSE","(x, y, num.eq = TRUE, single.NA = TRUE, attrib.as.set = TRUE,     ignore.bytecode = TRUE, ignore.environment = FALSE, ignore.srcref = TRUE) ","base","base","4.0.5"
"identity","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"if","special","function","TRUE","NA","","base","base","4.0.5"
"ifelse","closure","function","TRUE","FALSE","(test, yes, no) ","base","base","4.0.5"
"importIntoEnv","closure","function","TRUE","FALSE","(impenv, impnames, expenv, expnames) ","base","base","4.0.5"
"infoRDS","closure","function","TRUE","FALSE","(file) ","base","base","4.0.5"
"inherits","closure","function","TRUE","FALSE","(x, what, which = FALSE) ","base","base","4.0.5"
"intToBits","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"intToUtf8","closure","function","TRUE","FALSE","(x, multiple = FALSE, allow_surrogate_pairs = FALSE) ","base","base","4.0.5"
"integer","closure","function","TRUE","FALSE","(length = 0L) ","base","base","4.0.5"
"interaction","closure","function","TRUE","FALSE","(..., drop = FALSE, sep = ""."", lex.order = FALSE) ","base","base","4.0.5"
"interactive","builtin","function","TRUE","NA","() ","base","base","4.0.5"
"intersect","closure","function","TRUE","FALSE","(x, y) ","base","base","4.0.5"
"inverse.rle","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"invisible","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"invokeRestart","closure","function","TRUE","FALSE","(r, ...) ","base","base","4.0.5"
"invokeRestartInteractively","closure","function","TRUE","FALSE","(r) ","base","base","4.0.5"
"is.R","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"is.array","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.atomic","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.call","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.character","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.complex","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.data.frame","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"is.double","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.element","closure","function","TRUE","FALSE","(el, set) ","base","base","4.0.5"
"is.environment","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.expression","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.factor","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"is.finite","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.function","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.infinite","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.integer","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.language","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.list","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.loaded","closure","function","TRUE","FALSE","(symbol, PACKAGE = """", type = """") ","base","base","4.0.5"
"is.logical","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.matrix","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.na","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.na.POSIXlt","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"is.na.data.frame","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"is.na.numeric_version","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"is.na<-","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"is.na<-.default","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"is.na<-.factor","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"is.na<-.numeric_version","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"is.name","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.nan","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.null","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.numeric","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.numeric.Date","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"is.numeric.POSIXt","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"is.numeric.difftime","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"is.numeric_version","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"is.object","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.ordered","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"is.package_version","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"is.pairlist","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.primitive","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"is.qr","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"is.raw","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.recursive","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.single","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.symbol","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"is.table","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"is.unsorted","closure","function","TRUE","FALSE","(x, na.rm = FALSE, strictly = FALSE) ","base","base","4.0.5"
"is.vector","closure","function","TRUE","FALSE","(x, mode = ""any"") ","base","base","4.0.5"
"isBaseNamespace","closure","function","TRUE","FALSE","(ns) ","base","base","4.0.5"
"isFALSE","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"isIncomplete","closure","function","TRUE","FALSE","(con) ","base","base","4.0.5"
"isNamespace","closure","function","TRUE","FALSE","(ns) ","base","base","4.0.5"
"isNamespaceLoaded","closure","function","TRUE","FALSE","(name) ","base","base","4.0.5"
"isOpen","closure","function","TRUE","FALSE","(con, rw = """") ","base","base","4.0.5"
"isRestart","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"isS4","builtin","function","TRUE","NA","(object) ","base","base","4.0.5"
"isSeekable","closure","function","TRUE","FALSE","(con) ","base","base","4.0.5"
"isSymmetric","closure","function","TRUE","TRUE","(object, ...) ","base","base","4.0.5"
"isSymmetric.matrix","closure","function","TRUE","FALSE","(object, tol = 100 * .Machine$double.eps, tol1 = 8 *     tol, ...) ","base","base","4.0.5"
"isTRUE","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"isatty","closure","function","TRUE","FALSE","(con) ","base","base","4.0.5"
"isdebugged","closure","function","TRUE","FALSE","(fun, signature = NULL) ","base","base","4.0.5"
"jitter","closure","function","TRUE","FALSE","(x, factor = 1, amount = NULL) ","base","base","4.0.5"
"julian","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"julian.Date","closure","function","TRUE","FALSE","(x, origin = as.Date(""1970-01-01""), ...) ","base","base","4.0.5"
"julian.POSIXt","closure","function","TRUE","FALSE","(x, origin = as.POSIXct(""1970-01-01"", tz = ""GMT""), ...) ","base","base","4.0.5"
"kappa","closure","function","TRUE","FALSE","(z, ...) ","base","base","4.0.5"
"kappa.default","closure","function","TRUE","FALSE","(z, exact = FALSE, norm = NULL, method = c(""qr"", ""direct""),     ...) ","base","base","4.0.5"
"kappa.lm","closure","function","TRUE","FALSE","(z, ...) ","base","base","4.0.5"
"kappa.qr","closure","function","TRUE","FALSE","(z, ...) ","base","base","4.0.5"
"kronecker","closure","function","TRUE","TRUE","(X, Y, FUN = ""*"", make.dimnames = FALSE, ...) ","base","base","4.0.5"
"l10n_info","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"labels","closure","function","TRUE","FALSE","(object, ...) ","base","base","4.0.5"
"labels.default","closure","function","TRUE","FALSE","(object, ...) ","base","base","4.0.5"
"lapply","closure","function","TRUE","FALSE","(X, FUN, ...) ","base","base","4.0.5"
"lazyLoad","closure","function","TRUE","FALSE","(filebase, envir = parent.frame(), filter) ","base","base","4.0.5"
"lazyLoadDBexec","closure","function","TRUE","FALSE","(filebase, fun, filter) ","base","base","4.0.5"
"lazyLoadDBfetch","builtin","function","TRUE","NA","(key, file, compressed, hook) ","base","base","4.0.5"
"lbeta","closure","function","TRUE","FALSE","(a, b) ","base","base","4.0.5"
"lchoose","closure","function","TRUE","FALSE","(n, k) ","base","base","4.0.5"
"length","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"length.POSIXlt","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"length<-","builtin","function","TRUE","NA","(x, value) ","base","base","4.0.5"
"length<-.Date","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"length<-.POSIXct","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"length<-.POSIXlt","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"length<-.difftime","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"length<-.factor","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"lengths","closure","function","TRUE","FALSE","(x, use.names = TRUE) ","base","base","4.0.5"
"letters","character","character","TRUE","FALSE","NA","base","base","4.0.5"
"levels","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"levels.default","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"levels<-","builtin","function","TRUE","NA","(x, value) ","base","base","4.0.5"
"levels<-.factor","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"lfactorial","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"lgamma","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"libcurlVersion","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"library","closure","function","TRUE","FALSE","(package, help, pos = 2, lib.loc = NULL, character.only = FALSE,     logical.return = FALSE, warn.conflicts, quietly = FALSE,     verbose = getOption(""verbose""), mask.ok, exclude, include.only,     attach.required = missing(include.only)) ","base","base","4.0.5"
"library.dynam","closure","function","TRUE","FALSE","(chname, package, lib.loc, verbose = getOption(""verbose""),     file.ext = .Platform$dynlib.ext, ...) ","base","base","4.0.5"
"library.dynam.unload","closure","function","TRUE","FALSE","(chname, libpath, verbose = getOption(""verbose""), file.ext = .Platform$dynlib.ext) ","base","base","4.0.5"
"licence","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"license","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"list","builtin","function","TRUE","NA","(...) ","base","base","4.0.5"
"list.dirs","closure","function","TRUE","FALSE","(path = ""."", full.names = TRUE, recursive = TRUE) ","base","base","4.0.5"
"list.files","closure","function","TRUE","FALSE","(path = ""."", pattern = NULL, all.files = FALSE, full.names = FALSE,     recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE,     no.. = FALSE) ","base","base","4.0.5"
"list2DF","closure","function","TRUE","FALSE","(x = list(), nrow = NULL) ","base","base","4.0.5"
"list2env","closure","function","TRUE","FALSE","(x, envir = NULL, parent = parent.frame(), hash = (length(x) >     100), size = max(29L, length(x))) ","base","base","4.0.5"
"load","closure","function","TRUE","FALSE","(file, envir = parent.frame(), verbose = FALSE) ","base","base","4.0.5"
"loadNamespace","closure","function","TRUE","FALSE","(package, lib.loc = NULL, keep.source = getOption(""keep.source.pkgs""),     partial = FALSE, versionCheck = NULL, keep.parse.data = getOption(""keep.parse.data.pkgs"")) ","base","base","4.0.5"
"loadedNamespaces","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"loadingNamespaceInfo","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"local","closure","function","TRUE","FALSE","(expr, envir = new.env()) ","base","base","4.0.5"
"lockBinding","closure","function","TRUE","FALSE","(sym, env) ","base","base","4.0.5"
"lockEnvironment","closure","function","TRUE","FALSE","(env, bindings = FALSE) ","base","base","4.0.5"
"log","special","function","TRUE","NA","(x, base = exp(1)) ","base","base","4.0.5"
"log10","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"log1p","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"log2","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"logb","closure","function","TRUE","FALSE","(x, base = exp(1)) ","base","base","4.0.5"
"logical","closure","function","TRUE","FALSE","(length = 0L) ","base","base","4.0.5"
"lower.tri","closure","function","TRUE","FALSE","(x, diag = FALSE) ","base","base","4.0.5"
"ls","closure","function","TRUE","FALSE","(name, pos = -1L, envir = as.environment(pos), all.names = FALSE,     pattern, sorted = TRUE) ","base","base","4.0.5"
"make.names","closure","function","TRUE","FALSE","(names, unique = FALSE, allow_ = TRUE) ","base","base","4.0.5"
"make.unique","closure","function","TRUE","FALSE","(names, sep = ""."") ","base","base","4.0.5"
"makeActiveBinding","closure","function","TRUE","FALSE","(sym, fun, env) ","base","base","4.0.5"
"mapply","closure","function","TRUE","FALSE","(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE) ","base","base","4.0.5"
"margin.table","closure","function","TRUE","FALSE","(x, margin = NULL) ","base","base","4.0.5"
"marginSums","closure","function","TRUE","FALSE","(x, margin = NULL) ","base","base","4.0.5"
"mat.or.vec","closure","function","TRUE","FALSE","(nr, nc) ","base","base","4.0.5"
"match","closure","function","TRUE","FALSE","(x, table, nomatch = NA_integer_, incomparables = NULL) ","base","base","4.0.5"
"match.arg","closure","function","TRUE","FALSE","(arg, choices, several.ok = FALSE) ","base","base","4.0.5"
"match.call","closure","function","TRUE","FALSE","(definition = sys.function(sys.parent()), call = sys.call(sys.parent()),     expand.dots = TRUE, envir = parent.frame(2L)) ","base","base","4.0.5"
"match.fun","closure","function","TRUE","FALSE","(FUN, descend = TRUE) ","base","base","4.0.5"
"matrix","closure","function","TRUE","FALSE","(data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL) ","base","base","4.0.5"
"max","builtin","function","TRUE","NA","(..., na.rm = FALSE) ","base","base","4.0.5"
"max.col","closure","function","TRUE","FALSE","(m, ties.method = c(""random"", ""first"", ""last"")) ","base","base","4.0.5"
"mean","closure","function","TRUE","TRUE","(x, ...) ","base","base","4.0.5"
"mean.Date","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"mean.POSIXct","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"mean.POSIXlt","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"mean.default","closure","function","TRUE","FALSE","(x, trim = 0, na.rm = FALSE, ...) ","base","base","4.0.5"
"mean.difftime","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"mem.maxNSize","closure","function","TRUE","FALSE","(nsize = 0) ","base","base","4.0.5"
"mem.maxVSize","closure","function","TRUE","FALSE","(vsize = 0) ","base","base","4.0.5"
"memCompress","closure","function","TRUE","FALSE","(from, type = c(""gzip"", ""bzip2"", ""xz"", ""none"")) ","base","base","4.0.5"
"memDecompress","closure","function","TRUE","FALSE","(from, type = c(""unknown"", ""gzip"", ""bzip2"", ""xz"", ""none""),     asChar = FALSE) ","base","base","4.0.5"
"memory.profile","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"merge","closure","function","TRUE","FALSE","(x, y, ...) ","base","base","4.0.5"
"merge.data.frame","closure","function","TRUE","FALSE","(x, y, by = intersect(names(x), names(y)), by.x = by,     by.y = by, all = FALSE, all.x = all, all.y = all, sort = TRUE,     suffixes = c("".x"", "".y""), no.dups = TRUE, incomparables = NULL,     ...) ","base","base","4.0.5"
"merge.default","closure","function","TRUE","FALSE","(x, y, ...) ","base","base","4.0.5"
"message","closure","function","TRUE","FALSE","(..., domain = NULL, appendLF = TRUE) ","base","base","4.0.5"
"mget","closure","function","TRUE","FALSE","(x, envir = as.environment(-1L), mode = ""any"", ifnotfound,     inherits = FALSE) ","base","base","4.0.5"
"min","builtin","function","TRUE","NA","(..., na.rm = FALSE) ","base","base","4.0.5"
"missing","special","function","TRUE","NA","(x) ","base","base","4.0.5"
"mode","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"mode<-","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"month.abb","character","character","TRUE","FALSE","NA","base","base","4.0.5"
"month.name","character","character","TRUE","FALSE","NA","base","base","4.0.5"
"months","closure","function","TRUE","FALSE","(x, abbreviate) ","base","base","4.0.5"
"months.Date","closure","function","TRUE","FALSE","(x, abbreviate = FALSE) ","base","base","4.0.5"
"months.POSIXt","closure","function","TRUE","FALSE","(x, abbreviate = FALSE) ","base","base","4.0.5"
"mostattributes<-","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"names","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"names.POSIXlt","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"names<-","builtin","function","TRUE","NA","(x, value) ","base","base","4.0.5"
"names<-.POSIXlt","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"namespaceExport","closure","function","TRUE","FALSE","(ns, vars) ","base","base","4.0.5"
"namespaceImport","closure","function","TRUE","FALSE","(self, ..., from = NULL, except = character(0L)) ","base","base","4.0.5"
"namespaceImportClasses","closure","function","TRUE","FALSE","(self, ns, vars, from = NULL) ","base","base","4.0.5"
"namespaceImportFrom","closure","function","TRUE","FALSE","(self, ns, vars, generics, packages, from = ""non-package environment"",     except = character(0L)) ","base","base","4.0.5"
"namespaceImportMethods","closure","function","TRUE","FALSE","(self, ns, vars, from = NULL) ","base","base","4.0.5"
"nargs","builtin","function","TRUE","NA","() ","base","base","4.0.5"
"nchar","closure","function","TRUE","FALSE","(x, type = ""chars"", allowNA = FALSE, keepNA = NA) ","base","base","4.0.5"
"ncol","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"new.env","closure","function","TRUE","FALSE","(hash = TRUE, parent = parent.frame(), size = 29L) ","base","base","4.0.5"
"next","special","function","TRUE","NA","","base","base","4.0.5"
"ngettext","closure","function","TRUE","FALSE","(n, msg1, msg2, domain = NULL) ","base","base","4.0.5"
"nlevels","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"noquote","closure","function","TRUE","FALSE","(obj, right = FALSE) ","base","base","4.0.5"
"norm","closure","function","TRUE","TRUE","(x, type = c(""O"", ""I"", ""F"", ""M"", ""2"")) ","base","base","4.0.5"
"normalizePath","closure","function","TRUE","FALSE","(path, winslash = ""\\"", mustWork = NA) ","base","base","4.0.5"
"nrow","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"nullfile","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"numeric","closure","function","TRUE","FALSE","(length = 0L) ","base","base","4.0.5"
"numeric_version","closure","function","TRUE","FALSE","(x, strict = TRUE) ","base","base","4.0.5"
"nzchar","builtin","function","TRUE","NA","(x, keepNA = FALSE) ","base","base","4.0.5"
"objects","closure","function","TRUE","FALSE","(name, pos = -1L, envir = as.environment(pos), all.names = FALSE,     pattern, sorted = TRUE) ","base","base","4.0.5"
"oldClass","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"oldClass<-","builtin","function","TRUE","NA","(x, value) ","base","base","4.0.5"
"on.exit","special","function","TRUE","NA","(expr = NULL, add = FALSE, after = TRUE) ","base","base","4.0.5"
"open","closure","function","TRUE","FALSE","(con, ...) ","base","base","4.0.5"
"open.connection","closure","function","TRUE","FALSE","(con, open = ""r"", blocking = TRUE, ...) ","base","base","4.0.5"
"open.srcfile","closure","function","TRUE","FALSE","(con, line, ...) ","base","base","4.0.5"
"open.srcfilealias","closure","function","TRUE","FALSE","(con, line, ...) ","base","base","4.0.5"
"open.srcfilecopy","closure","function","TRUE","FALSE","(con, line, ...) ","base","base","4.0.5"
"options","closure","function","TRUE","FALSE","(...) ","base","base","4.0.5"
"order","closure","function","TRUE","FALSE","(..., na.last = TRUE, decreasing = FALSE, method = c(""auto"",     ""shell"", ""radix"")) ","base","base","4.0.5"
"ordered","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"outer","closure","function","TRUE","FALSE","(X, Y, FUN = ""*"", ...) ","base","base","4.0.5"
"packBits","closure","function","TRUE","FALSE","(x, type = c(""raw"", ""integer"")) ","base","base","4.0.5"
"packageEvent","closure","function","TRUE","FALSE","(pkgname, event = c(""onLoad"", ""attach"", ""detach"", ""onUnload"")) ","base","base","4.0.5"
"packageHasNamespace","closure","function","TRUE","FALSE","(package, package.lib) ","base","base","4.0.5"
"packageNotFoundError","closure","function","TRUE","FALSE","(package, lib.loc, call = NULL) ","base","base","4.0.5"
"packageStartupMessage","closure","function","TRUE","FALSE","(..., domain = NULL, appendLF = TRUE) ","base","base","4.0.5"
"package_version","closure","function","TRUE","FALSE","(x, strict = TRUE) ","base","base","4.0.5"
"pairlist","closure","function","TRUE","FALSE","(...) ","base","base","4.0.5"
"parent.env","closure","function","TRUE","FALSE","(env) ","base","base","4.0.5"
"parent.env<-","closure","function","TRUE","FALSE","(env, value) ","base","base","4.0.5"
"parent.frame","closure","function","TRUE","FALSE","(n = 1) ","base","base","4.0.5"
"parse","closure","function","TRUE","FALSE","(file = """", n = NULL, text = NULL, prompt = ""?"", keep.source = getOption(""keep.source""),     srcfile = NULL, encoding = ""unknown"") ","base","base","4.0.5"
"parseNamespaceFile","closure","function","TRUE","FALSE","(package, package.lib, mustExist = TRUE) ","base","base","4.0.5"
"paste","closure","function","TRUE","FALSE","(..., sep = "" "", collapse = NULL, recycle0 = FALSE) ","base","base","4.0.5"
"paste0","closure","function","TRUE","FALSE","(..., collapse = NULL, recycle0 = FALSE) ","base","base","4.0.5"
"path.expand","closure","function","TRUE","FALSE","(path) ","base","base","4.0.5"
"path.package","closure","function","TRUE","FALSE","(package = NULL, quiet = FALSE) ","base","base","4.0.5"
"pcre_config","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"pi","double","numeric","TRUE","FALSE","NA","base","base","4.0.5"
"pipe","closure","function","TRUE","FALSE","(description, open = """", encoding = getOption(""encoding"")) ","base","base","4.0.5"
"plot","closure","function","TRUE","FALSE","(x, y, ...) ","base","base","4.0.5"
"pmatch","closure","function","TRUE","FALSE","(x, table, nomatch = NA_integer_, duplicates.ok = FALSE) ","base","base","4.0.5"
"pmax","closure","function","TRUE","FALSE","(..., na.rm = FALSE) ","base","base","4.0.5"
"pmax.int","closure","function","TRUE","FALSE","(..., na.rm = FALSE) ","base","base","4.0.5"
"pmin","closure","function","TRUE","FALSE","(..., na.rm = FALSE) ","base","base","4.0.5"
"pmin.int","closure","function","TRUE","FALSE","(..., na.rm = FALSE) ","base","base","4.0.5"
"polyroot","closure","function","TRUE","FALSE","(z) ","base","base","4.0.5"
"pos.to.env","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"pretty","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"pretty.default","closure","function","TRUE","FALSE","(x, n = 5L, min.n = n%/%3L, shrink.sml = 0.75, high.u.bias = 1.5,     u5.bias = 0.5 + 1.5 * high.u.bias, eps.correct = 0L, ...) ","base","base","4.0.5"
"prettyNum","closure","function","TRUE","FALSE","(x, big.mark = """", big.interval = 3L, small.mark = """",     small.interval = 5L, decimal.mark = getOption(""OutDec""),     input.d.mark = decimal.mark, preserve.width = c(""common"",         ""individual"", ""none""), zero.print = NULL, replace.zero = FALSE,     drop0trailing = FALSE, is.cmplx = NA, ...) ","base","base","4.0.5"
"print","closure","function","TRUE","TRUE","(x, ...) ","base","base","4.0.5"
"print.AsIs","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.DLLInfo","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.DLLInfoList","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.DLLRegisteredRoutines","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.Date","closure","function","TRUE","FALSE","(x, max = NULL, ...) ","base","base","4.0.5"
"print.Dlist","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.NativeRoutineList","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.POSIXct","closure","function","TRUE","FALSE","(x, tz = """", usetz = TRUE, max = NULL, ...) ","base","base","4.0.5"
"print.POSIXlt","closure","function","TRUE","FALSE","(x, tz = """", usetz = TRUE, max = NULL, ...) ","base","base","4.0.5"
"print.by","closure","function","TRUE","FALSE","(x, ..., vsep) ","base","base","4.0.5"
"print.condition","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.connection","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.data.frame","closure","function","TRUE","FALSE","(x, ..., digits = NULL, quote = FALSE, right = TRUE,     row.names = TRUE, max = NULL) ","base","base","4.0.5"
"print.default","closure","function","TRUE","FALSE","(x, digits = NULL, quote = TRUE, na.print = NULL, print.gap = NULL,     right = FALSE, max = NULL, width = NULL, useSource = TRUE,     ...) ","base","base","4.0.5"
"print.difftime","closure","function","TRUE","FALSE","(x, digits = getOption(""digits""), ...) ","base","base","4.0.5"
"print.eigen","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.factor","closure","function","TRUE","FALSE","(x, quote = FALSE, max.levels = NULL, width = getOption(""width""),     ...) ","base","base","4.0.5"
"print.function","closure","function","TRUE","FALSE","(x, useSource = TRUE, ...) ","base","base","4.0.5"
"print.hexmode","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.libraryIQR","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.listof","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.noquote","closure","function","TRUE","FALSE","(x, quote = FALSE, right = FALSE, ...) ","base","base","4.0.5"
"print.numeric_version","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.octmode","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.packageInfo","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.proc_time","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.restart","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.rle","closure","function","TRUE","FALSE","(x, digits = getOption(""digits""), prefix = """", ...) ","base","base","4.0.5"
"print.simple.list","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.srcfile","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.srcref","closure","function","TRUE","FALSE","(x, useSource = TRUE, ...) ","base","base","4.0.5"
"print.summary.table","closure","function","TRUE","FALSE","(x, digits = max(1L, getOption(""digits"") - 3L), ...) ","base","base","4.0.5"
"print.summary.warnings","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"print.summaryDefault","closure","function","TRUE","FALSE","(x, digits = max(3L, getOption(""digits"") - 3L), ...) ","base","base","4.0.5"
"print.table","closure","function","TRUE","FALSE","(x, digits = getOption(""digits""), quote = FALSE, na.print = """",     zero.print = ""0"", right = is.numeric(x) || is.complex(x),     justify = ""none"", ...) ","base","base","4.0.5"
"print.warnings","closure","function","TRUE","FALSE","(x, tags, header = ngettext(n, ""Warning message:\n"",     ""Warning messages:\n""), ...) ","base","base","4.0.5"
"prmatrix","closure","function","TRUE","FALSE","(x, rowlab = dn[[1]], collab = dn[[2]], quote = TRUE,     right = FALSE, na.print = NULL, ...) ","base","base","4.0.5"
"proc.time","builtin","function","TRUE","NA","() ","base","base","4.0.5"
"prod","builtin","function","TRUE","NA","(..., na.rm = FALSE) ","base","base","4.0.5"
"prop.table","closure","function","TRUE","FALSE","(x, margin = NULL) ","base","base","4.0.5"
"proportions","closure","function","TRUE","FALSE","(x, margin = NULL) ","base","base","4.0.5"
"provideDimnames","closure","function","TRUE","FALSE","(x, sep = """", base = list(LETTERS), unique = TRUE) ","base","base","4.0.5"
"psigamma","closure","function","TRUE","FALSE","(x, deriv = 0L) ","base","base","4.0.5"
"pushBack","closure","function","TRUE","FALSE","(data, connection, newLine = TRUE, encoding = c("""",     ""bytes"", ""UTF-8"")) ","base","base","4.0.5"
"pushBackLength","closure","function","TRUE","FALSE","(connection) ","base","base","4.0.5"
"q","closure","function","TRUE","FALSE","(save = ""default"", status = 0, runLast = TRUE) ","base","base","4.0.5"
"qr","closure","function","TRUE","TRUE","(x, ...) ","base","base","4.0.5"
"qr.Q","closure","function","TRUE","TRUE","(qr, complete = FALSE, Dvec) ","base","base","4.0.5"
"qr.R","closure","function","TRUE","TRUE","(qr, complete = FALSE) ","base","base","4.0.5"
"qr.X","closure","function","TRUE","FALSE","(qr, complete = FALSE, ncol = if (complete) nrow(R) else min(dim(R))) ","base","base","4.0.5"
"qr.coef","closure","function","TRUE","TRUE","(qr, y) ","base","base","4.0.5"
"qr.default","closure","function","TRUE","FALSE","(x, tol = 1e-07, LAPACK = FALSE, ...) ","base","base","4.0.5"
"qr.fitted","closure","function","TRUE","TRUE","(qr, y, k = qr$rank) ","base","base","4.0.5"
"qr.qty","closure","function","TRUE","TRUE","(qr, y) ","base","base","4.0.5"
"qr.qy","closure","function","TRUE","TRUE","(qr, y) ","base","base","4.0.5"
"qr.resid","closure","function","TRUE","TRUE","(qr, y) ","base","base","4.0.5"
"qr.solve","closure","function","TRUE","FALSE","(a, b, tol = 1e-07) ","base","base","4.0.5"
"quarters","closure","function","TRUE","FALSE","(x, abbreviate) ","base","base","4.0.5"
"quarters.Date","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"quarters.POSIXt","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"quit","closure","function","TRUE","FALSE","(save = ""default"", status = 0, runLast = TRUE) ","base","base","4.0.5"
"quote","special","function","TRUE","NA","(expr) ","base","base","4.0.5"
"range","builtin","function","TRUE","NA","(..., na.rm = FALSE) ","base","base","4.0.5"
"range.default","closure","function","TRUE","FALSE","(..., na.rm = FALSE, finite = FALSE) ","base","base","4.0.5"
"rank","closure","function","TRUE","FALSE","(x, na.last = TRUE, ties.method = c(""average"", ""first"",     ""last"", ""random"", ""max"", ""min"")) ","base","base","4.0.5"
"rapply","closure","function","TRUE","FALSE","(object, f, classes = ""ANY"", deflt = NULL, how = c(""unlist"",     ""replace"", ""list""), ...) ","base","base","4.0.5"
"raw","closure","function","TRUE","FALSE","(length = 0L) ","base","base","4.0.5"
"rawConnection","closure","function","TRUE","FALSE","(object, open = ""r"") ","base","base","4.0.5"
"rawConnectionValue","closure","function","TRUE","FALSE","(con) ","base","base","4.0.5"
"rawShift","closure","function","TRUE","FALSE","(x, n) ","base","base","4.0.5"
"rawToBits","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"rawToChar","closure","function","TRUE","FALSE","(x, multiple = FALSE) ","base","base","4.0.5"
"rbind","closure","function","TRUE","FALSE","(..., deparse.level = 1) ","base","base","4.0.5"
"rbind.data.frame","closure","function","TRUE","FALSE","(..., deparse.level = 1, make.row.names = TRUE, stringsAsFactors = default.stringsAsFactors(),     factor.exclude = TRUE) ","base","base","4.0.5"
"rcond","closure","function","TRUE","TRUE","(x, norm = c(""O"", ""I"", ""1""), triangular = FALSE, ...) ","base","base","4.0.5"
"read.dcf","closure","function","TRUE","FALSE","(file, fields = NULL, all = FALSE, keep.white = NULL) ","base","base","4.0.5"
"readBin","closure","function","TRUE","FALSE","(con, what, n = 1L, size = NA_integer_, signed = TRUE,     endian = .Platform$endian) ","base","base","4.0.5"
"readChar","closure","function","TRUE","FALSE","(con, nchars, useBytes = FALSE) ","base","base","4.0.5"
"readLines","closure","function","TRUE","FALSE","(con = stdin(), n = -1L, ok = TRUE, warn = TRUE, encoding = ""unknown"",     skipNul = FALSE) ","base","base","4.0.5"
"readRDS","closure","function","TRUE","FALSE","(file, refhook = NULL) ","base","base","4.0.5"
"readRenviron","closure","function","TRUE","FALSE","(path) ","base","base","4.0.5"
"readline","closure","function","TRUE","FALSE","(prompt = """") ","base","base","4.0.5"
"reg.finalizer","closure","function","TRUE","FALSE","(e, f, onexit = FALSE) ","base","base","4.0.5"
"regexec","closure","function","TRUE","FALSE","(pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE,     useBytes = FALSE) ","base","base","4.0.5"
"regexpr","closure","function","TRUE","FALSE","(pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE,     useBytes = FALSE) ","base","base","4.0.5"
"registerS3method","closure","function","TRUE","FALSE","(genname, class, method, envir = parent.frame()) ","base","base","4.0.5"
"registerS3methods","closure","function","TRUE","FALSE","(info, package, env) ","base","base","4.0.5"
"regmatches","closure","function","TRUE","FALSE","(x, m, invert = FALSE) ","base","base","4.0.5"
"regmatches<-","closure","function","TRUE","FALSE","(x, m, invert = FALSE, value) ","base","base","4.0.5"
"remove","closure","function","TRUE","FALSE","(..., list = character(), pos = -1, envir = as.environment(pos),     inherits = FALSE) ","base","base","4.0.5"
"removeTaskCallback","closure","function","TRUE","FALSE","(id) ","base","base","4.0.5"
"rep","special","function","TRUE","NA","(x, ...) ","base","base","4.0.5"
"rep.Date","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"rep.POSIXct","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"rep.POSIXlt","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"rep.factor","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"rep.int","closure","function","TRUE","FALSE","(x, times) ","base","base","4.0.5"
"rep.numeric_version","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"rep_len","closure","function","TRUE","FALSE","(x, length.out) ","base","base","4.0.5"
"repeat","special","function","TRUE","NA","","base","base","4.0.5"
"replace","closure","function","TRUE","FALSE","(x, list, values) ","base","base","4.0.5"
"replicate","closure","function","TRUE","FALSE","(n, expr, simplify = ""array"") ","base","base","4.0.5"
"require","closure","function","TRUE","FALSE","(package, lib.loc = NULL, quietly = FALSE, warn.conflicts,     character.only = FALSE, mask.ok, exclude, include.only, attach.required = missing(include.only)) ","base","base","4.0.5"
"requireNamespace","closure","function","TRUE","FALSE","(package, ..., quietly = FALSE) ","base","base","4.0.5"
"restartDescription","closure","function","TRUE","FALSE","(r) ","base","base","4.0.5"
"restartFormals","closure","function","TRUE","FALSE","(r) ","base","base","4.0.5"
"retracemem","builtin","function","TRUE","NA","(x, previous = NULL) ","base","base","4.0.5"
"return","special","function","TRUE","NA","","base","base","4.0.5"
"returnValue","closure","function","TRUE","FALSE","(default = NULL) ","base","base","4.0.5"
"rev","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"rev.default","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"rle","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"rm","closure","function","TRUE","FALSE","(..., list = character(), pos = -1, envir = as.environment(pos),     inherits = FALSE) ","base","base","4.0.5"
"round","special","function","TRUE","NA","(x, digits = 0) ","base","base","4.0.5"
"round.Date","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"round.POSIXt","closure","function","TRUE","FALSE","(x, units = c(""secs"", ""mins"", ""hours"", ""days"", ""months"",     ""years"")) ","base","base","4.0.5"
"row","closure","function","TRUE","FALSE","(x, as.factor = FALSE) ","base","base","4.0.5"
"row.names","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"row.names.data.frame","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"row.names.default","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"row.names<-","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"row.names<-.data.frame","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"row.names<-.default","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"rowMeans","closure","function","TRUE","TRUE","(x, na.rm = FALSE, dims = 1L) ","base","base","4.0.5"
"rowSums","closure","function","TRUE","TRUE","(x, na.rm = FALSE, dims = 1L) ","base","base","4.0.5"
"rownames","closure","function","TRUE","FALSE","(x, do.NULL = TRUE, prefix = ""row"") ","base","base","4.0.5"
"rownames<-","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"rowsum","closure","function","TRUE","FALSE","(x, group, reorder = TRUE, ...) ","base","base","4.0.5"
"rowsum.data.frame","closure","function","TRUE","FALSE","(x, group, reorder = TRUE, na.rm = FALSE, ...) ","base","base","4.0.5"
"rowsum.default","closure","function","TRUE","FALSE","(x, group, reorder = TRUE, na.rm = FALSE, ...) ","base","base","4.0.5"
"sQuote","closure","function","TRUE","FALSE","(x, q = getOption(""useFancyQuotes"")) ","base","base","4.0.5"
"sample","closure","function","TRUE","FALSE","(x, size, replace = FALSE, prob = NULL) ","base","base","4.0.5"
"sample.int","closure","function","TRUE","FALSE","(n, size = n, replace = FALSE, prob = NULL, useHash = (!replace &&     is.null(prob) && size <= n/2 && n > 1e+07)) ","base","base","4.0.5"
"sapply","closure","function","TRUE","FALSE","(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE) ","base","base","4.0.5"
"save","closure","function","TRUE","FALSE","(..., list = character(), file = stop(""'file' must be specified""),     ascii = FALSE, version = NULL, envir = parent.frame(), compress = isTRUE(!ascii),     compression_level, eval.promises = TRUE, precheck = TRUE) ","base","base","4.0.5"
"save.image","closure","function","TRUE","FALSE","(file = "".RData"", version = NULL, ascii = FALSE, compress = !ascii,     safe = TRUE) ","base","base","4.0.5"
"saveRDS","closure","function","TRUE","FALSE","(object, file = """", ascii = FALSE, version = NULL, compress = TRUE,     refhook = NULL) ","base","base","4.0.5"
"scale","closure","function","TRUE","FALSE","(x, center = TRUE, scale = TRUE) ","base","base","4.0.5"
"scale.default","closure","function","TRUE","FALSE","(x, center = TRUE, scale = TRUE) ","base","base","4.0.5"
"scan","closure","function","TRUE","FALSE","(file = """", what = double(), nmax = -1L, n = -1L, sep = """",     quote = if (identical(sep, ""\n"")) """" else ""'\"""", dec = ""."",     skip = 0L, nlines = 0L, na.strings = ""NA"", flush = FALSE,     fill = FALSE, strip.white = FALSE, quiet = FALSE, blank.lines.skip = TRUE,     multi.line = TRUE, comment.char = """", allowEscapes = FALSE,     fileEncoding = """", encoding = ""unknown"", text, skipNul = FALSE) ","base","base","4.0.5"
"search","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"searchpaths","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"seek","closure","function","TRUE","FALSE","(con, ...) ","base","base","4.0.5"
"seek.connection","closure","function","TRUE","FALSE","(con, where = NA, origin = ""start"", rw = """", ...) ","base","base","4.0.5"
"seq","closure","function","TRUE","FALSE","(...) ","base","base","4.0.5"
"seq.Date","closure","function","TRUE","FALSE","(from, to, by, length.out = NULL, along.with = NULL,     ...) ","base","base","4.0.5"
"seq.POSIXt","closure","function","TRUE","FALSE","(from, to, by, length.out = NULL, along.with = NULL,     ...) ","base","base","4.0.5"
"seq.default","closure","function","TRUE","FALSE","(from = 1, to = 1, by = ((to - from)/(length.out - 1)),     length.out = NULL, along.with = NULL, ...) ","base","base","4.0.5"
"seq.int","builtin","function","TRUE","NA","(from, to, by, length.out, along.with, ...) ","base","base","4.0.5"
"seq_along","builtin","function","TRUE","NA","(along.with) ","base","base","4.0.5"
"seq_len","builtin","function","TRUE","NA","(length.out) ","base","base","4.0.5"
"sequence","closure","function","TRUE","FALSE","(nvec, ...) ","base","base","4.0.5"
"sequence.default","closure","function","TRUE","FALSE","(nvec, from = 1L, by = 1L, ...) ","base","base","4.0.5"
"serialize","closure","function","TRUE","FALSE","(object, connection, ascii = FALSE, xdr = TRUE, version = NULL,     refhook = NULL) ","base","base","4.0.5"
"serverSocket","closure","function","TRUE","FALSE","(port) ","base","base","4.0.5"
"set.seed","closure","function","TRUE","FALSE","(seed, kind = NULL, normal.kind = NULL, sample.kind = NULL) ","base","base","4.0.5"
"setHook","closure","function","TRUE","FALSE","(hookName, value, action = c(""append"", ""prepend"", ""replace"")) ","base","base","4.0.5"
"setNamespaceInfo","closure","function","TRUE","FALSE","(ns, which, val) ","base","base","4.0.5"
"setSessionTimeLimit","closure","function","TRUE","FALSE","(cpu = Inf, elapsed = Inf) ","base","base","4.0.5"
"setTimeLimit","closure","function","TRUE","FALSE","(cpu = Inf, elapsed = Inf, transient = FALSE) ","base","base","4.0.5"
"setdiff","closure","function","TRUE","FALSE","(x, y) ","base","base","4.0.5"
"setequal","closure","function","TRUE","FALSE","(x, y) ","base","base","4.0.5"
"setwd","closure","function","TRUE","FALSE","(dir) ","base","base","4.0.5"
"shQuote","closure","function","TRUE","FALSE","(string, type = c(""sh"", ""csh"", ""cmd"", ""cmd2"")) ","base","base","4.0.5"
"showConnections","closure","function","TRUE","FALSE","(all = FALSE) ","base","base","4.0.5"
"sign","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"signalCondition","closure","function","TRUE","FALSE","(cond) ","base","base","4.0.5"
"signif","special","function","TRUE","NA","(x, digits = 6) ","base","base","4.0.5"
"simpleCondition","closure","function","TRUE","FALSE","(message, call = NULL) ","base","base","4.0.5"
"simpleError","closure","function","TRUE","FALSE","(message, call = NULL) ","base","base","4.0.5"
"simpleMessage","closure","function","TRUE","FALSE","(message, call = NULL) ","base","base","4.0.5"
"simpleWarning","closure","function","TRUE","FALSE","(message, call = NULL) ","base","base","4.0.5"
"simplify2array","closure","function","TRUE","FALSE","(x, higher = TRUE) ","base","base","4.0.5"
"sin","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"single","closure","function","TRUE","FALSE","(length = 0L) ","base","base","4.0.5"
"sinh","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"sink","closure","function","TRUE","FALSE","(file = NULL, append = FALSE, type = c(""output"", ""message""),     split = FALSE) ","base","base","4.0.5"
"sink.number","closure","function","TRUE","FALSE","(type = c(""output"", ""message"")) ","base","base","4.0.5"
"sinpi","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"slice.index","closure","function","TRUE","FALSE","(x, MARGIN) ","base","base","4.0.5"
"socketAccept","closure","function","TRUE","FALSE","(socket, blocking = FALSE, open = ""a+"", encoding = getOption(""encoding""),     timeout = getOption(""timeout"")) ","base","base","4.0.5"
"socketConnection","closure","function","TRUE","FALSE","(host = ""localhost"", port, server = FALSE, blocking = FALSE,     open = ""a+"", encoding = getOption(""encoding""), timeout = getOption(""timeout"")) ","base","base","4.0.5"
"socketSelect","closure","function","TRUE","FALSE","(socklist, write = FALSE, timeout = NULL) ","base","base","4.0.5"
"socketTimeout","closure","function","TRUE","FALSE","(socket, timeout = -1) ","base","base","4.0.5"
"solve","closure","function","TRUE","TRUE","(a, b, ...) ","base","base","4.0.5"
"solve.default","closure","function","TRUE","FALSE","(a, b, tol = .Machine$double.eps, LINPACK = FALSE, ...) ","base","base","4.0.5"
"solve.qr","closure","function","TRUE","FALSE","(a, b, ...) ","base","base","4.0.5"
"sort","closure","function","TRUE","FALSE","(x, decreasing = FALSE, ...) ","base","base","4.0.5"
"sort.POSIXlt","closure","function","TRUE","FALSE","(x, decreasing = FALSE, na.last = NA, ...) ","base","base","4.0.5"
"sort.default","closure","function","TRUE","FALSE","(x, decreasing = FALSE, na.last = NA, ...) ","base","base","4.0.5"
"sort.int","closure","function","TRUE","FALSE","(x, partial = NULL, na.last = NA, decreasing = FALSE,     method = c(""auto"", ""shell"", ""quick"", ""radix""), index.return = FALSE) ","base","base","4.0.5"
"sort.list","closure","function","TRUE","FALSE","(x, partial = NULL, na.last = TRUE, decreasing = FALSE,     method = c(""auto"", ""shell"", ""quick"", ""radix"")) ","base","base","4.0.5"
"source","closure","function","TRUE","FALSE","(file, local = FALSE, echo = verbose, print.eval = echo,     exprs, spaced = use_file, verbose = getOption(""verbose""),     prompt.echo = getOption(""prompt""), max.deparse.length = 150,     width.cutoff = 60L, deparseCtrl = ""showAttributes"", chdir = FALSE,     encoding = getOption(""encoding""), continue.echo = getOption(""continue""),     skip.echo = 0, keep.source = getOption(""keep.source"")) ","base","base","4.0.5"
"split","closure","function","TRUE","FALSE","(x, f, drop = FALSE, ...) ","base","base","4.0.5"
"split.Date","closure","function","TRUE","FALSE","(x, f, drop = FALSE, ...) ","base","base","4.0.5"
"split.POSIXct","closure","function","TRUE","FALSE","(x, f, drop = FALSE, ...) ","base","base","4.0.5"
"split.data.frame","closure","function","TRUE","FALSE","(x, f, drop = FALSE, ...) ","base","base","4.0.5"
"split.default","closure","function","TRUE","FALSE","(x, f, drop = FALSE, sep = ""."", lex.order = FALSE, ...) ","base","base","4.0.5"
"split<-","closure","function","TRUE","FALSE","(x, f, drop = FALSE, ..., value) ","base","base","4.0.5"
"split<-.data.frame","closure","function","TRUE","FALSE","(x, f, drop = FALSE, ..., value) ","base","base","4.0.5"
"split<-.default","closure","function","TRUE","FALSE","(x, f, drop = FALSE, ..., value) ","base","base","4.0.5"
"sprintf","closure","function","TRUE","FALSE","(fmt, ...) ","base","base","4.0.5"
"sqrt","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"srcfile","closure","function","TRUE","FALSE","(filename, encoding = getOption(""encoding""), Enc = ""unknown"") ","base","base","4.0.5"
"srcfilealias","closure","function","TRUE","FALSE","(filename, srcfile) ","base","base","4.0.5"
"srcfilecopy","closure","function","TRUE","FALSE","(filename, lines, timestamp = Sys.time(), isFile = FALSE) ","base","base","4.0.5"
"srcref","closure","function","TRUE","FALSE","(srcfile, lloc) ","base","base","4.0.5"
"standardGeneric","builtin","function","TRUE","NA","(f, fdef) ","base","base","4.0.5"
"startsWith","closure","function","TRUE","FALSE","(x, prefix) ","base","base","4.0.5"
"stderr","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"stdin","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"stdout","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"stop","closure","function","TRUE","FALSE","(..., call. = TRUE, domain = NULL) ","base","base","4.0.5"
"stopifnot","closure","function","TRUE","FALSE","(..., exprs, exprObject, local = TRUE) ","base","base","4.0.5"
"storage.mode","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"storage.mode<-","builtin","function","TRUE","NA","(x, value) ","base","base","4.0.5"
"str2expression","closure","function","TRUE","FALSE","(text) ","base","base","4.0.5"
"str2lang","closure","function","TRUE","FALSE","(s) ","base","base","4.0.5"
"strftime","closure","function","TRUE","FALSE","(x, format = """", tz = """", usetz = FALSE, ...) ","base","base","4.0.5"
"strptime","closure","function","TRUE","FALSE","(x, format, tz = """") ","base","base","4.0.5"
"strrep","closure","function","TRUE","FALSE","(x, times) ","base","base","4.0.5"
"strsplit","closure","function","TRUE","FALSE","(x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) ","base","base","4.0.5"
"strtoi","closure","function","TRUE","FALSE","(x, base = 0L) ","base","base","4.0.5"
"strtrim","closure","function","TRUE","FALSE","(x, width) ","base","base","4.0.5"
"structure","closure","function","TRUE","FALSE","(.Data, ...) ","base","base","4.0.5"
"strwrap","closure","function","TRUE","FALSE","(x, width = 0.9 * getOption(""width""), indent = 0, exdent = 0,     prefix = """", simplify = TRUE, initial = prefix) ","base","base","4.0.5"
"sub","closure","function","TRUE","FALSE","(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,     fixed = FALSE, useBytes = FALSE) ","base","base","4.0.5"
"subset","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"subset.data.frame","closure","function","TRUE","FALSE","(x, subset, select, drop = FALSE, ...) ","base","base","4.0.5"
"subset.default","closure","function","TRUE","FALSE","(x, subset, ...) ","base","base","4.0.5"
"subset.matrix","closure","function","TRUE","FALSE","(x, subset, select, drop = FALSE, ...) ","base","base","4.0.5"
"substitute","special","function","TRUE","NA","(expr, env) ","base","base","4.0.5"
"substr","closure","function","TRUE","FALSE","(x, start, stop) ","base","base","4.0.5"
"substr<-","closure","function","TRUE","FALSE","(x, start, stop, value) ","base","base","4.0.5"
"substring","closure","function","TRUE","FALSE","(text, first, last = 1000000L) ","base","base","4.0.5"
"substring<-","closure","function","TRUE","FALSE","(text, first, last = 1000000L, value) ","base","base","4.0.5"
"sum","builtin","function","TRUE","NA","(..., na.rm = FALSE) ","base","base","4.0.5"
"summary","closure","function","TRUE","TRUE","(object, ...) ","base","base","4.0.5"
"summary.Date","closure","function","TRUE","FALSE","(object, digits = 12L, ...) ","base","base","4.0.5"
"summary.POSIXct","closure","function","TRUE","FALSE","(object, digits = 15L, ...) ","base","base","4.0.5"
"summary.POSIXlt","closure","function","TRUE","FALSE","(object, digits = 15, ...) ","base","base","4.0.5"
"summary.connection","closure","function","TRUE","FALSE","(object, ...) ","base","base","4.0.5"
"summary.data.frame","closure","function","TRUE","FALSE","(object, maxsum = 7L, digits = max(3L, getOption(""digits"") -     3L), ...) ","base","base","4.0.5"
"summary.default","closure","function","TRUE","FALSE","(object, ..., digits, quantile.type = 7) ","base","base","4.0.5"
"summary.factor","closure","function","TRUE","FALSE","(object, maxsum = 100L, ...) ","base","base","4.0.5"
"summary.matrix","closure","function","TRUE","FALSE","(object, ...) ","base","base","4.0.5"
"summary.proc_time","closure","function","TRUE","FALSE","(object, ...) ","base","base","4.0.5"
"summary.srcfile","closure","function","TRUE","FALSE","(object, ...) ","base","base","4.0.5"
"summary.srcref","closure","function","TRUE","FALSE","(object, useSource = FALSE, ...) ","base","base","4.0.5"
"summary.table","closure","function","TRUE","FALSE","(object, ...) ","base","base","4.0.5"
"summary.warnings","closure","function","TRUE","FALSE","(object, ...) ","base","base","4.0.5"
"suppressMessages","closure","function","TRUE","FALSE","(expr, classes = ""message"") ","base","base","4.0.5"
"suppressPackageStartupMessages","closure","function","TRUE","FALSE","(expr) ","base","base","4.0.5"
"suppressWarnings","closure","function","TRUE","FALSE","(expr, classes = ""warning"") ","base","base","4.0.5"
"suspendInterrupts","closure","function","TRUE","FALSE","(expr) ","base","base","4.0.5"
"svd","closure","function","TRUE","FALSE","(x, nu = min(n, p), nv = min(n, p), LINPACK = FALSE) ","base","base","4.0.5"
"sweep","closure","function","TRUE","FALSE","(x, MARGIN, STATS, FUN = ""-"", check.margin = TRUE, ...) ","base","base","4.0.5"
"switch","special","function","TRUE","NA","(EXPR, ...) ","base","base","4.0.5"
"sys.call","closure","function","TRUE","FALSE","(which = 0L) ","base","base","4.0.5"
"sys.calls","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"sys.frame","closure","function","TRUE","FALSE","(which = 0L) ","base","base","4.0.5"
"sys.frames","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"sys.function","closure","function","TRUE","FALSE","(which = 0L) ","base","base","4.0.5"
"sys.load.image","closure","function","TRUE","FALSE","(name, quiet) ","base","base","4.0.5"
"sys.nframe","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"sys.on.exit","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"sys.parent","closure","function","TRUE","FALSE","(n = 1L) ","base","base","4.0.5"
"sys.parents","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"sys.save.image","closure","function","TRUE","FALSE","(name) ","base","base","4.0.5"
"sys.source","closure","function","TRUE","FALSE","(file, envir = baseenv(), chdir = FALSE, keep.source = getOption(""keep.source.pkgs""),     keep.parse.data = getOption(""keep.parse.data.pkgs""), toplevel.env = as.environment(envir)) ","base","base","4.0.5"
"sys.status","closure","function","TRUE","FALSE","() ","base","base","4.0.5"
"system","closure","function","TRUE","FALSE","(command, intern = FALSE, ignore.stdout = FALSE, ignore.stderr = FALSE,     wait = TRUE, input = NULL, show.output.on.console = TRUE,     minimized = FALSE, invisible = TRUE, timeout = 0) ","base","base","4.0.5"
"system.file","closure","function","TRUE","FALSE","(..., package = ""base"", lib.loc = NULL, mustWork = FALSE) ","base","base","4.0.5"
"system.time","closure","function","TRUE","FALSE","(expr, gcFirst = TRUE) ","base","base","4.0.5"
"system2","closure","function","TRUE","FALSE","(command, args = character(), stdout = """", stderr = """",     stdin = """", input = NULL, env = character(), wait = TRUE,     minimized = FALSE, invisible = TRUE, timeout = 0) ","base","base","4.0.5"
"t","closure","function","TRUE","TRUE","(x) ","base","base","4.0.5"
"t.data.frame","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"t.default","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"table","closure","function","TRUE","FALSE","(..., exclude = if (useNA == ""no"") c(NA, NaN), useNA = c(""no"",     ""ifany"", ""always""), dnn = list.names(...), deparse.level = 1) ","base","base","4.0.5"
"tabulate","closure","function","TRUE","FALSE","(bin, nbins = max(1L, bin, na.rm = TRUE)) ","base","base","4.0.5"
"tan","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"tanh","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"tanpi","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"tapply","closure","function","TRUE","FALSE","(X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE) ","base","base","4.0.5"
"taskCallbackManager","closure","function","TRUE","FALSE","(handlers = list(), registered = FALSE, verbose = FALSE) ","base","base","4.0.5"
"tcrossprod","closure","function","TRUE","TRUE","(x, y = NULL) ","base","base","4.0.5"
"tempdir","closure","function","TRUE","FALSE","(check = FALSE) ","base","base","4.0.5"
"tempfile","closure","function","TRUE","FALSE","(pattern = ""file"", tmpdir = tempdir(), fileext = """") ","base","base","4.0.5"
"textConnection","closure","function","TRUE","FALSE","(object, open = ""r"", local = FALSE, encoding = c("""",     ""bytes"", ""UTF-8"")) ","base","base","4.0.5"
"textConnectionValue","closure","function","TRUE","FALSE","(con) ","base","base","4.0.5"
"toString","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"toString.default","closure","function","TRUE","FALSE","(x, width = NULL, ...) ","base","base","4.0.5"
"tolower","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"topenv","closure","function","TRUE","FALSE","(envir = parent.frame(), matchThisEnv = getOption(""topLevelEnvironment"")) ","base","base","4.0.5"
"toupper","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"trace","closure","function","TRUE","FALSE","(what, tracer, exit, at, print, signature, where = topenv(parent.frame()),     edit = FALSE) ","base","base","4.0.5"
"traceback","closure","function","TRUE","FALSE","(x = NULL, max.lines = getOption(""traceback.max.lines"",     getOption(""deparse.max.lines"", -1L))) ","base","base","4.0.5"
"tracemem","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"tracingState","closure","function","TRUE","FALSE","(on = NULL) ","base","base","4.0.5"
"transform","closure","function","TRUE","FALSE","(`_data`, ...) ","base","base","4.0.5"
"transform.data.frame","closure","function","TRUE","FALSE","(`_data`, ...) ","base","base","4.0.5"
"transform.default","closure","function","TRUE","FALSE","(`_data`, ...) ","base","base","4.0.5"
"trigamma","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"trimws","closure","function","TRUE","FALSE","(x, which = c(""both"", ""left"", ""right""), whitespace = ""[ \t\r\n]"") ","base","base","4.0.5"
"trunc","builtin","function","TRUE","NA","(x, ...) ","base","base","4.0.5"
"trunc.Date","closure","function","TRUE","FALSE","(x, ...) ","base","base","4.0.5"
"trunc.POSIXt","closure","function","TRUE","FALSE","(x, units = c(""secs"", ""mins"", ""hours"", ""days"", ""months"",     ""years""), ...) ","base","base","4.0.5"
"truncate","closure","function","TRUE","FALSE","(con, ...) ","base","base","4.0.5"
"truncate.connection","closure","function","TRUE","FALSE","(con, ...) ","base","base","4.0.5"
"try","closure","function","TRUE","FALSE","(expr, silent = FALSE, outFile = getOption(""try.outFile"",     default = stderr())) ","base","base","4.0.5"
"tryCatch","closure","function","TRUE","FALSE","(expr, ..., finally) ","base","base","4.0.5"
"tryInvokeRestart","closure","function","TRUE","FALSE","(r, ...) ","base","base","4.0.5"
"typeof","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"unclass","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"undebug","closure","function","TRUE","FALSE","(fun, signature = NULL) ","base","base","4.0.5"
"union","closure","function","TRUE","FALSE","(x, y) ","base","base","4.0.5"
"unique","closure","function","TRUE","FALSE","(x, incomparables = FALSE, ...) ","base","base","4.0.5"
"unique.POSIXlt","closure","function","TRUE","FALSE","(x, incomparables = FALSE, ...) ","base","base","4.0.5"
"unique.array","closure","function","TRUE","FALSE","(x, incomparables = FALSE, MARGIN = 1, fromLast = FALSE,     ...) ","base","base","4.0.5"
"unique.data.frame","closure","function","TRUE","FALSE","(x, incomparables = FALSE, fromLast = FALSE, ...) ","base","base","4.0.5"
"unique.default","closure","function","TRUE","FALSE","(x, incomparables = FALSE, fromLast = FALSE, nmax = NA,     ...) ","base","base","4.0.5"
"unique.matrix","closure","function","TRUE","FALSE","(x, incomparables = FALSE, MARGIN = 1, fromLast = FALSE,     ...) ","base","base","4.0.5"
"unique.numeric_version","closure","function","TRUE","FALSE","(x, incomparables = FALSE, ...) ","base","base","4.0.5"
"unique.warnings","closure","function","TRUE","FALSE","(x, incomparables = FALSE, ...) ","base","base","4.0.5"
"units","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"units.difftime","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"units<-","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"units<-.difftime","closure","function","TRUE","FALSE","(x, value) ","base","base","4.0.5"
"unix.time","closure","function","TRUE","FALSE","(...) ","base","base","4.0.5"
"unlink","closure","function","TRUE","FALSE","(x, recursive = FALSE, force = FALSE, expand = TRUE) ","base","base","4.0.5"
"unlist","closure","function","TRUE","FALSE","(x, recursive = TRUE, use.names = TRUE) ","base","base","4.0.5"
"unloadNamespace","closure","function","TRUE","FALSE","(ns) ","base","base","4.0.5"
"unlockBinding","closure","function","TRUE","FALSE","(sym, env) ","base","base","4.0.5"
"unname","closure","function","TRUE","TRUE","(obj, force = FALSE) ","base","base","4.0.5"
"unserialize","closure","function","TRUE","FALSE","(connection, refhook = NULL) ","base","base","4.0.5"
"unsplit","closure","function","TRUE","FALSE","(value, f, drop = FALSE) ","base","base","4.0.5"
"untrace","closure","function","TRUE","FALSE","(what, signature = NULL, where = topenv(parent.frame())) ","base","base","4.0.5"
"untracemem","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"unz","closure","function","TRUE","FALSE","(description, filename, open = """", encoding = getOption(""encoding"")) ","base","base","4.0.5"
"upper.tri","closure","function","TRUE","FALSE","(x, diag = FALSE) ","base","base","4.0.5"
"url","closure","function","TRUE","FALSE","(description, open = """", blocking = TRUE, encoding = getOption(""encoding""),     method = getOption(""url.method"", ""default""), headers = NULL) ","base","base","4.0.5"
"utf8ToInt","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"validEnc","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"validUTF8","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"vapply","closure","function","TRUE","FALSE","(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE) ","base","base","4.0.5"
"vector","closure","function","TRUE","FALSE","(mode = ""logical"", length = 0L) ","base","base","4.0.5"
"version","list","simple.list","TRUE","FALSE","NA","base","base","4.0.5"
"warning","closure","function","TRUE","FALSE","(..., call. = TRUE, immediate. = FALSE, noBreaks. = FALSE,     domain = NULL) ","base","base","4.0.5"
"warningCondition","closure","function","TRUE","FALSE","(message, ..., class = NULL, call = NULL) ","base","base","4.0.5"
"warnings","closure","function","TRUE","FALSE","(...) ","base","base","4.0.5"
"weekdays","closure","function","TRUE","FALSE","(x, abbreviate) ","base","base","4.0.5"
"weekdays.Date","closure","function","TRUE","FALSE","(x, abbreviate = FALSE) ","base","base","4.0.5"
"weekdays.POSIXt","closure","function","TRUE","FALSE","(x, abbreviate = FALSE) ","base","base","4.0.5"
"which","closure","function","TRUE","TRUE","(x, arr.ind = FALSE, useNames = TRUE) ","base","base","4.0.5"
"which.max","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"which.min","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"while","special","function","TRUE","NA","","base","base","4.0.5"
"with","closure","function","TRUE","FALSE","(data, expr, ...) ","base","base","4.0.5"
"with.default","closure","function","TRUE","FALSE","(data, expr, ...) ","base","base","4.0.5"
"withAutoprint","closure","function","TRUE","FALSE","(exprs, evaluated = FALSE, local = parent.frame(), print. = TRUE,     echo = TRUE, max.deparse.length = Inf, width.cutoff = max(20,         getOption(""width"")), deparseCtrl = c(""keepInteger"", ""showAttributes"",         ""keepNA""), ...) ","base","base","4.0.5"
"withCallingHandlers","closure","function","TRUE","FALSE","(expr, ...) ","base","base","4.0.5"
"withRestarts","closure","function","TRUE","FALSE","(expr, ...) ","base","base","4.0.5"
"withVisible","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"within","closure","function","TRUE","FALSE","(data, expr, ...) ","base","base","4.0.5"
"within.data.frame","closure","function","TRUE","FALSE","(data, expr, ...) ","base","base","4.0.5"
"within.list","closure","function","TRUE","FALSE","(data, expr, keepAttrs = TRUE, ...) ","base","base","4.0.5"
"write","closure","function","TRUE","FALSE","(x, file = ""data"", ncolumns = if (is.character(x)) 1 else 5,     append = FALSE, sep = "" "") ","base","base","4.0.5"
"write.dcf","closure","function","TRUE","FALSE","(x, file = """", append = FALSE, useBytes = FALSE, indent = 0.1 *     getOption(""width""), width = 0.9 * getOption(""width""), keep.white = NULL) ","base","base","4.0.5"
"writeBin","closure","function","TRUE","FALSE","(object, con, size = NA_integer_, endian = .Platform$endian,     useBytes = FALSE) ","base","base","4.0.5"
"writeChar","closure","function","TRUE","FALSE","(object, con, nchars = nchar(object, type = ""chars""),     eos = """", useBytes = FALSE) ","base","base","4.0.5"
"writeLines","closure","function","TRUE","FALSE","(text, con = stdout(), sep = ""\n"", useBytes = FALSE) ","base","base","4.0.5"
"xor","closure","function","TRUE","FALSE","(x, y) ","base","base","4.0.5"
"xpdrows.data.frame","closure","function","TRUE","FALSE","(x, old.rows, new.rows) ","base","base","4.0.5"
"xtfrm","builtin","function","TRUE","NA","(x) ","base","base","4.0.5"
"xtfrm.AsIs","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"xtfrm.Date","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"xtfrm.POSIXct","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"xtfrm.POSIXlt","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"xtfrm.default","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"xtfrm.difftime","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"xtfrm.factor","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"xtfrm.numeric_version","closure","function","TRUE","FALSE","(x) ","base","base","4.0.5"
"xzfile","closure","function","TRUE","FALSE","(description, open = """", encoding = getOption(""encoding""),     compression = 6) ","base","base","4.0.5"
"zapsmall","closure","function","TRUE","TRUE","(x, digits = getOption(""digits"")) ","base","base","4.0.5"
"{","special","function","TRUE","NA","","base","base","4.0.5"
"|","builtin","function","TRUE","NA","(e1, e2) ","base","base","4.0.5"
"|.hexmode","closure","function","TRUE","FALSE","(a, b) ","base","base","4.0.5"
"|.octmode","closure","function","TRUE","FALSE","(a, b) ","base","base","4.0.5"
"||","special","function","TRUE","NA","","base","base","4.0.5"
"~","special","function","TRUE","NA","","base","base","4.0.5"
".Depends","character","character","FALSE","FALSE","NA","boot","recommended","4.0.5"
"EEF.profile","closure","function","TRUE","FALSE","(y, tmin = min(y) + 0.1, tmax = max(y) - 0.1, n.t = 25,     u = function(y, t) y - t) ","boot","recommended","4.0.5"
"EL.profile","closure","function","TRUE","FALSE","(y, tmin = min(y) + 0.1, tmax = max(y) - 0.1, n.t = 25,     u = function(y, t) y - t) ","boot","recommended","4.0.5"
"abc.ci","closure","function","TRUE","FALSE","(data, statistic, index = 1, strata = rep(1, n), conf = 0.95,     eps = 0.001/n, ...) ","boot","recommended","4.0.5"
"acme","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"aids","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"aircondit","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"aircondit7","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"amis","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"aml","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"beaver","double","mts/ts","FALSE","FALSE","NA","boot","recommended","4.0.5"
"bigcity","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"boot","closure","function","TRUE","FALSE","(data, statistic, R, sim = ""ordinary"", stype = c(""i"",     ""f"", ""w""), strata = rep(1, n), L = NULL, m = 0, weights = NULL,     ran.gen = function(d, p) d, mle = NULL, simple = FALSE, ...,     parallel = c(""no"", ""multicore"", ""snow""), ncpus = getOption(""boot.ncpus"",         1L), cl = NULL) ","boot","recommended","4.0.5"
"boot.array","closure","function","TRUE","FALSE","(boot.out, indices = FALSE) ","boot","recommended","4.0.5"
"boot.ci","closure","function","TRUE","FALSE","(boot.out, conf = 0.95, type = ""all"", index = 1L:min(2L,     length(boot.out$t0)), var.t0 = NULL, var.t = NULL, t0 = NULL,     t = NULL, L = NULL, h = function(t) t, hdot = function(t) rep(1,         length(t)), hinv = function(t) t, ...) ","boot","recommended","4.0.5"
"brambles","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"breslow","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"calcium","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"cane","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"capability","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"catsM","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"cav","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"cd4","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"cd4.nested","list","boot","FALSE","FALSE","NA","boot","recommended","4.0.5"
"censboot","closure","function","TRUE","FALSE","(data, statistic, R, F.surv, G.surv, strata = matrix(1,     n, 2), sim = ""ordinary"", cox = NULL, index = c(1, 2), ...,     parallel = c(""no"", ""multicore"", ""snow""), ncpus = getOption(""boot.ncpus"",         1L), cl = NULL) ","boot","recommended","4.0.5"
"channing","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"city","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"claridge","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"cloth","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"co.transfer","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"coal","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"control","closure","function","TRUE","FALSE","(boot.out, L = NULL, distn = NULL, index = 1, t0 = NULL,     t = NULL, bias.adj = FALSE, alpha = NULL, ...) ","boot","recommended","4.0.5"
"corr","closure","function","TRUE","FALSE","(d, w = rep(1, nrow(d))/nrow(d)) ","boot","recommended","4.0.5"
"cum3","closure","function","TRUE","FALSE","(a, b = a, c = a, unbiased = TRUE) ","boot","recommended","4.0.5"
"cv.glm","closure","function","TRUE","FALSE","(data, glmfit, cost = function(y, yhat) mean((y - yhat)^2),     K = n) ","boot","recommended","4.0.5"
"darwin","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"dogs","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"downs.bc","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"ducks","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"empinf","closure","function","TRUE","FALSE","(boot.out = NULL, data = NULL, statistic = NULL, type = NULL,     stype = NULL, index = 1, t = NULL, strata = rep(1, n), eps = 0.001,     ...) ","boot","recommended","4.0.5"
"envelope","closure","function","TRUE","FALSE","(boot.out = NULL, mat = NULL, level = 0.95, index = 1L:ncol(mat)) ","boot","recommended","4.0.5"
"exp.tilt","closure","function","TRUE","FALSE","(L, theta = NULL, t0 = 0, lambda = NULL, strata = rep(1,     length(L))) ","boot","recommended","4.0.5"
"fir","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"freq.array","closure","function","TRUE","FALSE","(i.array) ","boot","recommended","4.0.5"
"frets","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"glm.diag","closure","function","TRUE","FALSE","(glmfit) ","boot","recommended","4.0.5"
"glm.diag.plots","closure","function","TRUE","FALSE","(glmfit, glmdiag = glm.diag(glmfit), subset = NULL,     iden = FALSE, labels = NULL, ret = FALSE) ","boot","recommended","4.0.5"
"grav","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"gravity","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"hirose","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"imp.moments","closure","function","TRUE","FALSE","(boot.out = NULL, index = 1, t = boot.out$t[, index],     w = NULL, def = TRUE, q = NULL) ","boot","recommended","4.0.5"
"imp.prob","closure","function","TRUE","FALSE","(boot.out = NULL, index = 1, t0 = boot.out$t0[index],     t = boot.out$t[, index], w = NULL, def = TRUE, q = NULL) ","boot","recommended","4.0.5"
"imp.quantile","closure","function","TRUE","FALSE","(boot.out = NULL, alpha = NULL, index = 1, t = boot.out$t[,     index], w = NULL, def = TRUE, q = NULL) ","boot","recommended","4.0.5"
"imp.weights","closure","function","TRUE","FALSE","(boot.out, def = TRUE, q = NULL) ","boot","recommended","4.0.5"
"inv.logit","closure","function","TRUE","FALSE","(x) ","boot","recommended","4.0.5"
"islay","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"jack.after.boot","closure","function","TRUE","FALSE","(boot.out, index = 1, t = NULL, L = NULL, useJ = TRUE,     stinf = TRUE, alpha = NULL, main = """", ylab = NULL, ...) ","boot","recommended","4.0.5"
"k3.linear","closure","function","TRUE","FALSE","(L, strata = NULL) ","boot","recommended","4.0.5"
"lik.CI","closure","function","TRUE","FALSE","(like, lim) ","boot","recommended","4.0.5"
"linear.approx","closure","function","TRUE","FALSE","(boot.out, L = NULL, index = 1, type = NULL, t0 = NULL,     t = NULL, ...) ","boot","recommended","4.0.5"
"logit","closure","function","TRUE","FALSE","(p) ","boot","recommended","4.0.5"
"manaus","double","ts","FALSE","FALSE","NA","boot","recommended","4.0.5"
"melanoma","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"motor","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"nested.corr","closure","function","TRUE","FALSE","(data, w, t0, M) ","boot","recommended","4.0.5"
"neuro","double","matrix/array","FALSE","FALSE","NA","boot","recommended","4.0.5"
"nitrofen","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"nodal","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"norm.ci","closure","function","TRUE","FALSE","(boot.out = NULL, conf = 0.95, index = 1, var.t0 = NULL,     t0 = NULL, t = NULL, L = NULL, h = function(t) t, hdot = function(t) 1,     hinv = function(t) t) ","boot","recommended","4.0.5"
"nuclear","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"paulsen","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"poisons","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"polar","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"remission","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"saddle","closure","function","TRUE","FALSE","(A = NULL, u = NULL, wdist = ""m"", type = ""simp"", d = NULL,     d1 = 1, init = rep(0.1, d), mu = rep(0.5, n), LR = FALSE,     strata = NULL, K.adj = NULL, K2 = NULL) ","boot","recommended","4.0.5"
"saddle.distn","closure","function","TRUE","FALSE","(A, u = NULL, alpha = NULL, wdist = ""m"", type = ""simp"",     npts = 20, t = NULL, t0 = NULL, init = rep(0.1, d), mu = rep(0.5,         n), LR = FALSE, strata = NULL, ...) ","boot","recommended","4.0.5"
"salinity","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"simplex","closure","function","TRUE","FALSE","(a, A1 = NULL, b1 = NULL, A2 = NULL, b2 = NULL, A3 = NULL,     b3 = NULL, maxi = FALSE, n.iter = n + 2 * m, eps = 1e-10) ","boot","recommended","4.0.5"
"smooth.f","closure","function","TRUE","FALSE","(theta, boot.out, index = 1, t = boot.out$t[, index],     width = 0.5) ","boot","recommended","4.0.5"
"survival","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"tau","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"tilt.boot","closure","function","TRUE","FALSE","(data, statistic, R, sim = ""ordinary"", stype = ""i"",     strata = rep(1, n), L = NULL, theta = NULL, alpha = c(0.025,         0.975), tilt = TRUE, width = 0.5, index = 1, ...) ","boot","recommended","4.0.5"
"tsboot","closure","function","TRUE","FALSE","(tseries, statistic, R, l = NULL, sim = ""model"", endcorr = TRUE,     n.sim = NROW(tseries), orig.t = TRUE, ran.gen = function(tser,         n.sim, args) tser, ran.args = NULL, norm = TRUE, ...,     parallel = c(""no"", ""multicore"", ""snow""), ncpus = getOption(""boot.ncpus"",         1L), cl = NULL) ","boot","recommended","4.0.5"
"tuna","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"urine","list","data.frame","FALSE","FALSE","NA","boot","recommended","4.0.5"
"var.linear","closure","function","TRUE","FALSE","(L, strata = NULL) ","boot","recommended","4.0.5"
"wool","double","ts","FALSE","FALSE","NA","boot","recommended","4.0.5"
".Depends","character","character","FALSE","FALSE","NA","class","recommended","4.0.5"
"SOM","closure","function","TRUE","FALSE","(data, grid = somgrid(), rlen = 10000, alpha = seq(0.05,     0, len = rlen), radii = seq(4, 1, len = rlen), init) ","class","recommended","4.0.5"
"batchSOM","closure","function","TRUE","FALSE","(data, grid = somgrid(), radii, init) ","class","recommended","4.0.5"
"condense","closure","function","TRUE","FALSE","(train, class, store = sample(seq(n), 1), trace = TRUE) ","class","recommended","4.0.5"
"knn","closure","function","TRUE","FALSE","(train, test, cl, k = 1, l = 0, prob = FALSE, use.all = TRUE) ","class","recommended","4.0.5"
"knn.cv","closure","function","TRUE","FALSE","(train, cl, k = 1, l = 0, prob = FALSE, use.all = TRUE) ","class","recommended","4.0.5"
"knn1","closure","function","TRUE","FALSE","(train, test, cl) ","class","recommended","4.0.5"
"lvq1","closure","function","TRUE","FALSE","(x, cl, codebk, niter = 100 * nrow(codebk$x), alpha = 0.03) ","class","recommended","4.0.5"
"lvq2","closure","function","TRUE","FALSE","(x, cl, codebk, niter = 100 * nrow(codebk$x), alpha = 0.03,     win = 0.3) ","class","recommended","4.0.5"
"lvq3","closure","function","TRUE","FALSE","(x, cl, codebk, niter = 100 * nrow(codebk$x), alpha = 0.03,     win = 0.3, epsilon = 0.1) ","class","recommended","4.0.5"
"lvqinit","closure","function","TRUE","FALSE","(x, cl, size, prior, k = 5) ","class","recommended","4.0.5"
"lvqtest","closure","function","TRUE","FALSE","(codebk, test) ","class","recommended","4.0.5"
"multiedit","closure","function","TRUE","FALSE","(x, class, k = 1, V = 3, I = 5, trace = TRUE) ","class","recommended","4.0.5"
"olvq1","closure","function","TRUE","FALSE","(x, cl, codebk, niter = 40 * nrow(codebk$x), alpha = 0.3) ","class","recommended","4.0.5"
"reduce.nn","closure","function","TRUE","FALSE","(train, ind, class) ","class","recommended","4.0.5"
"somgrid","closure","function","TRUE","FALSE","(xdim = 8, ydim = 6, topo = c(""rectangular"", ""hexagonal"")) ","class","recommended","4.0.5"
"agnes","closure","function","TRUE","FALSE","(x, diss = inherits(x, ""dist""), metric = ""euclidean"",     stand = FALSE, method = ""average"", par.method, keep.diss = n <         100, keep.data = !diss, trace.lev = 0) ","cluster","recommended","4.0.5"
"agriculture","list","data.frame","FALSE","FALSE","NA","cluster","recommended","4.0.5"
"animals","list","data.frame","FALSE","FALSE","NA","cluster","recommended","4.0.5"
"bannerplot","closure","function","TRUE","FALSE","(x, w = rev(x$height), fromLeft = TRUE, main = NULL,     sub = NULL, xlab = ""Height"", adj = 0, col = c(2, 0), border = 0,     axes = TRUE, frame.plot = axes, rev.xax = !fromLeft, xax.pretty = TRUE,     labels = NULL, nmax.lab = 35, max.strlen = 5, yax.do = axes &&         length(x$order) <= nmax.lab, yaxRight = fromLeft, y.mar = 2.4 +         max.strlen/2.5, ...) ","cluster","recommended","4.0.5"
"chorSub","integer","matrix/array","FALSE","FALSE","NA","cluster","recommended","4.0.5"
"clara","closure","function","TRUE","FALSE","(x, k, metric = c(""euclidean"", ""manhattan"", ""jaccard""),     stand = FALSE, cluster.only = FALSE, samples = 5, sampsize = min(n,         40 + 2 * k), trace = 0, medoids.x = TRUE, keep.data = medoids.x,     rngR = FALSE, pamLike = FALSE, correct.d = TRUE) ","cluster","recommended","4.0.5"
"clusGap","closure","function","TRUE","FALSE","(x, FUNcluster, K.max, B = 100, d.power = 1, spaceH0 = c(""scaledPCA"",     ""original""), verbose = interactive(), ...) ","cluster","recommended","4.0.5"
"clusplot","closure","function","TRUE","FALSE","(x, ...) ","cluster","recommended","4.0.5"
"coef.hclust","closure","function","TRUE","FALSE","(object, ...) ","cluster","recommended","4.0.5"
"coefHier","closure","function","TRUE","FALSE","(object) ","cluster","recommended","4.0.5"
"daisy","closure","function","TRUE","FALSE","(x, metric = c(""euclidean"", ""manhattan"", ""gower""), stand = FALSE,     type = list(), weights = rep.int(1, p), warnBin = warnType,     warnAsym = warnType, warnConst = warnType, warnType = TRUE) ","cluster","recommended","4.0.5"
"diana","closure","function","TRUE","FALSE","(x, diss = inherits(x, ""dist""), metric = ""euclidean"",     stand = FALSE, stop.at.k = FALSE, keep.diss = n < 100, keep.data = !diss,     trace.lev = 0) ","cluster","recommended","4.0.5"
"ellipsoidPoints","closure","function","TRUE","FALSE","(A, d2, loc, n.half = 201) ","cluster","recommended","4.0.5"
"ellipsoidhull","closure","function","TRUE","FALSE","(x, tol = 0.01, maxit = 5000, ret.wt = FALSE, ret.sqdist = FALSE,     ret.pr = FALSE) ","cluster","recommended","4.0.5"
"fanny","closure","function","TRUE","FALSE","(x, k, diss = inherits(x, ""dist""), memb.exp = 2, metric = c(""euclidean"",     ""manhattan"", ""SqEuclidean""), stand = FALSE, iniMem.p = NULL,     cluster.only = FALSE, keep.diss = !diss && !cluster.only &&         n < 100, keep.data = !diss && !cluster.only, maxit = 500,     tol = 1e-15, trace.lev = 0) ","cluster","recommended","4.0.5"
"flower","list","data.frame","FALSE","FALSE","NA","cluster","recommended","4.0.5"
"lower.to.upper.tri.inds","closure","function","TRUE","FALSE","(n) ","cluster","recommended","4.0.5"
"maxSE","closure","function","TRUE","FALSE","(f, SE.f, method = c(""firstSEmax"", ""Tibs2001SEmax"",     ""globalSEmax"", ""firstmax"", ""globalmax""), SE.factor = 1) ","cluster","recommended","4.0.5"
"meanabsdev","closure","function","TRUE","FALSE","(y) ","cluster","recommended","4.0.5"
"mona","closure","function","TRUE","FALSE","(x, trace.lev = 0) ","cluster","recommended","4.0.5"
"pam","closure","function","TRUE","FALSE","(x, k, diss = inherits(x, ""dist""), metric = c(""euclidean"",     ""manhattan""), medoids = if (is.numeric(nstart)) ""random"",     nstart = if (variant == ""faster"") 1L else NA, stand = FALSE,     cluster.only = FALSE, do.swap = TRUE, keep.diss = !diss &&         !cluster.only && n < 100, keep.data = !diss && !cluster.only,     variant = c(""original"", ""o_1"", ""o_2"", ""f_3"", ""f_4"", ""f_5"",         ""faster""), pamonce = FALSE, trace.lev = 0) ","cluster","recommended","4.0.5"
"plantTraits","list","data.frame","FALSE","FALSE","NA","cluster","recommended","4.0.5"
"pltree","closure","function","TRUE","FALSE","(x, ...) ","cluster","recommended","4.0.5"
"pluton","list","data.frame","FALSE","FALSE","NA","cluster","recommended","4.0.5"
"predict.ellipsoid","closure","function","TRUE","FALSE","(object, n.out = 201, ...) ","cluster","recommended","4.0.5"
"ruspini","list","data.frame","FALSE","FALSE","NA","cluster","recommended","4.0.5"
"silhouette","closure","function","TRUE","FALSE","(x, ...) ","cluster","recommended","4.0.5"
"sizeDiss","closure","function","TRUE","FALSE","(d) ","cluster","recommended","4.0.5"
"sortSilhouette","closure","function","TRUE","FALSE","(object, ...) ","cluster","recommended","4.0.5"
"upper.to.lower.tri.inds","closure","function","TRUE","FALSE","(n) ","cluster","recommended","4.0.5"
"volume","closure","function","TRUE","FALSE","(object, ...) ","cluster","recommended","4.0.5"
"votes.repub","list","data.frame","FALSE","FALSE","NA","cluster","recommended","4.0.5"
"xclara","list","data.frame","FALSE","FALSE","NA","cluster","recommended","4.0.5"
"checkUsage","closure","function","TRUE","FALSE","(fun, name = ""<anonymous>"", report = cat, all = FALSE,     suppressLocal = FALSE, suppressParamAssigns = !all, suppressParamUnused = !all,     suppressFundefMismatch = FALSE, suppressLocalUnused = FALSE,     suppressNoLocalFun = !all, skipWith = FALSE, suppressUndefined = dfltSuppressUndefined,     suppressPartialMatchArgs = TRUE) ","codetools","recommended","4.0.5"
"checkUsageEnv","closure","function","TRUE","FALSE","(env, ...) ","codetools","recommended","4.0.5"
"checkUsagePackage","closure","function","TRUE","FALSE","(pack, ...) ","codetools","recommended","4.0.5"
"collectLocals","closure","function","TRUE","FALSE","(e, collect) ","codetools","recommended","4.0.5"
"collectUsage","closure","function","TRUE","FALSE","(fun, name = ""<anonymous>"", ...) ","codetools","recommended","4.0.5"
"constantFold","closure","function","TRUE","FALSE","(e, env = NULL, fail = NULL) ","codetools","recommended","4.0.5"
"findFuncLocals","closure","function","TRUE","FALSE","(formals, body) ","codetools","recommended","4.0.5"
"findGlobals","closure","function","TRUE","FALSE","(fun, merge = TRUE) ","codetools","recommended","4.0.5"
"findLocals","closure","function","TRUE","FALSE","(e, envir = .BaseEnv) ","codetools","recommended","4.0.5"
"findLocalsList","closure","function","TRUE","FALSE","(elist, envir = .BaseEnv) ","codetools","recommended","4.0.5"
"flattenAssignment","closure","function","TRUE","FALSE","(e) ","codetools","recommended","4.0.5"
"getAssignedVar","closure","function","TRUE","FALSE","(e) ","codetools","recommended","4.0.5"
"isConstantValue","closure","function","TRUE","FALSE","(v, w) ","codetools","recommended","4.0.5"
"makeCodeWalker","closure","function","TRUE","FALSE","(..., handler = function(v, w) NULL, call = function(e,     w) for (ee in as.list(e)) if (!missing(ee)) walkCode(ee,     w), leaf = function(e, w) print(e)) ","codetools","recommended","4.0.5"
"makeConstantFolder","closure","function","TRUE","FALSE","(..., leaf = foldLeaf, handler = function(v, w) if (w$foldable(v,     w)) foldCall, call = function(e, w) exitFolder(e, w), exit = function(e,     w) stop0(paste(""not a foldable expression:"", deparse(e, width.cutoff = 500))),     isLocal = function(v, w) FALSE, foldable = isFoldable, isConstant = isConstantValue,     signal = function(e, msg, w) warning0(msg)) ","codetools","recommended","4.0.5"
"makeLocalsCollector","closure","function","TRUE","FALSE","(..., leaf = function(e, w) character(0), handler = getCollectLocalsHandler,     isLocal = function(v, w) FALSE, exit = function(e, msg, w) stop0(msg),     collect = function(v, e, w) print(v)) ","codetools","recommended","4.0.5"
"makeUsageCollector","closure","function","TRUE","FALSE","(fun, ..., name = NULL, enterLocal = doNothing, enterGlobal = doNothing,     enterInternal = doNothing, startCollectLocals = doNothing,     finishCollectLocals = doNothing, warn = warning0, signal = signalUsageIssue) ","codetools","recommended","4.0.5"
"showTree","closure","function","TRUE","FALSE","(e, write = cat) ","codetools","recommended","4.0.5"
"walkCode","closure","function","TRUE","FALSE","(e, w = makeCodeWalker()) ","codetools","recommended","4.0.5"
"cmpfile","closure","function","TRUE","FALSE","(infile, outfile, ascii = FALSE, env = .GlobalEnv, verbose = FALSE,     options = NULL, version = NULL) ","compiler","base","4.0.5"
"cmpfun","closure","function","TRUE","FALSE","(f, options = NULL) ","compiler","base","4.0.5"
"compile","closure","function","TRUE","FALSE","(e, env = .GlobalEnv, options = NULL, srcref = NULL) ","compiler","base","4.0.5"
"compilePKGS","closure","function","TRUE","FALSE","(enable) ","compiler","base","4.0.5"
"disassemble","closure","function","TRUE","FALSE","(code) ","compiler","base","4.0.5"
"enableJIT","closure","function","TRUE","FALSE","(level) ","compiler","base","4.0.5"
"getCompilerOption","closure","function","TRUE","FALSE","(name, options = NULL) ","compiler","base","4.0.5"
"loadcmp","closure","function","TRUE","FALSE","(file, envir = .GlobalEnv, chdir = FALSE) ","compiler","base","4.0.5"
"setCompilerOptions","closure","function","TRUE","FALSE","(...) ","compiler","base","4.0.5"
"AirPassengers","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"BJsales","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"BJsales.lead","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"BOD","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"CO2","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"ChickWeight","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"DNase","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"EuStockMarkets","double","mts/ts/matrix","FALSE","FALSE","NA","datasets","base","4.0.5"
"Formaldehyde","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"HairEyeColor","double","table","FALSE","FALSE","NA","datasets","base","4.0.5"
"Harman23.cor","list","list","FALSE","FALSE","NA","datasets","base","4.0.5"
"Harman74.cor","list","list","FALSE","FALSE","NA","datasets","base","4.0.5"
"Indometh","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"InsectSprays","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"JohnsonJohnson","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"LakeHuron","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"LifeCycleSavings","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"Loblolly","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"Nile","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"Orange","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"OrchardSprays","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"PlantGrowth","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"Puromycin","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"Seatbelts","double","mts/ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"Theoph","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"Titanic","double","table","FALSE","FALSE","NA","datasets","base","4.0.5"
"ToothGrowth","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"UCBAdmissions","double","table","FALSE","FALSE","NA","datasets","base","4.0.5"
"UKDriverDeaths","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"UKgas","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"USAccDeaths","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"USArrests","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"USJudgeRatings","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"USPersonalExpenditure","double","matrix/array","FALSE","FALSE","NA","datasets","base","4.0.5"
"UScitiesD","integer","dist","FALSE","FALSE","NA","datasets","base","4.0.5"
"VADeaths","double","matrix/array","FALSE","FALSE","NA","datasets","base","4.0.5"
"WWWusage","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"WorldPhones","double","matrix/array","FALSE","FALSE","NA","datasets","base","4.0.5"
"ability.cov","list","list","FALSE","FALSE","NA","datasets","base","4.0.5"
"airmiles","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"airquality","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"anscombe","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"attenu","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"attitude","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"austres","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"beaver1","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"beaver2","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"cars","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"chickwts","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"co2","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"crimtab","integer","table","FALSE","FALSE","NA","datasets","base","4.0.5"
"discoveries","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"esoph","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"euro","double","numeric","FALSE","FALSE","NA","datasets","base","4.0.5"
"euro.cross","double","matrix/array","FALSE","FALSE","NA","datasets","base","4.0.5"
"eurodist","double","dist","FALSE","FALSE","NA","datasets","base","4.0.5"
"faithful","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"fdeaths","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"freeny","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"freeny.x","double","matrix/array","FALSE","FALSE","NA","datasets","base","4.0.5"
"freeny.y","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"infert","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"iris","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"iris3","double","array","FALSE","FALSE","NA","datasets","base","4.0.5"
"islands","double","numeric","FALSE","FALSE","NA","datasets","base","4.0.5"
"ldeaths","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"lh","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"longley","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"lynx","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"mdeaths","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"morley","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"mtcars","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"nhtemp","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"nottem","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"npk","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"occupationalStatus","integer","table","FALSE","FALSE","NA","datasets","base","4.0.5"
"precip","double","numeric","FALSE","FALSE","NA","datasets","base","4.0.5"
"presidents","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"pressure","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"quakes","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"randu","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"rivers","double","numeric","FALSE","FALSE","NA","datasets","base","4.0.5"
"rock","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"sleep","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"stack.loss","double","numeric","FALSE","FALSE","NA","datasets","base","4.0.5"
"stack.x","double","matrix/array","FALSE","FALSE","NA","datasets","base","4.0.5"
"stackloss","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"state.abb","character","character","FALSE","FALSE","NA","datasets","base","4.0.5"
"state.area","double","numeric","FALSE","FALSE","NA","datasets","base","4.0.5"
"state.center","list","list","FALSE","FALSE","NA","datasets","base","4.0.5"
"state.division","integer","factor","FALSE","FALSE","NA","datasets","base","4.0.5"
"state.name","character","character","FALSE","FALSE","NA","datasets","base","4.0.5"
"state.region","integer","factor","FALSE","FALSE","NA","datasets","base","4.0.5"
"state.x77","double","matrix/array","FALSE","FALSE","NA","datasets","base","4.0.5"
"sunspot.month","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"sunspot.year","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"sunspots","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"swiss","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"treering","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"trees","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"uspop","double","ts","FALSE","FALSE","NA","datasets","base","4.0.5"
"volcano","double","matrix/array","FALSE","FALSE","NA","datasets","base","4.0.5"
"warpbreaks","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"women","list","data.frame","FALSE","FALSE","NA","datasets","base","4.0.5"
"data.restore","closure","function","TRUE","FALSE","(file, print = FALSE, verbose = FALSE, env = .GlobalEnv) ","foreign","recommended","4.0.5"
"lookup.xport","closure","function","TRUE","FALSE","(file) ","foreign","recommended","4.0.5"
"read.S","closure","function","TRUE","FALSE","(file) ","foreign","recommended","4.0.5"
"read.arff","closure","function","TRUE","FALSE","(file) ","foreign","recommended","4.0.5"
"read.dbf","closure","function","TRUE","FALSE","(file, as.is = FALSE) ","foreign","recommended","4.0.5"
"read.dta","closure","function","TRUE","FALSE","(file, convert.dates = TRUE, convert.factors = TRUE,     missing.type = FALSE, convert.underscore = FALSE, warn.missing.labels = TRUE) ","foreign","recommended","4.0.5"
"read.epiinfo","closure","function","TRUE","FALSE","(file, read.deleted = FALSE, guess.broken.dates = FALSE,     thisyear = NULL, lower.case.names = FALSE) ","foreign","recommended","4.0.5"
"read.mtp","closure","function","TRUE","FALSE","(file) ","foreign","recommended","4.0.5"
"read.octave","closure","function","TRUE","FALSE","(file) ","foreign","recommended","4.0.5"
"read.spss","closure","function","TRUE","FALSE","(file, use.value.labels = TRUE, to.data.frame = FALSE,     max.value.labels = Inf, trim.factor.names = FALSE, trim_values = TRUE,     reencode = NA, use.missings = to.data.frame, sub = ""."", add.undeclared.levels = c(""sort"",         ""append"", ""no""), duplicated.value.labels = c(""append"",         ""condense""), duplicated.value.labels.infix = ""_duplicated_"",     ...) ","foreign","recommended","4.0.5"
"read.ssd","closure","function","TRUE","FALSE","(libname, sectionnames, tmpXport = tempfile(), tmpProgLoc = tempfile(),     sascmd = ""sas"") ","foreign","recommended","4.0.5"
"read.systat","closure","function","TRUE","FALSE","(file, to.data.frame = TRUE) ","foreign","recommended","4.0.5"
"read.xport","closure","function","TRUE","FALSE","(file, ...) ","foreign","recommended","4.0.5"
"write.arff","closure","function","TRUE","FALSE","(x, file, eol = ""\n"", relation = deparse(substitute(x))) ","foreign","recommended","4.0.5"
"write.dbf","closure","function","TRUE","FALSE","(dataframe, file, factor2char = TRUE, max_nchar = 254) ","foreign","recommended","4.0.5"
"write.dta","closure","function","TRUE","FALSE","(dataframe, file, version = 7L, convert.dates = TRUE,     tz = ""GMT"", convert.factors = c(""labels"", ""string"", ""numeric"",         ""codes"")) ","foreign","recommended","4.0.5"
"write.foreign","closure","function","TRUE","FALSE","(df, datafile, codefile, package = c(""SPSS"", ""Stata"",     ""SAS""), ...) ","foreign","recommended","4.0.5"
".axisPars","closure","function","TRUE","FALSE","(usr, log = FALSE, nintLog = 5) ","grDevices","base","4.0.5"
"CIDFont","closure","function","TRUE","FALSE","(family, cmap, cmapEncoding, pdfresource = """") ","grDevices","base","4.0.5"
"Hershey","list","list","TRUE","FALSE","NA","grDevices","base","4.0.5"
"Type1Font","closure","function","TRUE","FALSE","(family, metrics, encoding = ""default"") ","grDevices","base","4.0.5"
"X11","closure","function","TRUE","FALSE","(display = """", width, height, pointsize, gamma, bg,     canvas, fonts, family, xpos, ypos, title, type, antialias,     symbolfamily) ","grDevices","base","4.0.5"
"X11.options","closure","function","TRUE","FALSE","(..., reset = FALSE) ","grDevices","base","4.0.5"
"X11Font","closure","function","TRUE","FALSE","(font) ","grDevices","base","4.0.5"
"X11Fonts","closure","function","TRUE","FALSE","(...) ","grDevices","base","4.0.5"
"adjustcolor","closure","function","TRUE","FALSE","(col, alpha.f = 1, red.f = 1, green.f = 1, blue.f = 1,     offset = c(0, 0, 0, 0), transform = diag(c(red.f, green.f,         blue.f, alpha.f))) ","grDevices","base","4.0.5"
"as.graphicsAnnot","closure","function","TRUE","FALSE","(x) ","grDevices","base","4.0.5"
"as.raster","closure","function","TRUE","FALSE","(x, ...) ","grDevices","base","4.0.5"
"axisTicks","closure","function","TRUE","FALSE","(usr, log, axp = NULL, nint = 5) ","grDevices","base","4.0.5"
"bitmap","closure","function","TRUE","FALSE","(file, type = ""png16m"", height = 7, width = 7, res = 72,     units = ""in"", pointsize, taa = NA, gaa = NA, ...) ","grDevices","base","4.0.5"
"blues9","character","character","TRUE","FALSE","NA","grDevices","base","4.0.5"
"bmp","closure","function","TRUE","FALSE","(filename = ""Rplot%03d.bmp"", width = 480, height = 480,     units = ""px"", pointsize = 12, bg = ""white"", res = NA, ...,     type = c(""cairo"", ""Xlib"", ""quartz""), antialias) ","grDevices","base","4.0.5"
"boxplot.stats","closure","function","TRUE","FALSE","(x, coef = 1.5, do.conf = TRUE, do.out = TRUE) ","grDevices","base","4.0.5"
"cairoSymbolFont","closure","function","TRUE","FALSE","(family, usePUA = TRUE) ","grDevices","base","4.0.5"
"cairo_pdf","closure","function","TRUE","FALSE","(filename = if (onefile) ""Rplots.pdf"" else ""Rplot%03d.pdf"",     width = 7, height = 7, pointsize = 12, onefile = FALSE, family = ""sans"",     bg = ""white"", antialias = c(""default"", ""none"", ""gray"", ""subpixel""),     fallback_resolution = 300, symbolfamily) ","grDevices","base","4.0.5"
"cairo_ps","closure","function","TRUE","FALSE","(filename = if (onefile) ""Rplots.ps"" else ""Rplot%03d.ps"",     width = 7, height = 7, pointsize = 12, onefile = FALSE, family = ""sans"",     bg = ""white"", antialias = c(""default"", ""none"", ""gray"", ""subpixel""),     fallback_resolution = 300, symbolfamily) ","grDevices","base","4.0.5"
"check.options","closure","function","TRUE","FALSE","(new, name.opt, reset = FALSE, assign.opt = FALSE, envir = .GlobalEnv,     check.attributes = c(""mode"", ""length""), override.check = FALSE) ","grDevices","base","4.0.5"
"chull","closure","function","TRUE","FALSE","(x, y = NULL) ","grDevices","base","4.0.5"
"cm","closure","function","TRUE","FALSE","(x) ","grDevices","base","4.0.5"
"cm.colors","closure","function","TRUE","FALSE","(n, alpha, rev = FALSE) ","grDevices","base","4.0.5"
"col2rgb","closure","function","TRUE","FALSE","(col, alpha = FALSE) ","grDevices","base","4.0.5"
"colorConverter","closure","function","TRUE","FALSE","(toXYZ, fromXYZ, name, white = NULL, vectorized = FALSE) ","grDevices","base","4.0.5"
"colorRamp","closure","function","TRUE","FALSE","(colors, bias = 1, space = c(""rgb"", ""Lab""), interpolate = c(""linear"",     ""spline""), alpha = FALSE) ","grDevices","base","4.0.5"
"colorRampPalette","closure","function","TRUE","FALSE","(colors, ...) ","grDevices","base","4.0.5"
"colors","closure","function","TRUE","FALSE","(distinct = FALSE) ","grDevices","base","4.0.5"
"colorspaces","list","list","TRUE","FALSE","NA","grDevices","base","4.0.5"
"colours","closure","function","TRUE","FALSE","(distinct = FALSE) ","grDevices","base","4.0.5"
"contourLines","closure","function","TRUE","FALSE","(x = seq(0, 1, length.out = nrow(z)), y = seq(0, 1,     length.out = ncol(z)), z, nlevels = 10, levels = pretty(range(z,     na.rm = TRUE), nlevels)) ","grDevices","base","4.0.5"
"convertColor","closure","function","TRUE","FALSE","(color, from, to, from.ref.white = NULL, to.ref.white = NULL,     scale.in = 1, scale.out = 1, clip = TRUE) ","grDevices","base","4.0.5"
"densCols","closure","function","TRUE","FALSE","(x, y = NULL, nbin = 128, bandwidth, colramp = colorRampPalette(blues9[-(1:3)])) ","grDevices","base","4.0.5"
"dev.capabilities","closure","function","TRUE","FALSE","(what = NULL) ","grDevices","base","4.0.5"
"dev.capture","closure","function","TRUE","FALSE","(native = FALSE) ","grDevices","base","4.0.5"
"dev.control","closure","function","TRUE","FALSE","(displaylist = c(""inhibit"", ""enable"")) ","grDevices","base","4.0.5"
"dev.copy","closure","function","TRUE","FALSE","(device, ..., which = dev.next()) ","grDevices","base","4.0.5"
"dev.copy2eps","closure","function","TRUE","FALSE","(...) ","grDevices","base","4.0.5"
"dev.copy2pdf","closure","function","TRUE","FALSE","(..., out.type = ""pdf"") ","grDevices","base","4.0.5"
"dev.cur","closure","function","TRUE","FALSE","() ","grDevices","base","4.0.5"
"dev.flush","closure","function","TRUE","FALSE","(level = 1L) ","grDevices","base","4.0.5"
"dev.hold","closure","function","TRUE","FALSE","(level = 1L) ","grDevices","base","4.0.5"
"dev.interactive","closure","function","TRUE","FALSE","(orNone = FALSE) ","grDevices","base","4.0.5"
"dev.list","closure","function","TRUE","FALSE","() ","grDevices","base","4.0.5"
"dev.new","closure","function","TRUE","FALSE","(..., noRStudioGD = FALSE) ","grDevices","base","4.0.5"
"dev.next","closure","function","TRUE","FALSE","(which = dev.cur()) ","grDevices","base","4.0.5"
"dev.off","closure","function","TRUE","FALSE","(which = dev.cur()) ","grDevices","base","4.0.5"
"dev.prev","closure","function","TRUE","FALSE","(which = dev.cur()) ","grDevices","base","4.0.5"
"dev.print","closure","function","TRUE","FALSE","(device = postscript, ...) ","grDevices","base","4.0.5"
"dev.set","closure","function","TRUE","FALSE","(which = dev.next()) ","grDevices","base","4.0.5"
"dev.size","closure","function","TRUE","FALSE","(units = c(""in"", ""cm"", ""px"")) ","grDevices","base","4.0.5"
"dev2bitmap","closure","function","TRUE","FALSE","(file, type = ""png16m"", height = 7, width = 7, res = 72,     units = ""in"", pointsize, ..., method = c(""postscript"", ""pdf""),     taa = NA, gaa = NA) ","grDevices","base","4.0.5"
"devAskNewPage","closure","function","TRUE","FALSE","(ask = NULL) ","grDevices","base","4.0.5"
"deviceIsInteractive","closure","function","TRUE","FALSE","(name = NULL) ","grDevices","base","4.0.5"
"embedFonts","closure","function","TRUE","FALSE","(file, format, outfile = file, fontpaths = character(),     options = character()) ","grDevices","base","4.0.5"
"extendrange","closure","function","TRUE","FALSE","(x, r = range(x, na.rm = TRUE), f = 0.05) ","grDevices","base","4.0.5"
"getGraphicsEvent","closure","function","TRUE","FALSE","(prompt = ""Waiting for input"", onMouseDown = NULL, onMouseMove = NULL,     onMouseUp = NULL, onKeybd = NULL, onIdle = NULL, consolePrompt = prompt) ","grDevices","base","4.0.5"
"getGraphicsEventEnv","closure","function","TRUE","FALSE","(which = dev.cur()) ","grDevices","base","4.0.5"
"grSoftVersion","closure","function","TRUE","FALSE","() ","grDevices","base","4.0.5"
"graphics.off","closure","function","TRUE","FALSE","() ","grDevices","base","4.0.5"
"gray","closure","function","TRUE","FALSE","(level, alpha) ","grDevices","base","4.0.5"
"gray.colors","closure","function","TRUE","FALSE","(n, start = 0.3, end = 0.9, gamma = 2.2, alpha, rev = FALSE) ","grDevices","base","4.0.5"
"grey","closure","function","TRUE","FALSE","(level, alpha) ","grDevices","base","4.0.5"
"grey.colors","closure","function","TRUE","FALSE","(n, start = 0.3, end = 0.9, gamma = 2.2, alpha, rev = FALSE) ","grDevices","base","4.0.5"
"hcl","closure","function","TRUE","FALSE","(h = 0, c = 35, l = 85, alpha, fixup = TRUE) ","grDevices","base","4.0.5"
"hcl.colors","closure","function","TRUE","FALSE","(n, palette = ""viridis"", alpha = NULL, rev = FALSE,     fixup = TRUE) ","grDevices","base","4.0.5"
"hcl.pals","closure","function","TRUE","FALSE","(type = NULL) ","grDevices","base","4.0.5"
"heat.colors","closure","function","TRUE","FALSE","(n, alpha, rev = FALSE) ","grDevices","base","4.0.5"
"hsv","closure","function","TRUE","FALSE","(h = 1, s = 1, v = 1, alpha) ","grDevices","base","4.0.5"
"is.raster","closure","function","TRUE","FALSE","(x) ","grDevices","base","4.0.5"
"jpeg","closure","function","TRUE","FALSE","(filename = ""Rplot%03d.jpeg"", width = 480, height = 480,     units = ""px"", pointsize = 12, quality = 75, bg = ""white"",     res = NA, ..., type = c(""cairo"", ""Xlib"", ""quartz""), antialias) ","grDevices","base","4.0.5"
"make.rgb","closure","function","TRUE","FALSE","(red, green, blue, name = NULL, white = ""D65"", gamma = 2.2) ","grDevices","base","4.0.5"
"n2mfrow","closure","function","TRUE","FALSE","(nr.plots, asp = 1) ","grDevices","base","4.0.5"
"nclass.FD","closure","function","TRUE","FALSE","(x) ","grDevices","base","4.0.5"
"nclass.Sturges","closure","function","TRUE","FALSE","(x) ","grDevices","base","4.0.5"
"nclass.scott","closure","function","TRUE","FALSE","(x) ","grDevices","base","4.0.5"
"palette","closure","function","TRUE","FALSE","(value) ","grDevices","base","4.0.5"
"palette.colors","closure","function","TRUE","FALSE","(n = NULL, palette = ""Okabe-Ito"", alpha, recycle = FALSE) ","grDevices","base","4.0.5"
"palette.pals","closure","function","TRUE","FALSE","() ","grDevices","base","4.0.5"
"pdf","closure","function","TRUE","FALSE","(file = if (onefile) ""Rplots.pdf"" else ""Rplot%03d.pdf"",     width, height, onefile, family, title, fonts, version, paper,     encoding, bg, fg, pointsize, pagecentre, colormodel, useDingbats,     useKerning, fillOddEven, compress) ","grDevices","base","4.0.5"
"pdf.options","closure","function","TRUE","FALSE","(..., reset = FALSE) ","grDevices","base","4.0.5"
"pdfFonts","closure","function","TRUE","FALSE","(...) ","grDevices","base","4.0.5"
"pictex","closure","function","TRUE","FALSE","(file = ""Rplots.tex"", width = 5, height = 4, debug = FALSE,     bg = ""white"", fg = ""black"") ","grDevices","base","4.0.5"
"png","closure","function","TRUE","FALSE","(filename = ""Rplot%03d.png"", width = 480, height = 480,     units = ""px"", pointsize = 12, bg = ""white"", res = NA, ...,     type = c(""cairo"", ""cairo-png"", ""Xlib"", ""quartz""), antialias) ","grDevices","base","4.0.5"
"postscript","closure","function","TRUE","FALSE","(file = if (onefile) ""Rplots.ps"" else ""Rplot%03d.ps"",     onefile, family, title, fonts, encoding, bg, fg, width, height,     horizontal, pointsize, paper, pagecentre, print.it, command,     colormodel, useKerning, fillOddEven) ","grDevices","base","4.0.5"
"postscriptFonts","closure","function","TRUE","FALSE","(...) ","grDevices","base","4.0.5"
"ps.options","closure","function","TRUE","FALSE","(..., reset = FALSE, override.check = FALSE) ","grDevices","base","4.0.5"
"quartz","closure","function","TRUE","FALSE","(title, width, height, pointsize, family, antialias,     type, file = NULL, bg, canvas, dpi) ","grDevices","base","4.0.5"
"quartz.options","closure","function","TRUE","FALSE","(..., reset = FALSE) ","grDevices","base","4.0.5"
"quartz.save","closure","function","TRUE","FALSE","(file, type = ""png"", device = dev.cur(), dpi = 100,     ...) ","grDevices","base","4.0.5"
"quartzFont","closure","function","TRUE","FALSE","(family) ","grDevices","base","4.0.5"
"quartzFonts","closure","function","TRUE","FALSE","(...) ","grDevices","base","4.0.5"
"rainbow","closure","function","TRUE","FALSE","(n, s = 1, v = 1, start = 0, end = max(1, n - 1)/n,     alpha, rev = FALSE) ","grDevices","base","4.0.5"
"recordGraphics","closure","function","TRUE","FALSE","(expr, list, env) ","grDevices","base","4.0.5"
"recordPlot","closure","function","TRUE","FALSE","(load = NULL, attach = NULL) ","grDevices","base","4.0.5"
"replayPlot","closure","function","TRUE","FALSE","(x, reloadPkgs = FALSE) ","grDevices","base","4.0.5"
"rgb","closure","function","TRUE","FALSE","(red, green, blue, alpha, names = NULL, maxColorValue = 1) ","grDevices","base","4.0.5"
"rgb2hsv","closure","function","TRUE","FALSE","(r, g = NULL, b = NULL, maxColorValue = 255) ","grDevices","base","4.0.5"
"savePlot","closure","function","TRUE","FALSE","(filename = paste0(""Rplot."", type), type = c(""png"",     ""jpeg"", ""tiff"", ""bmp""), device = dev.cur()) ","grDevices","base","4.0.5"
"setEPS","closure","function","TRUE","FALSE","(...) ","grDevices","base","4.0.5"
"setGraphicsEventEnv","closure","function","TRUE","FALSE","(which = dev.cur(), env) ","grDevices","base","4.0.5"
"setGraphicsEventHandlers","closure","function","TRUE","FALSE","(which = dev.cur(), ...) ","grDevices","base","4.0.5"
"setPS","closure","function","TRUE","FALSE","(...) ","grDevices","base","4.0.5"
"svg","closure","function","TRUE","FALSE","(filename = if (onefile) ""Rplots.svg"" else ""Rplot%03d.svg"",     width = 7, height = 7, pointsize = 12, onefile = FALSE, family = ""sans"",     bg = ""white"", antialias = c(""default"", ""none"", ""gray"", ""subpixel""),     symbolfamily) ","grDevices","base","4.0.5"
"terrain.colors","closure","function","TRUE","FALSE","(n, alpha, rev = FALSE) ","grDevices","base","4.0.5"
"tiff","closure","function","TRUE","FALSE","(filename = ""Rplot%03d.tiff"", width = 480, height = 480,     units = ""px"", pointsize = 12, compression = c(""none"", ""rle"",         ""lzw"", ""jpeg"", ""zip"", ""lzw+p"", ""zip+p""), bg = ""white"",     res = NA, ..., type = c(""cairo"", ""Xlib"", ""quartz""), antialias) ","grDevices","base","4.0.5"
"topo.colors","closure","function","TRUE","FALSE","(n, alpha, rev = FALSE) ","grDevices","base","4.0.5"
"trans3d","closure","function","TRUE","FALSE","(x, y, z, pmat) ","grDevices","base","4.0.5"
"x11","closure","function","TRUE","FALSE","(display = """", width, height, pointsize, gamma, bg,     canvas, fonts, family, xpos, ypos, title, type, antialias,     symbolfamily) ","grDevices","base","4.0.5"
"xfig","closure","function","TRUE","FALSE","(file = if (onefile) ""Rplots.fig"" else ""Rplot%03d.fig"",     onefile = FALSE, encoding = ""none"", paper = ""default"", horizontal = TRUE,     width = 0, height = 0, family = ""Helvetica"", pointsize = 12,     bg = ""transparent"", fg = ""black"", pagecentre = TRUE, defaultfont = FALSE,     textspecial = FALSE) ","grDevices","base","4.0.5"
"xy.coords","closure","function","TRUE","FALSE","(x, y = NULL, xlab = NULL, ylab = NULL, log = NULL,     recycle = FALSE, setLab = TRUE) ","grDevices","base","4.0.5"
"xyTable","closure","function","TRUE","FALSE","(x, y = NULL, digits) ","grDevices","base","4.0.5"
"xyz.coords","closure","function","TRUE","FALSE","(x, y = NULL, z = NULL, xlab = NULL, ylab = NULL, zlab = NULL,     log = NULL, recycle = FALSE, setLab = TRUE) ","grDevices","base","4.0.5"
".filled.contour","closure","function","TRUE","FALSE","(x, y, z, levels, col) ","graphics","base","4.0.5"
"Axis","closure","function","TRUE","FALSE","(x = NULL, at = NULL, ..., side, labels = NULL) ","graphics","base","4.0.5"
"abline","closure","function","TRUE","FALSE","(a = NULL, b = NULL, h = NULL, v = NULL, reg = NULL,     coef = NULL, untf = FALSE, ...) ","graphics","base","4.0.5"
"arrows","closure","function","TRUE","FALSE","(x0, y0, x1 = x0, y1 = y0, length = 0.25, angle = 30,     code = 2, col = par(""fg""), lty = par(""lty""), lwd = par(""lwd""),     ...) ","graphics","base","4.0.5"
"assocplot","closure","function","TRUE","FALSE","(x, col = c(""black"", ""red""), space = 0.3, main = NULL,     xlab = NULL, ylab = NULL) ","graphics","base","4.0.5"
"axTicks","closure","function","TRUE","FALSE","(side, axp = NULL, usr = NULL, log = NULL, nintLog = NULL) ","graphics","base","4.0.5"
"axis","closure","function","TRUE","FALSE","(side, at = NULL, labels = TRUE, tick = TRUE, line = NA,     pos = NA, outer = FALSE, font = NA, lty = ""solid"", lwd = 1,     lwd.ticks = lwd, col = NULL, col.ticks = NULL, hadj = NA,     padj = NA, gap.axis = NA, ...) ","graphics","base","4.0.5"
"axis.Date","closure","function","TRUE","FALSE","(side, x, at, format, labels = TRUE, ...) ","graphics","base","4.0.5"
"axis.POSIXct","closure","function","TRUE","FALSE","(side, x, at, format, labels = TRUE, ...) ","graphics","base","4.0.5"
"barplot","closure","function","TRUE","FALSE","(height, ...) ","graphics","base","4.0.5"
"barplot.default","closure","function","TRUE","FALSE","(height, width = 1, space = NULL, names.arg = NULL,     legend.text = NULL, beside = FALSE, horiz = FALSE, density = NULL,     angle = 45, col = NULL, border = par(""fg""), main = NULL,     sub = NULL, xlab = NULL, ylab = NULL, xlim = NULL, ylim = NULL,     xpd = TRUE, log = """", axes = TRUE, axisnames = TRUE, cex.axis = par(""cex.axis""),     cex.names = par(""cex.axis""), inside = TRUE, plot = TRUE,     axis.lty = 0, offset = 0, add = FALSE, ann = !add && par(""ann""),     args.legend = NULL, ...) ","graphics","base","4.0.5"
"box","closure","function","TRUE","FALSE","(which = ""plot"", lty = ""solid"", ...) ","graphics","base","4.0.5"
"boxplot","closure","function","TRUE","FALSE","(x, ...) ","graphics","base","4.0.5"
"boxplot.default","closure","function","TRUE","FALSE","(x, ..., range = 1.5, width = NULL, varwidth = FALSE,     notch = FALSE, outline = TRUE, names, plot = TRUE, border = par(""fg""),     col = ""lightgray"", log = """", pars = list(boxwex = 0.8, staplewex = 0.5,         outwex = 0.5), ann = !add, horizontal = FALSE, add = FALSE,     at = NULL) ","graphics","base","4.0.5"
"boxplot.matrix","closure","function","TRUE","FALSE","(x, use.cols = TRUE, ...) ","graphics","base","4.0.5"
"bxp","closure","function","TRUE","FALSE","(z, notch = FALSE, width = NULL, varwidth = FALSE, outline = TRUE,     notch.frac = 0.5, log = """", border = par(""fg""), pars = NULL,     frame.plot = axes, horizontal = FALSE, ann = TRUE, add = FALSE,     at = NULL, show.names = NULL, ...) ","graphics","base","4.0.5"
"cdplot","closure","function","TRUE","FALSE","(x, ...) ","graphics","base","4.0.5"
"clip","closure","function","TRUE","FALSE","(x1, x2, y1, y2) ","graphics","base","4.0.5"
"close.screen","closure","function","TRUE","FALSE","(n, all.screens = FALSE) ","graphics","base","4.0.5"
"co.intervals","closure","function","TRUE","FALSE","(x, number = 6, overlap = 0.5) ","graphics","base","4.0.5"
"contour","closure","function","TRUE","FALSE","(x, ...) ","graphics","base","4.0.5"
"contour.default","closure","function","TRUE","FALSE","(x = seq(0, 1, length.out = nrow(z)), y = seq(0, 1,     length.out = ncol(z)), z, nlevels = 10, levels = pretty(zlim,     nlevels), labels = NULL, xlim = range(x, finite = TRUE),     ylim = range(y, finite = TRUE), zlim = range(z, finite = TRUE),     labcex = 0.6, drawlabels = TRUE, method = ""flattest"", vfont,     axes = TRUE, frame.plot = axes, col = par(""fg""), lty = par(""lty""),     lwd = par(""lwd""), add = FALSE, ...) ","graphics","base","4.0.5"
"coplot","closure","function","TRUE","FALSE","(formula, data, given.values, panel = points, rows,     columns, show.given = TRUE, col = par(""fg""), pch = par(""pch""),     bar.bg = c(num = gray(0.8), fac = gray(0.95)), xlab = c(x.name,         paste(""Given :"", a.name)), ylab = c(y.name, paste(""Given :"",         b.name)), subscripts = FALSE, axlabels = function(f) abbreviate(levels(f)),     number = 6, overlap = 0.5, xlim, ylim, ...) ","graphics","base","4.0.5"
"curve","closure","function","TRUE","FALSE","(expr, from = NULL, to = NULL, n = 101, add = FALSE,     type = ""l"", xname = ""x"", xlab = xname, ylab = NULL, log = NULL,     xlim = NULL, ...) ","graphics","base","4.0.5"
"dotchart","closure","function","TRUE","FALSE","(x, labels = NULL, groups = NULL, gdata = NULL, offset = 1/8,     ann = par(""ann""), xaxt = par(""xaxt""), frame.plot = TRUE,     log = """", cex = par(""cex""), pt.cex = cex, pch = 21, gpch = 21,     bg = par(""bg""), color = par(""fg""), gcolor = par(""fg""), lcolor = ""gray"",     xlim = range(x[is.finite(x)]), main = NULL, xlab = NULL,     ylab = NULL, ...) ","graphics","base","4.0.5"
"erase.screen","closure","function","TRUE","FALSE","(n = cur.screen) ","graphics","base","4.0.5"
"filled.contour","closure","function","TRUE","FALSE","(x = seq(0, 1, length.out = nrow(z)), y = seq(0, 1,     length.out = ncol(z)), z, xlim = range(x, finite = TRUE),     ylim = range(y, finite = TRUE), zlim = range(z, finite = TRUE),     levels = pretty(zlim, nlevels), nlevels = 20, color.palette = function(n) hcl.colors(n,         ""YlOrRd"", rev = TRUE), col = color.palette(length(levels) -         1), plot.title, plot.axes, key.title, key.axes, asp = NA,     xaxs = ""i"", yaxs = ""i"", las = 1, axes = TRUE, frame.plot = axes,     ...) ","graphics","base","4.0.5"
"fourfoldplot","closure","function","TRUE","FALSE","(x, color = c(""#99CCFF"", ""#6699CC""), conf.level = 0.95,     std = c(""margins"", ""ind.max"", ""all.max""), margin = c(1, 2),     space = 0.2, main = NULL, mfrow = NULL, mfcol = NULL) ","graphics","base","4.0.5"
"frame","closure","function","TRUE","FALSE","() ","graphics","base","4.0.5"
"grconvertX","closure","function","TRUE","FALSE","(x, from = ""user"", to = ""user"") ","graphics","base","4.0.5"
"grconvertY","closure","function","TRUE","FALSE","(y, from = ""user"", to = ""user"") ","graphics","base","4.0.5"
"grid","closure","function","TRUE","FALSE","(nx = NULL, ny = nx, col = ""lightgray"", lty = ""dotted"",     lwd = par(""lwd""), equilogs = TRUE) ","graphics","base","4.0.5"
"hist","closure","function","TRUE","FALSE","(x, ...) ","graphics","base","4.0.5"
"hist.default","closure","function","TRUE","FALSE","(x, breaks = ""Sturges"", freq = NULL, probability = !freq,     include.lowest = TRUE, right = TRUE, density = NULL, angle = 45,     col = ""lightgray"", border = NULL, main = paste(""Histogram of"",         xname), xlim = range(breaks), ylim = NULL, xlab = xname,     ylab, axes = TRUE, plot = TRUE, labels = FALSE, nclass = NULL,     warn.unused = TRUE, ...) ","graphics","base","4.0.5"
"identify","closure","function","TRUE","FALSE","(x, ...) ","graphics","base","4.0.5"
"image","closure","function","TRUE","TRUE","(x, ...) ","graphics","base","4.0.5"
"image.default","closure","function","TRUE","FALSE","(x = seq(0, 1, length.out = nrow(z)), y = seq(0, 1,     length.out = ncol(z)), z, zlim = range(z[is.finite(z)]),     xlim = range(x), ylim = range(y), col = hcl.colors(12, ""YlOrRd"",         rev = TRUE), add = FALSE, xaxs = ""i"", yaxs = ""i"", xlab,     ylab, breaks, oldstyle = FALSE, useRaster, ...) ","graphics","base","4.0.5"
"layout","closure","function","TRUE","FALSE","(mat, widths = rep.int(1, ncol(mat)), heights = rep.int(1,     nrow(mat)), respect = FALSE) ","graphics","base","4.0.5"
"layout.show","closure","function","TRUE","FALSE","(n = 1) ","graphics","base","4.0.5"
"lcm","closure","function","TRUE","FALSE","(x) ","graphics","base","4.0.5"
"legend","closure","function","TRUE","FALSE","(x, y = NULL, legend, fill = NULL, col = par(""col""),     border = ""black"", lty, lwd, pch, angle = 45, density = NULL,     bty = ""o"", bg = par(""bg""), box.lwd = par(""lwd""), box.lty = par(""lty""),     box.col = par(""fg""), pt.bg = NA, cex = 1, pt.cex = cex, pt.lwd = lwd,     xjust = 0, yjust = 1, x.intersp = 1, y.intersp = 1, adj = c(0,         0.5), text.width = NULL, text.col = par(""col""), text.font = NULL,     merge = do.lines && has.pch, trace = FALSE, plot = TRUE,     ncol = 1, horiz = FALSE, title = NULL, inset = 0, xpd, title.col = text.col,     title.adj = 0.5, seg.len = 2) ","graphics","base","4.0.5"
"lines","closure","function","TRUE","FALSE","(x, ...) ","graphics","base","4.0.5"
"lines.default","closure","function","TRUE","FALSE","(x, y = NULL, type = ""l"", ...) ","graphics","base","4.0.5"
"locator","closure","function","TRUE","FALSE","(n = 512, type = ""n"", ...) ","graphics","base","4.0.5"
"matlines","closure","function","TRUE","FALSE","(x, y, type = ""l"", lty = 1:5, lwd = 1, pch = NULL, col = 1:6,     ...) ","graphics","base","4.0.5"
"matplot","closure","function","TRUE","FALSE","(x, y, type = ""p"", lty = 1:5, lwd = 1, lend = par(""lend""),     pch = NULL, col = 1:6, cex = NULL, bg = NA, xlab = NULL,     ylab = NULL, xlim = NULL, ylim = NULL, log = """", ..., add = FALSE,     verbose = getOption(""verbose"")) ","graphics","base","4.0.5"
"matpoints","closure","function","TRUE","FALSE","(x, y, type = ""p"", lty = 1:5, lwd = 1, pch = NULL, col = 1:6,     ...) ","graphics","base","4.0.5"
"mosaicplot","closure","function","TRUE","FALSE","(x, ...) ","graphics","base","4.0.5"
"mtext","closure","function","TRUE","FALSE","(text, side = 3, line = 0, outer = FALSE, at = NA, adj = NA,     padj = NA, cex = NA, col = NA, font = NA, ...) ","graphics","base","4.0.5"
"pairs","closure","function","TRUE","FALSE","(x, ...) ","graphics","base","4.0.5"
"pairs.default","closure","function","TRUE","FALSE","(x, labels, panel = points, ..., horInd = 1:nc, verInd = 1:nc,     lower.panel = panel, upper.panel = panel, diag.panel = NULL,     text.panel = textPanel, label.pos = 0.5 + has.diag/3, line.main = 3,     cex.labels = NULL, font.labels = 1, row1attop = TRUE, gap = 1,     log = """", horOdd = !row1attop, verOdd = !row1attop) ","graphics","base","4.0.5"
"panel.smooth","closure","function","TRUE","FALSE","(x, y, col = par(""col""), bg = NA, pch = par(""pch""),     cex = 1, col.smooth = 2, span = 2/3, iter = 3, ...) ","graphics","base","4.0.5"
"par","closure","function","TRUE","FALSE","(..., no.readonly = FALSE) ","graphics","base","4.0.5"
"persp","closure","function","TRUE","FALSE","(x, ...) ","graphics","base","4.0.5"
"pie","closure","function","TRUE","FALSE","(x, labels = names(x), edges = 200, radius = 0.8, clockwise = FALSE,     init.angle = if (clockwise) 90 else 0, density = NULL, angle = 45,     col = NULL, border = NULL, lty = NULL, main = NULL, ...) ","graphics","base","4.0.5"
"plot","closure","function","TRUE","FALSE","(x, y, ...) ","graphics","base","4.0.5"
"plot.default","closure","function","TRUE","FALSE","(x, y = NULL, type = ""p"", xlim = NULL, ylim = NULL,     log = """", main = NULL, sub = NULL, xlab = NULL, ylab = NULL,     ann = par(""ann""), axes = TRUE, frame.plot = axes, panel.first = NULL,     panel.last = NULL, asp = NA, xgap.axis = NA, ygap.axis = NA,     ...) ","graphics","base","4.0.5"
"plot.design","closure","function","TRUE","FALSE","(x, y = NULL, fun = mean, data = NULL, ..., ylim = NULL,     xlab = ""Factors"", ylab = NULL, main = NULL, ask = NULL, xaxt = par(""xaxt""),     axes = TRUE, xtick = FALSE) ","graphics","base","4.0.5"
"plot.function","closure","function","TRUE","FALSE","(x, y = 0, to = 1, from = y, xlim = NULL, ylab = NULL,     ...) ","graphics","base","4.0.5"
"plot.new","closure","function","TRUE","FALSE","() ","graphics","base","4.0.5"
"plot.window","closure","function","TRUE","FALSE","(xlim, ylim, log = """", asp = NA, ...) ","graphics","base","4.0.5"
"plot.xy","closure","function","TRUE","FALSE","(xy, type, pch = par(""pch""), lty = par(""lty""), col = par(""col""),     bg = NA, cex = 1, lwd = par(""lwd""), ...) ","graphics","base","4.0.5"
"points","closure","function","TRUE","FALSE","(x, ...) ","graphics","base","4.0.5"
"points.default","closure","function","TRUE","FALSE","(x, y = NULL, type = ""p"", ...) ","graphics","base","4.0.5"
"polygon","closure","function","TRUE","FALSE","(x, y = NULL, density = NULL, angle = 45, border = NULL,     col = NA, lty = par(""lty""), ..., fillOddEven = FALSE) ","graphics","base","4.0.5"
"polypath","closure","function","TRUE","FALSE","(x, y = NULL, border = NULL, col = NA, lty = par(""lty""),     rule = ""winding"", ...) ","graphics","base","4.0.5"
"rasterImage","closure","function","TRUE","FALSE","(image, xleft, ybottom, xright, ytop, angle = 0, interpolate = TRUE,     ...) ","graphics","base","4.0.5"
"rect","closure","function","TRUE","FALSE","(xleft, ybottom, xright, ytop, density = NULL, angle = 45,     col = NA, border = NULL, lty = par(""lty""), lwd = par(""lwd""),     ...) ","graphics","base","4.0.5"
"rug","closure","function","TRUE","FALSE","(x, ticksize = 0.03, side = 1, lwd = 0.5, col = par(""fg""),     quiet = getOption(""warn"") < 0, ...) ","graphics","base","4.0.5"
"screen","closure","function","TRUE","FALSE","(n = cur.screen, new = TRUE) ","graphics","base","4.0.5"
"segments","closure","function","TRUE","FALSE","(x0, y0, x1 = x0, y1 = y0, col = par(""fg""), lty = par(""lty""),     lwd = par(""lwd""), ...) ","graphics","base","4.0.5"
"smoothScatter","closure","function","TRUE","FALSE","(x, y = NULL, nbin = 128, bandwidth, colramp = colorRampPalette(c(""white"",     blues9)), nrpoints = 100, ret.selection = FALSE, pch = ""."",     cex = 1, col = ""black"", transformation = function(x) x^0.25,     postPlotHook = box, xlab = NULL, ylab = NULL, xlim, ylim,     xaxs = par(""xaxs""), yaxs = par(""yaxs""), ...) ","graphics","base","4.0.5"
"spineplot","closure","function","TRUE","FALSE","(x, ...) ","graphics","base","4.0.5"
"split.screen","closure","function","TRUE","FALSE","(figs, screen, erase = TRUE) ","graphics","base","4.0.5"
"stars","closure","function","TRUE","FALSE","(x, full = TRUE, scale = TRUE, radius = TRUE, labels = dimnames(x)[[1L]],     locations = NULL, nrow = NULL, ncol = NULL, len = 1, key.loc = NULL,     key.labels = dimnames(x)[[2L]], key.xpd = TRUE, xlim = NULL,     ylim = NULL, flip.labels = NULL, draw.segments = FALSE, col.segments = 1L:n.seg,     col.stars = NA, col.lines = NA, axes = FALSE, frame.plot = axes,     main = NULL, sub = NULL, xlab = """", ylab = """", cex = 0.8,     lwd = 0.25, lty = par(""lty""), xpd = FALSE, mar = pmin(par(""mar""),         1.1 + c(2 * axes + (xlab != """"), 2 * axes + (ylab !=             """"), 1, 0)), add = FALSE, plot = TRUE, ...) ","graphics","base","4.0.5"
"stem","closure","function","TRUE","FALSE","(x, scale = 1, width = 80, atom = 1e-08) ","graphics","base","4.0.5"
"strheight","closure","function","TRUE","FALSE","(s, units = ""user"", cex = NULL, font = NULL, vfont = NULL,     ...) ","graphics","base","4.0.5"
"stripchart","closure","function","TRUE","FALSE","(x, ...) ","graphics","base","4.0.5"
"strwidth","closure","function","TRUE","FALSE","(s, units = ""user"", cex = NULL, font = NULL, vfont = NULL,     ...) ","graphics","base","4.0.5"
"sunflowerplot","closure","function","TRUE","FALSE","(x, ...) ","graphics","base","4.0.5"
"symbols","closure","function","TRUE","FALSE","(x, y = NULL, circles, squares, rectangles, stars, thermometers,     boxplots, inches = TRUE, add = FALSE, fg = par(""col""), bg = NA,     xlab = NULL, ylab = NULL, main = NULL, xlim = NULL, ylim = NULL,     ...) ","graphics","base","4.0.5"
"text","closure","function","TRUE","FALSE","(x, ...) ","graphics","base","4.0.5"
"text.default","closure","function","TRUE","FALSE","(x, y = NULL, labels = seq_along(x$x), adj = NULL, pos = NULL,     offset = 0.5, vfont = NULL, cex = 1, col = NULL, font = NULL,     ...) ","graphics","base","4.0.5"
"title","closure","function","TRUE","FALSE","(main = NULL, sub = NULL, xlab = NULL, ylab = NULL,     line = NA, outer = FALSE, ...) ","graphics","base","4.0.5"
"xinch","closure","function","TRUE","FALSE","(x = 1, warn.log = TRUE) ","graphics","base","4.0.5"
"xspline","closure","function","TRUE","FALSE","(x, y = NULL, shape = 0, open = TRUE, repEnds = TRUE,     draw = TRUE, border = par(""fg""), col = NA, ...) ","graphics","base","4.0.5"
"xyinch","closure","function","TRUE","FALSE","(xy = 1, warn.log = TRUE) ","graphics","base","4.0.5"
"yinch","closure","function","TRUE","FALSE","(y = 1, warn.log = TRUE) ","graphics","base","4.0.5"
"absolute.size","closure","function","TRUE","FALSE","(unit) ","grid","base","4.0.5"
"addGrob","closure","function","TRUE","FALSE","(gTree, child, gPath = NULL, strict = FALSE, grep = FALSE,     global = FALSE, warn = TRUE) ","grid","base","4.0.5"
"applyEdit","closure","function","TRUE","FALSE","(x, edit) ","grid","base","4.0.5"
"applyEdits","closure","function","TRUE","FALSE","(x, edits) ","grid","base","4.0.5"
"arcCurvature","closure","function","TRUE","FALSE","(theta) ","grid","base","4.0.5"
"arrow","closure","function","TRUE","FALSE","(angle = 30, length = unit(0.25, ""inches""), ends = ""last"",     type = ""open"") ","grid","base","4.0.5"
"arrowsGrob","closure","function","TRUE","FALSE","(x = c(0.25, 0.75), y = 0.5, default.units = ""npc"",     grob = NULL, angle = 30, length = unit(0.25, ""inches""), ends = ""last"",     type = ""open"", name = NULL, gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"ascentDetails","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"bezierGrob","closure","function","TRUE","FALSE","(x = c(0, 0.5, 1, 0.5), y = c(0.5, 1, 0.5, 0), id = NULL,     id.lengths = NULL, default.units = ""npc"", arrow = NULL, name = NULL,     gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"bezierPoints","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"calcStringMetric","closure","function","TRUE","FALSE","(text) ","grid","base","4.0.5"
"childNames","closure","function","TRUE","FALSE","(gTree) ","grid","base","4.0.5"
"circleGrob","closure","function","TRUE","FALSE","(x = 0.5, y = 0.5, r = 0.5, default.units = ""npc"", name = NULL,     gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"clipGrob","closure","function","TRUE","FALSE","(x = unit(0.5, ""npc""), y = unit(0.5, ""npc""), width = unit(1,     ""npc""), height = unit(1, ""npc""), just = ""centre"", hjust = NULL,     vjust = NULL, default.units = ""npc"", name = NULL, vp = NULL) ","grid","base","4.0.5"
"convertHeight","closure","function","TRUE","FALSE","(x, unitTo, valueOnly = FALSE) ","grid","base","4.0.5"
"convertNative","closure","function","TRUE","FALSE","(unit, dimension = ""x"", type = ""location"") ","grid","base","4.0.5"
"convertUnit","closure","function","TRUE","FALSE","(x, unitTo, axisFrom = ""x"", typeFrom = ""location"", axisTo = axisFrom,     typeTo = typeFrom, valueOnly = FALSE) ","grid","base","4.0.5"
"convertWidth","closure","function","TRUE","FALSE","(x, unitTo, valueOnly = FALSE) ","grid","base","4.0.5"
"convertX","closure","function","TRUE","FALSE","(x, unitTo, valueOnly = FALSE) ","grid","base","4.0.5"
"convertY","closure","function","TRUE","FALSE","(x, unitTo, valueOnly = FALSE) ","grid","base","4.0.5"
"current.parent","closure","function","TRUE","FALSE","(n = 1) ","grid","base","4.0.5"
"current.rotation","closure","function","TRUE","FALSE","() ","grid","base","4.0.5"
"current.transform","closure","function","TRUE","FALSE","() ","grid","base","4.0.5"
"current.viewport","closure","function","TRUE","FALSE","() ","grid","base","4.0.5"
"current.vpPath","closure","function","TRUE","FALSE","() ","grid","base","4.0.5"
"current.vpTree","closure","function","TRUE","FALSE","(all = TRUE) ","grid","base","4.0.5"
"curveGrob","closure","function","TRUE","FALSE","(x1, y1, x2, y2, default.units = ""npc"", curvature = 1,     angle = 90, ncp = 1, shape = 0.5, square = TRUE, squareShape = 1,     inflect = FALSE, arrow = NULL, open = TRUE, debug = FALSE,     name = NULL, gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"dataViewport","closure","function","TRUE","FALSE","(xData = NULL, yData = NULL, xscale = NULL, yscale = NULL,     extension = 0.05, ...) ","grid","base","4.0.5"
"delayGrob","closure","function","TRUE","FALSE","(expr, list, name = NULL, gp = NULL, vp = NULL) ","grid","base","4.0.5"
"depth","closure","function","TRUE","FALSE","(x, ...) ","grid","base","4.0.5"
"descentDetails","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"deviceDim","closure","function","TRUE","FALSE","(w, h, valueOnly = FALSE) ","grid","base","4.0.5"
"deviceLoc","closure","function","TRUE","FALSE","(x, y, valueOnly = FALSE) ","grid","base","4.0.5"
"downViewport","closure","function","TRUE","FALSE","(name, strict = FALSE, recording = TRUE) ","grid","base","4.0.5"
"draw.details","closure","function","TRUE","FALSE","(x, recording) ","grid","base","4.0.5"
"drawDetails","closure","function","TRUE","FALSE","(x, recording) ","grid","base","4.0.5"
"editDetails","closure","function","TRUE","FALSE","(x, specs) ","grid","base","4.0.5"
"editGrob","closure","function","TRUE","FALSE","(grob, gPath = NULL, ..., strict = FALSE, grep = FALSE,     global = FALSE, warn = TRUE) ","grid","base","4.0.5"
"emptyCoords","list","list","TRUE","FALSE","NA","grid","base","4.0.5"
"engine.display.list","closure","function","TRUE","FALSE","(on = TRUE) ","grid","base","4.0.5"
"explode","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"forceGrob","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"frameGrob","closure","function","TRUE","FALSE","(layout = NULL, name = NULL, gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"functionGrob","closure","function","TRUE","FALSE","(f, n = 101, range = ""x"", units = ""native"", name = NULL,     gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"gEdit","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"gEditList","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"gList","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"gPath","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"gTree","closure","function","TRUE","FALSE","(..., name = NULL, gp = NULL, vp = NULL, children = NULL,     childrenvp = NULL, cl = NULL) ","grid","base","4.0.5"
"get.gpar","closure","function","TRUE","FALSE","(names = NULL) ","grid","base","4.0.5"
"getGrob","closure","function","TRUE","FALSE","(gTree, gPath, strict = FALSE, grep = FALSE, global = FALSE) ","grid","base","4.0.5"
"getNames","closure","function","TRUE","FALSE","() ","grid","base","4.0.5"
"gpar","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"grid.DLapply","closure","function","TRUE","FALSE","(FUN, ...) ","grid","base","4.0.5"
"grid.abline","closure","function","TRUE","FALSE","(intercept = 0, slope = 1, ...) ","grid","base","4.0.5"
"grid.add","closure","function","TRUE","FALSE","(gPath, child, strict = FALSE, grep = FALSE, global = FALSE,     allDevices = FALSE, redraw = TRUE) ","grid","base","4.0.5"
"grid.arrows","closure","function","TRUE","FALSE","(x = c(0.25, 0.75), y = 0.5, default.units = ""npc"",     grob = NULL, angle = 30, length = unit(0.25, ""inches""), ends = ""last"",     type = ""open"", name = NULL, gp = gpar(), draw = TRUE, vp = NULL) ","grid","base","4.0.5"
"grid.bezier","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"grid.cap","closure","function","TRUE","FALSE","() ","grid","base","4.0.5"
"grid.circle","closure","function","TRUE","FALSE","(x = 0.5, y = 0.5, r = 0.5, default.units = ""npc"", name = NULL,     gp = gpar(), draw = TRUE, vp = NULL) ","grid","base","4.0.5"
"grid.clip","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"grid.collection","closure","function","TRUE","FALSE","(..., gp = gpar(), draw = TRUE, vp = NULL) ","grid","base","4.0.5"
"grid.convert","closure","function","TRUE","FALSE","(x, unitTo, axisFrom = ""x"", typeFrom = ""location"", axisTo = axisFrom,     typeTo = typeFrom, valueOnly = FALSE) ","grid","base","4.0.5"
"grid.convertHeight","closure","function","TRUE","FALSE","(x, unitTo, valueOnly = FALSE) ","grid","base","4.0.5"
"grid.convertWidth","closure","function","TRUE","FALSE","(x, unitTo, valueOnly = FALSE) ","grid","base","4.0.5"
"grid.convertX","closure","function","TRUE","FALSE","(x, unitTo, valueOnly = FALSE) ","grid","base","4.0.5"
"grid.convertY","closure","function","TRUE","FALSE","(x, unitTo, valueOnly = FALSE) ","grid","base","4.0.5"
"grid.copy","closure","function","TRUE","FALSE","(grob) ","grid","base","4.0.5"
"grid.curve","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"grid.delay","closure","function","TRUE","FALSE","(expr, list, name = NULL, gp = NULL, vp = NULL) ","grid","base","4.0.5"
"grid.display.list","closure","function","TRUE","FALSE","(on = TRUE) ","grid","base","4.0.5"
"grid.draw","closure","function","TRUE","FALSE","(x, recording = TRUE) ","grid","base","4.0.5"
"grid.edit","closure","function","TRUE","FALSE","(gPath, ..., strict = FALSE, grep = FALSE, global = FALSE,     allDevices = FALSE, redraw = TRUE) ","grid","base","4.0.5"
"grid.force","closure","function","TRUE","FALSE","(x, ...) ","grid","base","4.0.5"
"grid.frame","closure","function","TRUE","FALSE","(layout = NULL, name = NULL, gp = gpar(), vp = NULL,     draw = TRUE) ","grid","base","4.0.5"
"grid.function","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"grid.gedit","closure","function","TRUE","FALSE","(..., grep = TRUE, global = TRUE) ","grid","base","4.0.5"
"grid.get","closure","function","TRUE","FALSE","(gPath, strict = FALSE, grep = FALSE, global = FALSE,     allDevices = FALSE) ","grid","base","4.0.5"
"grid.gget","closure","function","TRUE","FALSE","(..., grep = TRUE, global = TRUE) ","grid","base","4.0.5"
"grid.grab","closure","function","TRUE","FALSE","(warn = 2, wrap = wrap.grobs, wrap.grobs = FALSE, ...) ","grid","base","4.0.5"
"grid.grabExpr","closure","function","TRUE","FALSE","(expr, warn = 2, wrap = wrap.grobs, wrap.grobs = FALSE,     width = 7, height = 7, device = offscreen, ...) ","grid","base","4.0.5"
"grid.gremove","closure","function","TRUE","FALSE","(..., grep = TRUE, global = TRUE) ","grid","base","4.0.5"
"grid.grep","closure","function","TRUE","FALSE","(path, x = NULL, grobs = TRUE, viewports = FALSE, strict = FALSE,     grep = FALSE, global = FALSE, no.match = character()) ","grid","base","4.0.5"
"grid.grill","closure","function","TRUE","FALSE","(h = unit(seq(0.25, 0.75, 0.25), ""npc""), v = unit(seq(0.25,     0.75, 0.25), ""npc""), default.units = ""npc"", gp = gpar(col = ""grey""),     vp = NULL) ","grid","base","4.0.5"
"grid.grob","closure","function","TRUE","FALSE","(list.struct, cl = NULL, draw = TRUE) ","grid","base","4.0.5"
"grid.layout","closure","function","TRUE","FALSE","(nrow = 1, ncol = 1, widths = unit(rep_len(1, ncol),     ""null""), heights = unit(rep_len(1, nrow), ""null""), default.units = ""null"",     respect = FALSE, just = ""centre"") ","grid","base","4.0.5"
"grid.legend","closure","function","TRUE","FALSE","(..., draw = TRUE) ","grid","base","4.0.5"
"grid.line.to","closure","function","TRUE","FALSE","(x = 1, y = 1, default.units = ""npc"", arrow = NULL,     name = NULL, gp = gpar(), draw = TRUE, vp = NULL) ","grid","base","4.0.5"
"grid.lines","closure","function","TRUE","FALSE","(x = unit(c(0, 1), ""npc""), y = unit(c(0, 1), ""npc""),     default.units = ""npc"", arrow = NULL, name = NULL, gp = gpar(),     draw = TRUE, vp = NULL) ","grid","base","4.0.5"
"grid.locator","closure","function","TRUE","FALSE","(unit = ""native"") ","grid","base","4.0.5"
"grid.ls","closure","function","TRUE","FALSE","(x = NULL, grobs = TRUE, viewports = FALSE, fullNames = FALSE,     recursive = TRUE, print = TRUE, flatten = TRUE, ...) ","grid","base","4.0.5"
"grid.move.to","closure","function","TRUE","FALSE","(x = 0, y = 0, default.units = ""npc"", name = NULL, draw = TRUE,     vp = NULL) ","grid","base","4.0.5"
"grid.multipanel","closure","function","TRUE","FALSE","(x = stats::runif(90), y = stats::runif(90), z = stats::runif(90),     nplots = 9, nrow = 5, ncol = 2, newpage = TRUE, vp = NULL) ","grid","base","4.0.5"
"grid.newpage","closure","function","TRUE","FALSE","(recording = TRUE) ","grid","base","4.0.5"
"grid.null","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"grid.pack","closure","function","TRUE","FALSE","(gPath, grob, redraw = TRUE, side = NULL, row = NULL,     row.before = NULL, row.after = NULL, col = NULL, col.before = NULL,     col.after = NULL, width = NULL, height = NULL, force.width = FALSE,     force.height = FALSE, border = NULL, dynamic = FALSE) ","grid","base","4.0.5"
"grid.panel","closure","function","TRUE","FALSE","(x = stats::runif(10), y = stats::runif(10), zrange = c(0,     1), zbin = stats::runif(2), xscale = extendrange(x), yscale = extendrange(y),     axis.left = TRUE, axis.left.label = TRUE, axis.right = FALSE,     axis.right.label = TRUE, axis.bottom = TRUE, axis.bottom.label = TRUE,     axis.top = FALSE, axis.top.label = TRUE, vp = NULL) ","grid","base","4.0.5"
"grid.path","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"grid.place","closure","function","TRUE","FALSE","(gPath, grob, row = 1, col = 1, redraw = TRUE) ","grid","base","4.0.5"
"grid.plot.and.legend","closure","function","TRUE","FALSE","() ","grid","base","4.0.5"
"grid.points","closure","function","TRUE","FALSE","(x = stats::runif(10), y = stats::runif(10), pch = 1,     size = unit(1, ""char""), default.units = ""native"", name = NULL,     gp = gpar(), draw = TRUE, vp = NULL) ","grid","base","4.0.5"
"grid.polygon","closure","function","TRUE","FALSE","(x = c(0, 0.5, 1, 0.5), y = c(0.5, 1, 0.5, 0), id = NULL,     id.lengths = NULL, default.units = ""npc"", name = NULL, gp = gpar(),     draw = TRUE, vp = NULL) ","grid","base","4.0.5"
"grid.polyline","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"grid.pretty","closure","function","TRUE","FALSE","(range) ","grid","base","4.0.5"
"grid.raster","closure","function","TRUE","FALSE","(image, x = unit(0.5, ""npc""), y = unit(0.5, ""npc""),     width = NULL, height = NULL, just = ""centre"", hjust = NULL,     vjust = NULL, interpolate = TRUE, default.units = ""npc"",     name = NULL, gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"grid.record","closure","function","TRUE","FALSE","(expr, list, name = NULL, gp = NULL, vp = NULL) ","grid","base","4.0.5"
"grid.rect","closure","function","TRUE","FALSE","(x = unit(0.5, ""npc""), y = unit(0.5, ""npc""), width = unit(1,     ""npc""), height = unit(1, ""npc""), just = ""centre"", hjust = NULL,     vjust = NULL, default.units = ""npc"", name = NULL, gp = gpar(),     draw = TRUE, vp = NULL) ","grid","base","4.0.5"
"grid.refresh","closure","function","TRUE","FALSE","() ","grid","base","4.0.5"
"grid.remove","closure","function","TRUE","FALSE","(gPath, warn = TRUE, strict = FALSE, grep = FALSE, global = FALSE,     allDevices = FALSE, redraw = TRUE) ","grid","base","4.0.5"
"grid.reorder","closure","function","TRUE","FALSE","(gPath, order, back = TRUE, grep = FALSE, redraw = TRUE) ","grid","base","4.0.5"
"grid.revert","closure","function","TRUE","FALSE","(x, ...) ","grid","base","4.0.5"
"grid.roundrect","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"grid.segments","closure","function","TRUE","FALSE","(x0 = unit(0, ""npc""), y0 = unit(0, ""npc""), x1 = unit(1,     ""npc""), y1 = unit(1, ""npc""), default.units = ""npc"", arrow = NULL,     name = NULL, gp = gpar(), draw = TRUE, vp = NULL) ","grid","base","4.0.5"
"grid.set","closure","function","TRUE","FALSE","(gPath, newGrob, strict = FALSE, grep = FALSE, redraw = TRUE) ","grid","base","4.0.5"
"grid.show.layout","closure","function","TRUE","FALSE","(l, newpage = TRUE, vp.ex = 0.8, bg = ""light grey"",     cell.border = ""blue"", cell.fill = ""light blue"", cell.label = TRUE,     label.col = ""blue"", unit.col = ""red"", vp = NULL, ...) ","grid","base","4.0.5"
"grid.show.viewport","closure","function","TRUE","FALSE","(v, parent.layout = NULL, newpage = TRUE, vp.ex = 0.8,     border.fill = ""light grey"", vp.col = ""blue"", vp.fill = ""light blue"",     scale.col = ""red"", vp = NULL) ","grid","base","4.0.5"
"grid.strip","closure","function","TRUE","FALSE","(label = ""whatever"", range.full = c(0, 1), range.thumb = c(0.3,     0.6), fill = ""#FFBF00"", thumb = ""#FF8000"", vp = NULL) ","grid","base","4.0.5"
"grid.text","closure","function","TRUE","FALSE","(label, x = unit(0.5, ""npc""), y = unit(0.5, ""npc""),     just = ""centre"", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE,     default.units = ""npc"", name = NULL, gp = gpar(), draw = TRUE,     vp = NULL) ","grid","base","4.0.5"
"grid.xaxis","closure","function","TRUE","FALSE","(at = NULL, label = TRUE, main = TRUE, edits = NULL,     name = NULL, gp = gpar(), draw = TRUE, vp = NULL) ","grid","base","4.0.5"
"grid.xspline","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"grid.yaxis","closure","function","TRUE","FALSE","(at = NULL, label = TRUE, main = TRUE, edits = NULL,     name = NULL, gp = gpar(), draw = TRUE, vp = NULL) ","grid","base","4.0.5"
"grob","closure","function","TRUE","FALSE","(..., name = NULL, gp = NULL, vp = NULL, cl = NULL) ","grid","base","4.0.5"
"grobAscent","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"grobCoords","closure","function","TRUE","FALSE","(x, closed, ...) ","grid","base","4.0.5"
"grobDescent","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"grobHeight","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"grobName","closure","function","TRUE","FALSE","(grob = NULL, prefix = ""GRID"") ","grid","base","4.0.5"
"grobPathListing","closure","function","TRUE","FALSE","(x, ...) ","grid","base","4.0.5"
"grobPoints","closure","function","TRUE","FALSE","(x, closed, ...) ","grid","base","4.0.5"
"grobTree","closure","function","TRUE","FALSE","(..., name = NULL, gp = NULL, vp = NULL, childrenvp = NULL,     cl = NULL) ","grid","base","4.0.5"
"grobWidth","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"grobX","closure","function","TRUE","FALSE","(x, theta) ","grid","base","4.0.5"
"grobY","closure","function","TRUE","FALSE","(x, theta) ","grid","base","4.0.5"
"heightDetails","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"is.grob","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"is.unit","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"isEmptyCoords","closure","function","TRUE","FALSE","(coords) ","grid","base","4.0.5"
"layout.heights","closure","function","TRUE","FALSE","(lay) ","grid","base","4.0.5"
"layout.torture","closure","function","TRUE","FALSE","() ","grid","base","4.0.5"
"layout.widths","closure","function","TRUE","FALSE","(lay) ","grid","base","4.0.5"
"layoutRegion","closure","function","TRUE","FALSE","(layout.pos.row = 1, layout.pos.col = 1) ","grid","base","4.0.5"
"legendGrob","closure","function","TRUE","FALSE","(labels, nrow, ncol, byrow = FALSE, do.lines = has.lty ||     has.lwd, lines.first = TRUE, hgap = unit(1, ""lines""), vgap = unit(1,     ""lines""), default.units = ""lines"", pch, gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"lineToGrob","closure","function","TRUE","FALSE","(x = 1, y = 1, default.units = ""npc"", arrow = NULL,     name = NULL, gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"linesGrob","closure","function","TRUE","FALSE","(x = unit(c(0, 1), ""npc""), y = unit(c(0, 1), ""npc""),     default.units = ""npc"", arrow = NULL, name = NULL, gp = gpar(),     vp = NULL) ","grid","base","4.0.5"
"makeContent","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"makeContext","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"moveToGrob","closure","function","TRUE","FALSE","(x = 0, y = 0, default.units = ""npc"", name = NULL, vp = NULL) ","grid","base","4.0.5"
"nestedListing","closure","function","TRUE","FALSE","(x, gindent = ""  "", vpindent = gindent) ","grid","base","4.0.5"
"nullGrob","closure","function","TRUE","FALSE","(x = unit(0.5, ""npc""), y = unit(0.5, ""npc""), default.units = ""npc"",     name = NULL, vp = NULL) ","grid","base","4.0.5"
"packGrob","closure","function","TRUE","FALSE","(frame, grob, side = NULL, row = NULL, row.before = NULL,     row.after = NULL, col = NULL, col.before = NULL, col.after = NULL,     width = NULL, height = NULL, force.width = FALSE, force.height = FALSE,     border = NULL, dynamic = FALSE) ","grid","base","4.0.5"
"pathGrob","closure","function","TRUE","FALSE","(x, y, id = NULL, id.lengths = NULL, pathId = NULL,     pathId.lengths = NULL, rule = ""winding"", default.units = ""npc"",     name = NULL, gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"pathListing","closure","function","TRUE","FALSE","(x, gvpSep = "" | "", gAlign = TRUE) ","grid","base","4.0.5"
"placeGrob","closure","function","TRUE","FALSE","(frame, grob, row = NULL, col = NULL) ","grid","base","4.0.5"
"plotViewport","closure","function","TRUE","FALSE","(margins = c(5.1, 4.1, 4.1, 2.1), ...) ","grid","base","4.0.5"
"pointsGrob","closure","function","TRUE","FALSE","(x = stats::runif(10), y = stats::runif(10), pch = 1,     size = unit(1, ""char""), default.units = ""native"", name = NULL,     gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"polygonGrob","closure","function","TRUE","FALSE","(x = c(0, 0.5, 1, 0.5), y = c(0.5, 1, 0.5, 0), id = NULL,     id.lengths = NULL, default.units = ""npc"", name = NULL, gp = gpar(),     vp = NULL) ","grid","base","4.0.5"
"polylineGrob","closure","function","TRUE","FALSE","(x = unit(c(0, 1), ""npc""), y = unit(c(0, 1), ""npc""),     id = NULL, id.lengths = NULL, default.units = ""npc"", arrow = NULL,     name = NULL, gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"pop.viewport","closure","function","TRUE","FALSE","(n = 1, recording = TRUE) ","grid","base","4.0.5"
"popViewport","closure","function","TRUE","FALSE","(n = 1, recording = TRUE) ","grid","base","4.0.5"
"postDrawDetails","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"preDrawDetails","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"push.viewport","closure","function","TRUE","FALSE","(..., recording = TRUE) ","grid","base","4.0.5"
"pushViewport","closure","function","TRUE","FALSE","(..., recording = TRUE) ","grid","base","4.0.5"
"rasterGrob","closure","function","TRUE","FALSE","(image, x = unit(0.5, ""npc""), y = unit(0.5, ""npc""),     width = NULL, height = NULL, just = ""centre"", hjust = NULL,     vjust = NULL, interpolate = TRUE, default.units = ""npc"",     name = NULL, gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"recordGrob","closure","function","TRUE","FALSE","(expr, list, name = NULL, gp = NULL, vp = NULL) ","grid","base","4.0.5"
"rectGrob","closure","function","TRUE","FALSE","(x = unit(0.5, ""npc""), y = unit(0.5, ""npc""), width = unit(1,     ""npc""), height = unit(1, ""npc""), just = ""centre"", hjust = NULL,     vjust = NULL, default.units = ""npc"", name = NULL, gp = gpar(),     vp = NULL) ","grid","base","4.0.5"
"removeGrob","closure","function","TRUE","FALSE","(gTree, gPath, strict = FALSE, grep = FALSE, global = FALSE,     warn = TRUE) ","grid","base","4.0.5"
"reorderGrob","closure","function","TRUE","FALSE","(x, order, back = TRUE) ","grid","base","4.0.5"
"resolveHJust","closure","function","TRUE","FALSE","(just, hjust) ","grid","base","4.0.5"
"resolveRasterSize","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"resolveVJust","closure","function","TRUE","FALSE","(just, vjust) ","grid","base","4.0.5"
"roundrectGrob","closure","function","TRUE","FALSE","(x = 0.5, y = 0.5, width = 1, height = 1, default.units = ""npc"",     r = unit(0.1, ""snpc""), just = ""centre"", name = NULL, gp = NULL,     vp = NULL) ","grid","base","4.0.5"
"seekViewport","closure","function","TRUE","FALSE","(name, recording = TRUE) ","grid","base","4.0.5"
"segmentsGrob","closure","function","TRUE","FALSE","(x0 = unit(0, ""npc""), y0 = unit(0, ""npc""), x1 = unit(1,     ""npc""), y1 = unit(1, ""npc""), default.units = ""npc"", arrow = NULL,     name = NULL, gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"setChildren","closure","function","TRUE","FALSE","(x, children) ","grid","base","4.0.5"
"setGrob","closure","function","TRUE","FALSE","(gTree, gPath, newGrob, strict = FALSE, grep = FALSE) ","grid","base","4.0.5"
"showGrob","closure","function","TRUE","FALSE","(x = NULL, gPath = NULL, strict = FALSE, grep = FALSE,     recurse = TRUE, depth = NULL, labelfun = grobLabel, ...) ","grid","base","4.0.5"
"showViewport","closure","function","TRUE","FALSE","(vp = NULL, recurse = TRUE, depth = NULL, newpage = FALSE,     leaves = FALSE, col = rgb(0, 0, 1, 0.2), fill = rgb(0, 0,         1, 0.1), label = TRUE, nrow = 3, ncol = nrow) ","grid","base","4.0.5"
"stringAscent","closure","function","TRUE","FALSE","(string) ","grid","base","4.0.5"
"stringDescent","closure","function","TRUE","FALSE","(string) ","grid","base","4.0.5"
"stringHeight","closure","function","TRUE","FALSE","(string) ","grid","base","4.0.5"
"stringWidth","closure","function","TRUE","FALSE","(string) ","grid","base","4.0.5"
"textGrob","closure","function","TRUE","FALSE","(label, x = unit(0.5, ""npc""), y = unit(0.5, ""npc""),     just = ""centre"", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE,     default.units = ""npc"", name = NULL, gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"unit","closure","function","TRUE","FALSE","(x, units, data = NULL) ","grid","base","4.0.5"
"unit.c","closure","function","TRUE","FALSE","(..., check = TRUE) ","grid","base","4.0.5"
"unit.length","closure","function","TRUE","FALSE","(unit) ","grid","base","4.0.5"
"unit.pmax","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"unit.pmin","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"unit.psum","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"unit.rep","closure","function","TRUE","FALSE","(x, ...) ","grid","base","4.0.5"
"unitType","closure","function","TRUE","FALSE","(x, recurse = FALSE) ","grid","base","4.0.5"
"upViewport","closure","function","TRUE","FALSE","(n = 1, recording = TRUE) ","grid","base","4.0.5"
"valid.just","closure","function","TRUE","FALSE","(just) ","grid","base","4.0.5"
"validDetails","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"viewport","closure","function","TRUE","FALSE","(x = unit(0.5, ""npc""), y = unit(0.5, ""npc""), width = unit(1,     ""npc""), height = unit(1, ""npc""), default.units = ""npc"", just = ""centre"",     gp = gpar(), clip = ""inherit"", xscale = c(0, 1), yscale = c(0,         1), angle = 0, layout = NULL, layout.pos.row = NULL,     layout.pos.col = NULL, name = NULL) ","grid","base","4.0.5"
"viewport.layout","closure","function","TRUE","FALSE","(vp) ","grid","base","4.0.5"
"viewport.transform","closure","function","TRUE","FALSE","(vp) ","grid","base","4.0.5"
"vpList","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"vpPath","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"vpStack","closure","function","TRUE","FALSE","(...) ","grid","base","4.0.5"
"vpTree","closure","function","TRUE","FALSE","(parent, children) ","grid","base","4.0.5"
"widthDetails","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"xDetails","closure","function","TRUE","FALSE","(x, theta) ","grid","base","4.0.5"
"xaxisGrob","closure","function","TRUE","FALSE","(at = NULL, label = TRUE, main = TRUE, edits = NULL,     name = NULL, gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"xsplineGrob","closure","function","TRUE","FALSE","(x = c(0, 0.5, 1, 0.5), y = c(0.5, 1, 0.5, 0), id = NULL,     id.lengths = NULL, default.units = ""npc"", shape = 0, open = TRUE,     arrow = NULL, repEnds = TRUE, name = NULL, gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"xsplinePoints","closure","function","TRUE","FALSE","(x) ","grid","base","4.0.5"
"yDetails","closure","function","TRUE","FALSE","(x, theta) ","grid","base","4.0.5"
"yaxisGrob","closure","function","TRUE","FALSE","(at = NULL, label = TRUE, main = TRUE, edits = NULL,     name = NULL, gp = gpar(), vp = NULL) ","grid","base","4.0.5"
"Rows","closure","function","TRUE","FALSE","(x, which) ","lattice","recommended","4.0.5"
"USMortality","list","data.frame","FALSE","FALSE","NA","lattice","recommended","4.0.5"
"USRegionalMortality","list","data.frame","FALSE","FALSE","NA","lattice","recommended","4.0.5"
"as.factorOrShingle","closure","function","TRUE","FALSE","(x, subset = TRUE, drop = FALSE) ","lattice","recommended","4.0.5"
"as.shingle","closure","function","TRUE","FALSE","(x) ","lattice","recommended","4.0.5"
"axis.default","closure","function","TRUE","FALSE","(side = c(""top"", ""bottom"", ""left"", ""right""), scales,     components, as.table, labels = c(""default"", ""yes"", ""no""),     ticks = c(""default"", ""yes"", ""no""), ..., prefix = lattice.getStatus(""current.prefix"")) ","lattice","recommended","4.0.5"
"banking","closure","function","TRUE","FALSE","(dx, dy = 1) ","lattice","recommended","4.0.5"
"barchart","closure","function","TRUE","FALSE","(x, data, ...) ","lattice","recommended","4.0.5"
"barley","list","data.frame","FALSE","FALSE","NA","lattice","recommended","4.0.5"
"bwplot","closure","function","TRUE","FALSE","(x, data, ...) ","lattice","recommended","4.0.5"
"canonical.theme","closure","function","TRUE","FALSE","(name = .Device, color = name != ""postscript"") ","lattice","recommended","4.0.5"
"cloud","closure","function","TRUE","FALSE","(x, data, ...) ","lattice","recommended","4.0.5"
"col.whitebg","closure","function","TRUE","FALSE","() ","lattice","recommended","4.0.5"
"contourplot","closure","function","TRUE","FALSE","(x, data, ...) ","lattice","recommended","4.0.5"
"current.column","closure","function","TRUE","FALSE","(prefix = lattice.getStatus(""current.prefix"")) ","lattice","recommended","4.0.5"
"current.panel.limits","closure","function","TRUE","FALSE","(unit = ""native"") ","lattice","recommended","4.0.5"
"current.row","closure","function","TRUE","FALSE","(prefix = lattice.getStatus(""current.prefix"")) ","lattice","recommended","4.0.5"
"densityplot","closure","function","TRUE","FALSE","(x, data, ...) ","lattice","recommended","4.0.5"
"diag.panel.splom","closure","function","TRUE","FALSE","(x = NULL, varname = NULL, limits, at = NULL, labels = NULL,     draw = TRUE, tick.number = 5, varname.col = add.text$col,     varname.cex = add.text$cex, varname.lineheight = add.text$lineheight,     varname.font = add.text$font, varname.fontfamily = add.text$fontfamily,     varname.fontface = add.text$fontface, axis.text.col = axis.text$col,     axis.text.alpha = axis.text$alpha, axis.text.cex = axis.text$cex,     axis.text.font = axis.text$font, axis.text.fontfamily = axis.text$fontfamily,     axis.text.fontface = axis.text$fontface, axis.text.lineheight = axis.text$lineheight,     axis.line.col = axis.line$col, axis.line.alpha = axis.line$alpha,     axis.line.lty = axis.line$lty, axis.line.lwd = axis.line$lwd,     axis.line.tck = 1, ...) ","lattice","recommended","4.0.5"
"do.breaks","closure","function","TRUE","FALSE","(endpoints, nint) ","lattice","recommended","4.0.5"
"dotplot","closure","function","TRUE","FALSE","(x, data, ...) ","lattice","recommended","4.0.5"
"draw.colorkey","closure","function","TRUE","FALSE","(key, draw = FALSE, vp = NULL) ","lattice","recommended","4.0.5"
"draw.key","closure","function","TRUE","FALSE","(key, draw = FALSE, vp = NULL, ...) ","lattice","recommended","4.0.5"
"environmental","list","data.frame","FALSE","FALSE","NA","lattice","recommended","4.0.5"
"equal.count","closure","function","TRUE","FALSE","(x, ...) ","lattice","recommended","4.0.5"
"ethanol","list","data.frame","FALSE","FALSE","NA","lattice","recommended","4.0.5"
"histogram","closure","function","TRUE","FALSE","(x, data, ...) ","lattice","recommended","4.0.5"
"is.shingle","closure","function","TRUE","FALSE","(x) ","lattice","recommended","4.0.5"
"larrows","closure","function","TRUE","FALSE","(x0 = NULL, y0 = NULL, x1, y1, x2 = NULL, y2 = NULL,     angle = 30, code = 2, length = 0.25, unit = ""inches"", ends = switch(code,         ""first"", ""last"", ""both""), type = ""open"", col = add.line$col,     alpha = add.line$alpha, lty = add.line$lty, lwd = add.line$lwd,     fill = NULL, font, fontface, ..., identifier = NULL, name.type = ""panel"") ","lattice","recommended","4.0.5"
"lattice.getOption","closure","function","TRUE","FALSE","(name) ","lattice","recommended","4.0.5"
"lattice.options","closure","function","TRUE","FALSE","(...) ","lattice","recommended","4.0.5"
"latticeParseFormula","closure","function","TRUE","FALSE","(model, data, dimension = 2, subset = TRUE, groups = NULL,     multiple = FALSE, outer = FALSE, subscripts = FALSE, drop = NULL) ","lattice","recommended","4.0.5"
"level.colors","closure","function","TRUE","FALSE","(x, at, col.regions, colors = TRUE, ...) ","lattice","recommended","4.0.5"
"levelplot","closure","function","TRUE","FALSE","(x, data, ...) ","lattice","recommended","4.0.5"
"llines","closure","function","TRUE","FALSE","(x, ...) ","lattice","recommended","4.0.5"
"lplot.xy","closure","function","TRUE","FALSE","(xy, type = c(""p"", ""l"", ""o"", ""b"", ""c"", ""s"", ""S"", ""h"",     ""H""), pch = 1, lty = 1, col = 1, cex = 1, lwd = 1, font = 1,     fontfamily = NULL, fontface = NULL, col.line = col, col.symbol = col,     alpha = 1, fill = NULL, origin = 0, ..., identifier = NULL,     name.type = ""panel"") ","lattice","recommended","4.0.5"
"lpoints","closure","function","TRUE","FALSE","(x, ...) ","lattice","recommended","4.0.5"
"lpolygon","closure","function","TRUE","FALSE","(x, y = NULL, border = ""black"", col = ""transparent"",     fill = NULL, font, fontface, ..., identifier = NULL, name.type = ""panel"") ","lattice","recommended","4.0.5"
"lrect","closure","function","TRUE","FALSE","(xleft, ybottom, xright, ytop, x = (xleft + xright)/2,     y = (ybottom + ytop)/2, width = xright - xleft, height = ytop -         ybottom, col = ""transparent"", border = ""black"", lty = 1,     lwd = 1, alpha = 1, just = ""center"", hjust = NULL, vjust = NULL,     font, fontface, ..., identifier = NULL, name.type = ""panel"") ","lattice","recommended","4.0.5"
"lsegments","closure","function","TRUE","FALSE","(x0 = NULL, y0 = NULL, x1, y1, x2 = NULL, y2 = NULL,     col = add.line$col, alpha = add.line$alpha, lty = add.line$lty,     lwd = add.line$lwd, font, fontface, ..., identifier = NULL,     name.type = ""panel"") ","lattice","recommended","4.0.5"
"ltext","closure","function","TRUE","FALSE","(x, ...) ","lattice","recommended","4.0.5"
"ltransform3dMatrix","closure","function","TRUE","FALSE","(screen, R.mat = diag(4)) ","lattice","recommended","4.0.5"
"ltransform3dto3d","closure","function","TRUE","FALSE","(x, R.mat, dist = 0) ","lattice","recommended","4.0.5"
"make.groups","closure","function","TRUE","FALSE","(...) ","lattice","recommended","4.0.5"
"melanoma","list","data.frame","FALSE","FALSE","NA","lattice","recommended","4.0.5"
"oneway","closure","function","TRUE","FALSE","(formula, data, location = mean, spread = function(x) sqrt(var(x))) ","lattice","recommended","4.0.5"
"packet.number","closure","function","TRUE","FALSE","(prefix = lattice.getStatus(""current.prefix"")) ","lattice","recommended","4.0.5"
"packet.panel.default","closure","function","TRUE","FALSE","(layout, condlevels, page, row, column, skip, all.pages.skip = TRUE) ","lattice","recommended","4.0.5"
"panel.3dscatter","closure","function","TRUE","FALSE","(x, y, z, rot.mat = diag(4), distance, groups = NULL,     type = ""p"", xlim, ylim, zlim, xlim.scaled, ylim.scaled, zlim.scaled,     zero.scaled, col, col.point = if (is.null(groups)) plot.symbol$col else superpose.symbol$col,     col.line = if (is.null(groups)) plot.line$col else superpose.line$col,     lty = if (is.null(groups)) plot.line$lty else superpose.line$lty,     lwd = if (is.null(groups)) plot.line$lwd else superpose.line$lwd,     cex = if (is.null(groups)) plot.symbol$cex else superpose.symbol$cex,     pch = if (is.null(groups)) ""+"" else superpose.symbol$pch,     cross, ..., .scale = FALSE, subscripts = TRUE, identifier = ""3dscatter"") ","lattice","recommended","4.0.5"
"panel.3dwire","closure","function","TRUE","FALSE","(x, y, z, rot.mat = diag(4), distance, shade = FALSE,     shade.colors.palette = trellis.par.get(""shade.colors"")$palette,     light.source = c(0, 0, 1000), xlim, ylim, zlim, xlim.scaled,     ylim.scaled, zlim.scaled, col = if (shade) ""transparent"" else ""black"",     lty = 1, lwd = 1, alpha, col.groups = superpose.polygon$col,     polynum = 100, ..., .scale = FALSE, drape = FALSE, at, col.regions = regions$col,     alpha.regions = regions$alpha, identifier = ""3dwire"") ","lattice","recommended","4.0.5"
"panel.abline","closure","function","TRUE","FALSE","(a = NULL, b = 0, h = NULL, v = NULL, reg = NULL, coef = NULL,     col, col.line = add.line$col, lty = add.line$lty, lwd = add.line$lwd,     alpha = add.line$alpha, type, ..., reference = FALSE, identifier = ""abline"") ","lattice","recommended","4.0.5"
"panel.arrows","closure","function","TRUE","FALSE","(...) ","lattice","recommended","4.0.5"
"panel.average","closure","function","TRUE","FALSE","(x, y, fun = mean, horizontal = TRUE, lwd = reference.line$lwd,     lty = reference.line$lty, col, col.line = reference.line$col,     type = ""l"", ..., identifier = ""linejoin"") ","lattice","recommended","4.0.5"
"panel.axis","closure","function","TRUE","FALSE","(side = c(""bottom"", ""left"", ""top"", ""right""), at = pretty(scale.range),     labels = TRUE, draw.labels = TRUE, check.overlap = FALSE,     outside = FALSE, ticks = TRUE, half = !outside, which.half = switch(side,         bottom = ""lower"", left = ""upper"", top = ""upper"", right = ""lower""),     tck = as.numeric(ticks), rot = if (is.logical(labels)) 0 else c(90,         0), text.col = axis.text$col, text.alpha = axis.text$alpha,     text.cex = axis.text$cex, text.font = axis.text$font, text.fontfamily = axis.text$fontfamily,     text.fontface = axis.text$fontface, text.lineheight = axis.text$lineheight,     line.col = axis.line$col, line.lty = axis.line$lty, line.lwd = axis.line$lwd,     line.alpha = axis.line$alpha) ","lattice","recommended","4.0.5"
"panel.barchart","closure","function","TRUE","FALSE","(x, y, box.ratio = 1, box.width = box.ratio/(1 + box.ratio),     horizontal = TRUE, origin = NULL, reference = TRUE, stack = FALSE,     groups = NULL, col = if (is.null(groups)) plot.polygon$col else superpose.polygon$col,     border = if (is.null(groups)) plot.polygon$border else superpose.polygon$border,     lty = if (is.null(groups)) plot.polygon$lty else superpose.polygon$lty,     lwd = if (is.null(groups)) plot.polygon$lwd else superpose.polygon$lwd,     ..., identifier = ""barchart"") ","lattice","recommended","4.0.5"
"panel.brush.splom","closure","function","TRUE","FALSE","(threshold = 18, verbose = getOption(""verbose""), ...) ","lattice","recommended","4.0.5"
"panel.bwplot","closure","function","TRUE","FALSE","(x, y, box.ratio = 1, box.width = box.ratio/(1 + box.ratio),     horizontal = TRUE, pch = box.dot$pch, col = box.dot$col,     alpha = box.dot$alpha, cex = box.dot$cex, font = box.dot$font,     fontfamily = box.dot$fontfamily, fontface = box.dot$fontface,     fill = box.rectangle$fill, varwidth = FALSE, notch = FALSE,     notch.frac = 0.5, ..., levels.fos = if (horizontal) sort(unique(y)) else sort(unique(x)),     stats = boxplot.stats, coef = 1.5, do.out = TRUE, identifier = ""bwplot"") ","lattice","recommended","4.0.5"
"panel.cloud","closure","function","TRUE","FALSE","(x, y, subscripts, z, groups = NULL, perspective = TRUE,     distance = if (perspective) 0.2 else 0, xlim, ylim, zlim,     panel.3d.cloud = ""panel.3dscatter"", panel.3d.wireframe = ""panel.3dwire"",     screen = list(z = 40, x = -60), R.mat = diag(4), aspect = c(1,         1), par.box = NULL, xlab, ylab, zlab, xlab.default, ylab.default,     zlab.default, scales.3d, proportion = 0.6, wireframe = FALSE,     scpos, ..., at, identifier = ""cloud"") ","lattice","recommended","4.0.5"
"panel.contourplot","closure","function","TRUE","FALSE","(...) ","lattice","recommended","4.0.5"
"panel.curve","closure","function","TRUE","FALSE","(expr, from, to, n = 101, curve.type = ""l"", col = add.line$col,     lty = add.line$lty, lwd = add.line$lwd, type, ..., identifier = ""curve"") ","lattice","recommended","4.0.5"
"panel.densityplot","closure","function","TRUE","FALSE","(x, darg = list(n = 512), plot.points = ""jitter"", ref = FALSE,     groups = NULL, weights = NULL, jitter.amount = 0.01 * diff(current.panel.limits()$ylim),     type = ""p"", ..., identifier = ""density"") ","lattice","recommended","4.0.5"
"panel.dotplot","closure","function","TRUE","FALSE","(x, y, horizontal = TRUE, pch = if (is.null(groups)) dot.symbol$pch else sup.symbol$pch,     col = if (is.null(groups)) dot.symbol$col else sup.symbol$col,     lty = dot.line$lty, lwd = dot.line$lwd, col.line = dot.line$col,     levels.fos = if (horizontal) unique(y) else unique(x), groups = NULL,     ..., identifier = ""dotplot"") ","lattice","recommended","4.0.5"
"panel.error","closure","function","TRUE","FALSE","(e) ","lattice","recommended","4.0.5"
"panel.fill","closure","function","TRUE","FALSE","(col = trellis.par.get(""background"")$col, border = ""transparent"",     ..., identifier = ""fill"") ","lattice","recommended","4.0.5"
"panel.grid","closure","function","TRUE","FALSE","(h = 3, v = 3, col, col.line = reference.line$col, lty = reference.line$lty,     lwd = reference.line$lwd, x = NULL, y = NULL, ..., identifier = ""grid"") ","lattice","recommended","4.0.5"
"panel.histogram","closure","function","TRUE","FALSE","(x, breaks, equal.widths = TRUE, type = ""density"", nint = round(log2(length(x)) +     1), alpha = plot.polygon$alpha, col = plot.polygon$col, border = plot.polygon$border,     lty = plot.polygon$lty, lwd = plot.polygon$lwd, ..., identifier = ""histogram"") ","lattice","recommended","4.0.5"
"panel.identify","closure","function","TRUE","FALSE","(x, y = NULL, subscripts = seq_along(x), labels = subscripts,     n = length(x), offset = 0.5, threshold = 18, panel.args = trellis.panelArgs(),     ...) ","lattice","recommended","4.0.5"
"panel.identify.cloud","closure","function","TRUE","FALSE","(x = panel.args$x, y = panel.args$y, z = panel.args$z,     subscripts = panel.args$subscripts, perspective = TRUE, distance = if (perspective) 0.2 else 0,     xlim = panel.args$xlim, ylim = panel.args$ylim, zlim = panel.args$zlim,     screen = list(z = 40, x = -60), R.mat = diag(4), aspect = c(1,         1), scales.3d = panel.args$scales.3d, ..., panel.3d.identify = panel.3didentify,     n = length(subscripts), offset = 0.5, threshold = 18, labels = subscripts,     panel.args = trellis.panelArgs()) ","lattice","recommended","4.0.5"
"panel.identify.qqmath","closure","function","TRUE","FALSE","(x = panel.args$x, distribution = panel.args$distribution,     groups = panel.args$groups, subscripts = panel.args$subscripts,     labels = subscripts, panel.args = trellis.panelArgs(), ...) ","lattice","recommended","4.0.5"
"panel.levelplot","closure","function","TRUE","FALSE","(x, y, z, subscripts, at = pretty(z), shrink, labels = FALSE,     label.style = c(""mixed"", ""flat"", ""align""), contour = FALSE,     region = TRUE, col = add.line$col, lty = add.line$lty, lwd = add.line$lwd,     border = ""transparent"", border.lty = 1, border.lwd = 0.1,     ..., col.regions = regions$col, alpha.regions = regions$alpha,     identifier = ""levelplot"") ","lattice","recommended","4.0.5"
"panel.levelplot.raster","closure","function","TRUE","FALSE","(x, y, z, subscripts, at = pretty(z), ..., col.regions = regions$col,     alpha.regions = regions$alpha, interpolate = FALSE, identifier = ""levelplot"") ","lattice","recommended","4.0.5"
"panel.linejoin","closure","function","TRUE","FALSE","(x, y, fun = mean, horizontal = TRUE, lwd = reference.line$lwd,     lty = reference.line$lty, col, col.line = reference.line$col,     type = ""l"", ..., identifier = ""linejoin"") ","lattice","recommended","4.0.5"
"panel.lines","closure","function","TRUE","FALSE","(...) ","lattice","recommended","4.0.5"
"panel.link.splom","closure","function","TRUE","FALSE","(threshold = 18, verbose = getOption(""verbose""), ...) ","lattice","recommended","4.0.5"
"panel.lmline","closure","function","TRUE","FALSE","(x, y, ..., identifier = ""lmline"") ","lattice","recommended","4.0.5"
"panel.loess","closure","function","TRUE","FALSE","(x, y, span = 2/3, degree = 1, family = c(""symmetric"",     ""gaussian""), evaluation = 50, lwd = plot.line$lwd, lty = plot.line$lty,     col, col.line = plot.line$col, type, horizontal = FALSE,     ..., identifier = ""loess"") ","lattice","recommended","4.0.5"
"panel.mathdensity","closure","function","TRUE","FALSE","(dmath = dnorm, args = list(mean = 0, sd = 1), n = 50,     col, col.line = reference.line$col, lwd = reference.line$lwd,     lty = reference.line$lty, type, ..., identifier = ""mathdensity"") ","lattice","recommended","4.0.5"
"panel.number","closure","function","TRUE","FALSE","(prefix = lattice.getStatus(""current.prefix"")) ","lattice","recommended","4.0.5"
"panel.pairs","closure","function","TRUE","FALSE","(z, panel = lattice.getOption(""panel.splom""), lower.panel = panel,     upper.panel = panel, diag.panel = ""diag.panel.splom"", as.matrix = FALSE,     groups = NULL, panel.subscripts, subscripts, pscales = 5,     prepanel.limits = scale.limits, varnames = colnames(z), varname.col = add.text$col,     varname.cex = add.text$cex, varname.font = add.text$font,     varname.fontfamily = add.text$fontfamily, varname.fontface = add.text$fontface,     axis.text.col = axis.text$col, axis.text.cex = axis.text$cex,     axis.text.font = axis.text$font, axis.text.fontfamily = axis.text$fontfamily,     axis.text.fontface = axis.text$fontface, axis.text.lineheight = axis.text$lineheight,     axis.line.col = axis.line$col, axis.line.lty = axis.line$lty,     axis.line.lwd = axis.line$lwd, axis.line.alpha = axis.line$alpha,     axis.line.tck = 1, ...) ","lattice","recommended","4.0.5"
"panel.parallel","closure","function","TRUE","FALSE","(x, y, z, subscripts, groups = NULL, col = superpose.line$col,     lwd = superpose.line$lwd, lty = superpose.line$lty, alpha = superpose.line$alpha,     common.scale = FALSE, lower = sapply(z, function(x) min(as.numeric(x),         na.rm = TRUE)), upper = sapply(z, function(x) max(as.numeric(x),         na.rm = TRUE)), ..., horizontal.axis = TRUE, identifier = ""parallel"") ","lattice","recommended","4.0.5"
"panel.points","closure","function","TRUE","FALSE","(...) ","lattice","recommended","4.0.5"
"panel.polygon","closure","function","TRUE","FALSE","(...) ","lattice","recommended","4.0.5"
"panel.qq","closure","function","TRUE","FALSE","(..., identifier = ""qq"") ","lattice","recommended","4.0.5"
"panel.qqmath","closure","function","TRUE","FALSE","(x, f.value = NULL, distribution = qnorm, qtype = 7,     groups = NULL, ..., tails.n = 0, identifier = ""qqmath"") ","lattice","recommended","4.0.5"
"panel.qqmathline","closure","function","TRUE","FALSE","(x, y = x, distribution = qnorm, probs = c(0.25, 0.75),     qtype = 7, groups = NULL, ..., identifier = ""qqmathline"") ","lattice","recommended","4.0.5"
"panel.rect","closure","function","TRUE","FALSE","(...) ","lattice","recommended","4.0.5"
"panel.refline","closure","function","TRUE","FALSE","(...) ","lattice","recommended","4.0.5"
"panel.rug","closure","function","TRUE","FALSE","(x = NULL, y = NULL, regular = TRUE, start = if (regular) 0 else 0.97,     end = if (regular) 0.03 else 1, x.units = rep(""npc"", 2),     y.units = rep(""npc"", 2), col = plot.line$col, col.line = col,     lty = plot.line$lty, lwd = plot.line$lwd, alpha = plot.line$alpha,     ..., identifier = ""rug"") ","lattice","recommended","4.0.5"
"panel.segments","closure","function","TRUE","FALSE","(...) ","lattice","recommended","4.0.5"
"panel.smoothScatter","closure","function","TRUE","FALSE","(x, y = NULL, nbin = 64, cuts = 255, bandwidth, colramp,     nrpoints = 100, transformation = function(x) x^0.25, pch = ""."",     cex = 1, col = ""black"", range.x, ..., raster = FALSE, subscripts,     identifier = ""smoothScatter"") ","lattice","recommended","4.0.5"
"panel.spline","closure","function","TRUE","FALSE","(x, y, npoints = 101, lwd = plot.line$lwd, lty = plot.line$lty,     col, col.line = plot.line$col, type, horizontal = FALSE,     ..., keep.data = FALSE, identifier = ""spline"") ","lattice","recommended","4.0.5"
"panel.splom","closure","function","TRUE","FALSE","(..., identifier = ""splom"") ","lattice","recommended","4.0.5"
"panel.stripplot","closure","function","TRUE","FALSE","(x, y, jitter.data = FALSE, factor = 0.5, amount = NULL,     horizontal = TRUE, groups = NULL, ..., identifier = ""stripplot"") ","lattice","recommended","4.0.5"
"panel.superpose","closure","function","TRUE","FALSE","(x, y = NULL, subscripts, groups, panel.groups = ""panel.xyplot"",     ..., col = ""black"", col.line = superpose.line$col, col.symbol = superpose.symbol$col,     pch = superpose.symbol$pch, cex = superpose.symbol$cex, fill = superpose.symbol$fill,     font = superpose.symbol$font, fontface = superpose.symbol$fontface,     fontfamily = superpose.symbol$fontfamily, lty = superpose.line$lty,     lwd = superpose.line$lwd, alpha = superpose.symbol$alpha,     type = ""p"", grid = FALSE, distribute.type = FALSE) ","lattice","recommended","4.0.5"
"panel.superpose.2","closure","function","TRUE","FALSE","(..., distribute.type = TRUE) ","lattice","recommended","4.0.5"
"panel.superpose.plain","closure","function","TRUE","FALSE","(..., col = NA, col.line = plot.line$col, col.symbol = plot.symbol$col,     pch = plot.symbol$pch, cex = plot.symbol$cex, fill = plot.symbol$fill,     font = plot.symbol$font, fontface = plot.symbol$fontface,     fontfamily = plot.symbol$fontfamily, lty = plot.line$lty,     lwd = plot.line$lwd, alpha = plot.symbol$alpha) ","lattice","recommended","4.0.5"
"panel.text","closure","function","TRUE","FALSE","(...) ","lattice","recommended","4.0.5"
"panel.tmd.default","closure","function","TRUE","FALSE","(x, y, groups = NULL, ..., identifier = ""tmd"") ","lattice","recommended","4.0.5"
"panel.tmd.qqmath","closure","function","TRUE","FALSE","(x, f.value = NULL, distribution = qnorm, qtype = 7,     groups = NULL, subscripts, ..., identifier = ""tmd"") ","lattice","recommended","4.0.5"
"panel.violin","closure","function","TRUE","FALSE","(x, y, box.ratio = 1, box.width = box.ratio/(1 + box.ratio),     horizontal = TRUE, alpha = plot.polygon$alpha, border = plot.polygon$border,     lty = plot.polygon$lty, lwd = plot.polygon$lwd, col = plot.polygon$col,     varwidth = FALSE, bw = NULL, adjust = NULL, kernel = NULL,     window = NULL, width = NULL, n = 50, from = NULL, to = NULL,     cut = NULL, na.rm = TRUE, ..., identifier = ""violin"") ","lattice","recommended","4.0.5"
"panel.wireframe","closure","function","TRUE","FALSE","(...) ","lattice","recommended","4.0.5"
"panel.xyplot","closure","function","TRUE","FALSE","(x, y, type = ""p"", groups = NULL, pch = if (is.null(groups)) plot.symbol$pch else superpose.symbol$pch,     col, col.line = if (is.null(groups)) plot.line$col else superpose.line$col,     col.symbol = if (is.null(groups)) plot.symbol$col else superpose.symbol$col,     font = if (is.null(groups)) plot.symbol$font else superpose.symbol$font,     fontfamily = if (is.null(groups)) plot.symbol$fontfamily else superpose.symbol$fontfamily,     fontface = if (is.null(groups)) plot.symbol$fontface else superpose.symbol$fontface,     lty = if (is.null(groups)) plot.line$lty else superpose.line$lty,     cex = if (is.null(groups)) plot.symbol$cex else superpose.symbol$cex,     fill = if (is.null(groups)) plot.symbol$fill else superpose.symbol$fill,     lwd = if (is.null(groups)) plot.line$lwd else superpose.line$lwd,     horizontal = FALSE, ..., grid = FALSE, abline = NULL, jitter.x = FALSE,     jitter.y = FALSE, factor = 0.5, amount = NULL, identifier = ""xyplot"") ","lattice","recommended","4.0.5"
"parallel","closure","function","TRUE","FALSE","(x, data, ...) ","lattice","recommended","4.0.5"
"parallelplot","closure","function","TRUE","FALSE","(x, data, ...) ","lattice","recommended","4.0.5"
"prepanel.default.bwplot","closure","function","TRUE","FALSE","(x, y, horizontal = TRUE, nlevels, origin = NULL, stack = FALSE,     ...) ","lattice","recommended","4.0.5"
"prepanel.default.cloud","closure","function","TRUE","FALSE","(perspective = TRUE, distance = if (perspective) 0.2 else 0,     xlim, ylim, zlim, screen = list(z = 40, x = -60), R.mat = diag(4),     aspect = c(1, 1), panel.aspect = 1, ..., zoom = 0.8) ","lattice","recommended","4.0.5"
"prepanel.default.densityplot","closure","function","TRUE","FALSE","(x, darg, groups = NULL, weights = NULL, subscripts = TRUE,     ...) ","lattice","recommended","4.0.5"
"prepanel.default.histogram","closure","function","TRUE","FALSE","(x, breaks, equal.widths = TRUE, type = ""density"", nint = round(log2(length(x)) +     1), ...) ","lattice","recommended","4.0.5"
"prepanel.default.levelplot","closure","function","TRUE","FALSE","(x, y, subscripts, ...) ","lattice","recommended","4.0.5"
"prepanel.default.parallel","closure","function","TRUE","FALSE","(x, y, z, ..., horizontal.axis = TRUE) ","lattice","recommended","4.0.5"
"prepanel.default.qq","closure","function","TRUE","FALSE","(x, y, ...) ","lattice","recommended","4.0.5"
"prepanel.default.qqmath","closure","function","TRUE","FALSE","(x, f.value = NULL, distribution = qnorm, qtype = 7,     groups = NULL, subscripts, ..., tails.n = 0) ","lattice","recommended","4.0.5"
"prepanel.default.splom","closure","function","TRUE","FALSE","(z, ...) ","lattice","recommended","4.0.5"
"prepanel.default.xyplot","closure","function","TRUE","FALSE","(x, y, type, subscripts, groups = NULL, ...) ","lattice","recommended","4.0.5"
"prepanel.lmline","closure","function","TRUE","FALSE","(x, y, ...) ","lattice","recommended","4.0.5"
"prepanel.loess","closure","function","TRUE","FALSE","(x, y, span = 2/3, degree = 1, family = c(""symmetric"",     ""gaussian""), evaluation = 50, horizontal = FALSE, ...) ","lattice","recommended","4.0.5"
"prepanel.qqmathline","closure","function","TRUE","FALSE","(x, y = x, distribution = qnorm, probs = c(0.25, 0.75),     qtype = 7, groups = NULL, subscripts = TRUE, ...) ","lattice","recommended","4.0.5"
"prepanel.spline","closure","function","TRUE","FALSE","(x, y, npoints = 101, horizontal = FALSE, ..., keep.data = FALSE) ","lattice","recommended","4.0.5"
"prepanel.tmd.default","closure","function","TRUE","FALSE","(x, y, ...) ","lattice","recommended","4.0.5"
"prepanel.tmd.qqmath","closure","function","TRUE","FALSE","(x, f.value = NULL, distribution = qnorm, qtype = 7,     groups = NULL, subscripts, ...) ","lattice","recommended","4.0.5"
"qq","closure","function","TRUE","FALSE","(x, data, ...) ","lattice","recommended","4.0.5"
"qqmath","closure","function","TRUE","FALSE","(x, data, ...) ","lattice","recommended","4.0.5"
"rfs","closure","function","TRUE","FALSE","(model, layout = c(2, 1), xlab = ""f-value"", ylab = NULL,     distribution = qunif, panel = function(...) ","lattice","recommended","4.0.5"
"shingle","closure","function","TRUE","FALSE","(x, intervals = sort(unique(x))) ","lattice","recommended","4.0.5"
"show.settings","closure","function","TRUE","FALSE","(x = NULL) ","lattice","recommended","4.0.5"
"simpleKey","closure","function","TRUE","FALSE","(text, points = TRUE, rectangles = FALSE, lines = FALSE,     col = add.text$col, cex = add.text$cex, alpha = add.text$alpha,     font = add.text$font, fontface = add.text$fontface, fontfamily = add.text$fontfamily,     lineheight = add.text$lineheight, ...) ","lattice","recommended","4.0.5"
"simpleTheme","closure","function","TRUE","FALSE","(col, alpha, cex, pch, lty, lwd, font, fill, border,     col.points, col.line, alpha.points, alpha.line) ","lattice","recommended","4.0.5"
"singer","list","data.frame","FALSE","FALSE","NA","lattice","recommended","4.0.5"
"splom","closure","function","TRUE","FALSE","(x, data, ...) ","lattice","recommended","4.0.5"
"standard.theme","closure","function","TRUE","FALSE","(name = .Device, color = name != ""postscript"") ","lattice","recommended","4.0.5"
"strip.custom","closure","function","TRUE","FALSE","(...) ","lattice","recommended","4.0.5"
"strip.default","closure","function","TRUE","FALSE","(which.given, which.panel, var.name, factor.levels,     shingle.intervals = NULL, strip.names = c(FALSE, TRUE), strip.levels = c(TRUE,         FALSE), sep = "" : "", style = 1, horizontal = TRUE, bg = trellis.par.get(""strip.background"")$col[which.given],     fg = trellis.par.get(""strip.shingle"")$col[which.given], par.strip.text = trellis.par.get(""add.text"")) ","lattice","recommended","4.0.5"
"stripplot","closure","function","TRUE","FALSE","(x, data, ...) ","lattice","recommended","4.0.5"
"tmd","closure","function","TRUE","FALSE","(object, ...) ","lattice","recommended","4.0.5"
"trellis.currentLayout","closure","function","TRUE","FALSE","(which = c(""packet"", ""panel""), prefix = lattice.getStatus(""current.prefix"")) ","lattice","recommended","4.0.5"
"trellis.device","closure","function","TRUE","FALSE","(device = getOption(""device""), color = !(dev.name ==     ""postscript""), theme = lattice.getOption(""default.theme""),     new = TRUE, retain = FALSE, ...) ","lattice","recommended","4.0.5"
"trellis.focus","closure","function","TRUE","FALSE","(name, column = stop(""column must be specified""), row = stop(""row must be specified""),     side = NULL, clip.off = FALSE, highlight = interactive(),     ..., prefix, guess = TRUE, verbose = getOption(""verbose"")) ","lattice","recommended","4.0.5"
"trellis.grobname","closure","function","TRUE","FALSE","(name, type = c("""", ""panel"", ""strip"", ""strip.left"",     ""key"", ""colorkey""), group = 0, which.given = lattice.getStatus(""current.which.given"",     prefix = prefix), which.panel = lattice.getStatus(""current.which.panel"",     prefix = prefix), column = lattice.getStatus(""current.focus.column"",     prefix = prefix), row = lattice.getStatus(""current.focus.row"",     prefix = prefix), prefix = lattice.getStatus(""current.prefix"")) ","lattice","recommended","4.0.5"
"trellis.last.object","closure","function","TRUE","FALSE","(..., prefix = lattice.getStatus(""current.prefix"")) ","lattice","recommended","4.0.5"
"trellis.panelArgs","closure","function","TRUE","FALSE","(x, packet.number) ","lattice","recommended","4.0.5"
"trellis.par.get","closure","function","TRUE","FALSE","(name = NULL) ","lattice","recommended","4.0.5"
"trellis.par.set","closure","function","TRUE","FALSE","(name, value, ..., theme, warn = TRUE, strict = FALSE) ","lattice","recommended","4.0.5"
"trellis.switchFocus","closure","function","TRUE","FALSE","(name, side = NULL, clip.off = FALSE, highlight, ...,     prefix) ","lattice","recommended","4.0.5"
"trellis.unfocus","closure","function","TRUE","FALSE","() ","lattice","recommended","4.0.5"
"trellis.vpname","closure","function","TRUE","FALSE","(name = c(""position"", ""split"", ""split.location"", ""toplevel"",     ""figure"", ""panel"", ""strip"", ""strip.left"", ""legend"", ""legend.region"",     ""main"", ""sub"", ""xlab"", ""ylab"", ""xlab.top"", ""ylab.right"",     ""page""), column = lattice.getStatus(""current.focus.column"",     prefix = prefix), row = lattice.getStatus(""current.focus.row"",     prefix = prefix), side = c(""left"", ""top"", ""right"", ""bottom"",     ""inside""), clip.off = FALSE, prefix = lattice.getStatus(""current.prefix"")) ","lattice","recommended","4.0.5"
"which.packet","closure","function","TRUE","FALSE","(prefix = lattice.getStatus(""current.prefix"")) ","lattice","recommended","4.0.5"
"wireframe","closure","function","TRUE","FALSE","(x, data, ...) ","lattice","recommended","4.0.5"
"xscale.components.default","closure","function","TRUE","FALSE","(lim, packet.number = 0, packet.list = NULL, top = TRUE,     ...) ","lattice","recommended","4.0.5"
"xyplot","closure","function","TRUE","FALSE","(x, data, ...) ","lattice","recommended","4.0.5"
"xyplot.ts","closure","function","TRUE","FALSE","(x, data = NULL, screens = if (superpose) 1 else colnames(x),     ..., superpose = FALSE, cut = FALSE, type = ""l"", col = NULL,     lty = NULL, lwd = NULL, pch = NULL, cex = NULL, fill = NULL,     auto.key = superpose, panel = if (superpose) ""panel.superpose"" else ""panel.superpose.plain"",     par.settings = list(), layout = NULL, as.table = TRUE, xlab = ""Time"",     ylab = NULL, default.scales = list(y = list(relation = if (missing(cut)) ""free"" else ""same""))) ","lattice","recommended","4.0.5"
"yscale.components.default","closure","function","TRUE","FALSE","(lim, packet.number = 0, packet.list = NULL, right = TRUE,     ...) ","lattice","recommended","4.0.5"
".EmptyPrimitiveSkeletons","list","list","TRUE","FALSE","NA","methods","base","4.0.5"
".OldClassesList","list","list","TRUE","FALSE","NA","methods","base","4.0.5"
".S4methods","closure","function","TRUE","FALSE","(generic.function, class) ","methods","base","4.0.5"
".ShortPrimitiveSkeletons","list","list","TRUE","FALSE","NA","methods","base","4.0.5"
".TraceWithMethods","closure","function","TRUE","FALSE","(what, tracer = NULL, exit = NULL, at = numeric(), print = TRUE,     signature = NULL, where = .GlobalEnv, edit = FALSE, from = NULL,     untrace = FALSE, classMethod = FALSE) ","methods","base","4.0.5"
".__C__(","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__.NULL","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__.Other","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__.environment","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__.externalptr","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__.name","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__<-","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__ANY","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__ClassUnionRepresentation","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__Date","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__EmptyMethodsList","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__LinearMethodsList","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__MethodDefinition","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__MethodDefinitionWithTrace","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__MethodSelectionReport","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__MethodWithNext","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__MethodWithNextWithTrace","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__MethodsList","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__NULL","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__ObjectsWithPackage","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__OptionalFunction","S4","ClassUnionRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__POSIXct","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__POSIXlt","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__POSIXt","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__PossibleMethod","S4","ClassUnionRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__S3","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__S4","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__SClassExtension","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__SealedMethodDefinition","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__SuperClassMethod","S4","ClassUnionRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__VIRTUAL","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__activeBindingFunction","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__anova","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__anova.glm","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__anova.glm.null","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__aov","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__array","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__builtin","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__call","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__character","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__classGeneratorFunction","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__className","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__classPrototypeDef","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__classRepresentation","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__complex","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__conditionalExtension","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__data.frame","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__data.frameRowLabels","S4","ClassUnionRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__defaultBindingFunction","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__density","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__derivedDefaultMethod","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__derivedDefaultMethodWithTrace","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__double","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__dump.frames","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__envRefClass","S4","refClassRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__environment","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__expression","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__externalRefMethod","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__externalptr","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__factor","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__for","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__formula","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__function","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__functionWithTrace","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__genericFunction","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__genericFunctionWithTrace","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__glm","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__glm.null","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__groupGenericFunction","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__groupGenericFunctionWithTrace","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__hsearch","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__if","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__integer","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__integrate","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__internalDispatchMethod","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__language","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__libraryIQR","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__list","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__listOfMethods","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__lm","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__localRefClass","S4","refClassRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__logLik","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__logical","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__maov","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__matrix","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__missing","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__mlm","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__mtable","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__mts","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__name","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__namedList","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__nonStructure","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__nonstandardGeneric","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__nonstandardGenericFunction","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__nonstandardGenericWithTrace","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__nonstandardGroupGenericFunction","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__numeric","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__oldClass","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__optionalMethod","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__ordered","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__packageIQR","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__packageInfo","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__raw","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__recordedplot","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__refClass","S4","ClassUnionRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__refClassRepresentation","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__refGeneratorSlot","S4","refClassRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__refMethodDef","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__refMethodDefWithTrace","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__refObject","S4","ClassUnionRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__refObjectGenerator","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__repeat","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__rle","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__signature","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__socket","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__sourceEnvironment","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__special","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__standardGeneric","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__standardGenericWithTrace","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__structure","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__summary.table","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__summaryDefault","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__table","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__traceable","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__ts","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__uninitializedField","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__vector","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__while","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__C__{","S4","classRepresentation","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__$:base","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__$<-:base","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__Arith:base","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__Compare:methods","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__Complex:base","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__Logic:base","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__Math2:methods","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__Math:base","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__Ops:base","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__Summary:base","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__[:base","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__[<-:base","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__[[<-:base","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__addNextMethod:methods","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__body<-:base","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__cbind2:methods","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__coerce:methods","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__coerce<-:methods","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__initialize:methods","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__kronecker:base","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__loadMethod:methods","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__rbind2:methods","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__show:methods","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".__T__slotsFromS3:methods","environment","environment","TRUE","FALSE","NA","methods","base","4.0.5"
".classEnv","closure","function","TRUE","FALSE","(Class, default = .requirePackage(""methods""), mustFind = TRUE) ","methods","base","4.0.5"
".debugMethod","closure","function","TRUE","FALSE","(fun, text = """", condition = NULL, signature, once = FALSE) ","methods","base","4.0.5"
".doTracePrint","closure","function","TRUE","FALSE","(msg = """") ","methods","base","4.0.5"
".hasSlot","closure","function","TRUE","FALSE","(object, name) ","methods","base","4.0.5"
".isMethodDebugged","closure","function","TRUE","FALSE","(fun, signature) ","methods","base","4.0.5"
".selectSuperClasses","closure","function","TRUE","FALSE","(ext, dropVirtual = FALSE, namesOnly = TRUE, directOnly = TRUE,     simpleOnly = directOnly) ","methods","base","4.0.5"
".slotNames","closure","function","TRUE","FALSE","(x) ","methods","base","4.0.5"
".undebugMethod","closure","function","TRUE","FALSE","(fun, signature) ","methods","base","4.0.5"
".untracedFunction","closure","function","TRUE","FALSE","(f) ","methods","base","4.0.5"
".valueClassTest","closure","function","TRUE","FALSE","(object, classes, fname) ","methods","base","4.0.5"
"Arith","closure","groupGenericFunction","TRUE","TRUE","(e1, e2) ","methods","base","4.0.5"
"Compare","closure","groupGenericFunction","TRUE","TRUE","(e1, e2) ","methods","base","4.0.5"
"Complex","closure","groupGenericFunction","TRUE","TRUE","(z) ","methods","base","4.0.5"
"Logic","closure","groupGenericFunction","TRUE","TRUE","(e1, e2) ","methods","base","4.0.5"
"Math","closure","groupGenericFunction","TRUE","TRUE","(x) ","methods","base","4.0.5"
"Math2","closure","groupGenericFunction","TRUE","TRUE","(x, digits) ","methods","base","4.0.5"
"MethodAddCoerce","closure","function","TRUE","FALSE","(method, argName, thisClass, methodClass) ","methods","base","4.0.5"
"MethodsList","closure","function","TRUE","FALSE","(.ArgName, ...) ","methods","base","4.0.5"
"MethodsListSelect","closure","function","TRUE","FALSE","(f, env, mlist = NULL, fEnv = if (is(fdef, ""genericFunction"")) environment(fdef) else baseenv(),     finalDefault = finalDefaultMethod(mlist), evalArgs = TRUE,     useInherited = TRUE, fdef = getGeneric(f, where = env), resetAllowed = TRUE) ","methods","base","4.0.5"
"Ops","closure","groupGenericFunction","TRUE","TRUE","(e1, e2) ","methods","base","4.0.5"
"Quote","special","function","TRUE","NA","(expr) ","methods","base","4.0.5"
"S3Class","closure","function","TRUE","FALSE","(object) ","methods","base","4.0.5"
"S3Class<-","closure","function","TRUE","FALSE","(object, value) ","methods","base","4.0.5"
"S3Part","closure","function","TRUE","FALSE","(object, strictS3 = FALSE, S3Class) ","methods","base","4.0.5"
"S3Part<-","closure","function","TRUE","FALSE","(object, strictS3 = FALSE, needClass = .S3Class(object),     value) ","methods","base","4.0.5"
"SignatureMethod","closure","function","TRUE","FALSE","(names, signature, definition) ","methods","base","4.0.5"
"Summary","closure","groupGenericFunction","TRUE","TRUE","(x, ..., na.rm = FALSE) ","methods","base","4.0.5"
"addNextMethod","closure","standardGeneric","TRUE","TRUE","(method, f = ""<unknown>"", mlist, optional = FALSE, envir) ","methods","base","4.0.5"
"allNames","closure","function","TRUE","FALSE","(x) ","methods","base","4.0.5"
"as","closure","function","TRUE","FALSE","(object, Class, strict = TRUE, ext = possibleExtends(thisClass,     Class)) ","methods","base","4.0.5"
"as<-","closure","function","TRUE","FALSE","(object, Class, value) ","methods","base","4.0.5"
"asMethodDefinition","closure","function","TRUE","FALSE","(def, signature = list(.anyClassName), sealed = FALSE,     fdef = def) ","methods","base","4.0.5"
"assignClassDef","closure","function","TRUE","FALSE","(Class, def, where = .GlobalEnv, force = FALSE, doSubclasses = is(def,     ""ClassUnionRepresentation"")) ","methods","base","4.0.5"
"assignMethodsMetaData","closure","function","TRUE","FALSE","(f, value, fdef, where) ","methods","base","4.0.5"
"balanceMethodsList","closure","function","TRUE","FALSE","(mlist, args, check = TRUE) ","methods","base","4.0.5"
"body<-","closure","standardGeneric","TRUE","TRUE","(fun, envir = environment(fun), value) ","methods","base","4.0.5"
"cacheGenericsMetaData","closure","function","TRUE","FALSE","(f, fdef, attach = TRUE, where = topenv(parent.frame()),     package, methods) ","methods","base","4.0.5"
"cacheMetaData","closure","function","TRUE","FALSE","(where, attach = TRUE, searchWhere = as.environment(where),     doCheck = TRUE) ","methods","base","4.0.5"
"cacheMethod","closure","function","TRUE","FALSE","(f, sig, def, args = names(sig), fdef, inherited = FALSE) ","methods","base","4.0.5"
"callGeneric","closure","function","TRUE","FALSE","(...) ","methods","base","4.0.5"
"callNextMethod","closure","function","TRUE","FALSE","(...) ","methods","base","4.0.5"
"canCoerce","closure","function","TRUE","FALSE","(object, Class) ","methods","base","4.0.5"
"cbind2","closure","standardGeneric","TRUE","TRUE","(x, y, ...) ","methods","base","4.0.5"
"checkAtAssignment","closure","function","TRUE","FALSE","(cl, name, valueClass) ","methods","base","4.0.5"
"checkSlotAssignment","closure","function","TRUE","FALSE","(obj, name, value) ","methods","base","4.0.5"
"classLabel","closure","function","TRUE","FALSE","(Class) ","methods","base","4.0.5"
"classMetaName","closure","function","TRUE","FALSE","(name) ","methods","base","4.0.5"
"className","closure","function","TRUE","FALSE","(class, package) ","methods","base","4.0.5"
"classesToAM","closure","function","TRUE","FALSE","(classes, includeSubclasses = FALSE, abbreviate = 2) ","methods","base","4.0.5"
"coerce","closure","nonstandardGenericFunction","TRUE","TRUE","(from, to, strict = TRUE) ","methods","base","4.0.5"
"coerce<-","closure","nonstandardGenericFunction","TRUE","TRUE","(from, to, value) ","methods","base","4.0.5"
"completeClassDefinition","closure","function","TRUE","FALSE","(Class, ClassDef = getClassDef(Class), where, doExtends = TRUE) ","methods","base","4.0.5"
"completeExtends","closure","function","TRUE","FALSE","(ClassDef, class2, extensionDef, where) ","methods","base","4.0.5"
"completeSubclasses","closure","function","TRUE","FALSE","(classDef, class2, extensionDef, where, classDef2 = getClassDef(class2,     where)) ","methods","base","4.0.5"
"conformMethod","closure","function","TRUE","FALSE","(signature, mnames, fnames, f = ""<unspecified>"", fdef,     method) ","methods","base","4.0.5"
"defaultDumpName","closure","function","TRUE","FALSE","(generic, signature) ","methods","base","4.0.5"
"defaultPrototype","closure","function","TRUE","FALSE","() ","methods","base","4.0.5"
"doPrimitiveMethod","closure","function","TRUE","FALSE","(name, def, call = sys.call(sys.parent()), ev = sys.frame(sys.parent(2))) ","methods","base","4.0.5"
"dumpMethod","closure","function","TRUE","FALSE","(f, signature = character(), file = defaultDumpName(f,     signature), where = topenv(parent.frame()), def = getMethod(f,     signature, where = where, optional = TRUE)) ","methods","base","4.0.5"
"dumpMethods","closure","function","TRUE","FALSE","(f, file = """", signature = NULL, methods = findMethods(f,     where = where), where = topenv(parent.frame())) ","methods","base","4.0.5"
"el","closure","function","TRUE","FALSE","(object, where) ","methods","base","4.0.5"
"el<-","special","function","TRUE","NA","","methods","base","4.0.5"
"elNamed","closure","function","TRUE","FALSE","(x, name, mustFind = FALSE) ","methods","base","4.0.5"
"elNamed<-","closure","function","TRUE","FALSE","(x, name, value) ","methods","base","4.0.5"
"empty.dump","closure","function","TRUE","FALSE","() ","methods","base","4.0.5"
"emptyMethodsList","closure","function","TRUE","FALSE","(mlist, thisClass = ""ANY"", sublist = list()) ","methods","base","4.0.5"
"evalOnLoad","closure","function","TRUE","FALSE","(expr, where = topenv(parent.frame()), aname = """") ","methods","base","4.0.5"
"evalSource","closure","function","TRUE","FALSE","(source, package = """", lock = TRUE, cache = FALSE) ","methods","base","4.0.5"
"evalqOnLoad","closure","function","TRUE","FALSE","(expr, where = topenv(parent.frame()), aname = """") ","methods","base","4.0.5"
"existsFunction","closure","function","TRUE","FALSE","(f, generic = TRUE, where = topenv(parent.frame())) ","methods","base","4.0.5"
"existsMethod","closure","function","TRUE","FALSE","(f, signature = character(), where = topenv(parent.frame())) ","methods","base","4.0.5"
"extends","closure","function","TRUE","FALSE","(class1, class2, maybe = TRUE, fullInfo = FALSE) ","methods","base","4.0.5"
"externalRefMethod","closure","classGeneratorFunction","TRUE","FALSE","(...) ","methods","base","4.0.5"
"finalDefaultMethod","closure","function","TRUE","FALSE","(method) ","methods","base","4.0.5"
"findClass","closure","function","TRUE","FALSE","(Class, where = topenv(parent.frame()), unique = """") ","methods","base","4.0.5"
"findFunction","closure","function","TRUE","FALSE","(f, generic = TRUE, where = topenv(parent.frame())) ","methods","base","4.0.5"
"findMethod","closure","function","TRUE","FALSE","(f, signature, where = topenv(parent.frame())) ","methods","base","4.0.5"
"findMethodSignatures","closure","function","TRUE","FALSE","(..., target = TRUE, methods = findMethods(...)) ","methods","base","4.0.5"
"findMethods","closure","function","TRUE","FALSE","(f, where, classes = character(), inherited = FALSE,     package = """") ","methods","base","4.0.5"
"findUnique","closure","function","TRUE","FALSE","(what, message, where = topenv(parent.frame())) ","methods","base","4.0.5"
"fixPre1.8","closure","function","TRUE","FALSE","(names, where = topenv(parent.frame())) ","methods","base","4.0.5"
"formalArgs","closure","function","TRUE","FALSE","(def) ","methods","base","4.0.5"
"functionBody","closure","function","TRUE","FALSE","(fun = sys.function(sys.parent())) ","methods","base","4.0.5"
"functionBody<-","closure","function","TRUE","FALSE","(fun, envir = environment(fun), value) ","methods","base","4.0.5"
"generic.skeleton","closure","function","TRUE","FALSE","(name, fdef, fdefault) ","methods","base","4.0.5"
"getAllSuperClasses","closure","function","TRUE","FALSE","(ClassDef, simpleOnly = TRUE) ","methods","base","4.0.5"
"getClass","closure","function","TRUE","FALSE","(Class, .Force = FALSE, where = .classEnv(Class, topenv(parent.frame()),     FALSE)) ","methods","base","4.0.5"
"getClassDef","closure","function","TRUE","FALSE","(Class, where = topenv(parent.frame()), package = packageSlot(Class),     inherits = TRUE) ","methods","base","4.0.5"
"getClasses","closure","function","TRUE","FALSE","(where = .externalCallerEnv(), inherits = missing(where)) ","methods","base","4.0.5"
"getDataPart","closure","function","TRUE","FALSE","(object, NULL.for.none = FALSE) ","methods","base","4.0.5"
"getFunction","closure","function","TRUE","FALSE","(name, generic = TRUE, mustFind = TRUE, where = topenv(parent.frame())) ","methods","base","4.0.5"
"getGeneric","closure","function","TRUE","FALSE","(f, mustFind = FALSE, where, package = """") ","methods","base","4.0.5"
"getGenerics","closure","function","TRUE","FALSE","(where, searchForm = FALSE) ","methods","base","4.0.5"
"getGroup","closure","function","TRUE","FALSE","(fdef, recursive = FALSE, where = topenv(parent.frame())) ","methods","base","4.0.5"
"getGroupMembers","closure","function","TRUE","FALSE","(group, recursive = FALSE, character = TRUE) ","methods","base","4.0.5"
"getLoadActions","closure","function","TRUE","FALSE","(where = topenv(parent.frame())) ","methods","base","4.0.5"
"getMethod","closure","function","TRUE","FALSE","(f, signature = character(), where = topenv(parent.frame()),     optional = FALSE, mlist, fdef) ","methods","base","4.0.5"
"getMethods","closure","function","TRUE","FALSE","(f, where = topenv(parent.frame()), table = FALSE) ","methods","base","4.0.5"
"getMethodsForDispatch","closure","function","TRUE","FALSE","(fdef, inherited = FALSE) ","methods","base","4.0.5"
"getMethodsMetaData","closure","function","TRUE","FALSE","(f, where = topenv(parent.frame())) ","methods","base","4.0.5"
"getPackageName","closure","function","TRUE","FALSE","(where = topenv(parent.frame()), create = TRUE) ","methods","base","4.0.5"
"getRefClass","closure","function","TRUE","FALSE","(Class, where = topenv(parent.frame())) ","methods","base","4.0.5"
"getSlots","closure","function","TRUE","FALSE","(x) ","methods","base","4.0.5"
"getValidity","closure","function","TRUE","FALSE","(ClassDef) ","methods","base","4.0.5"
"hasArg","closure","function","TRUE","FALSE","(name) ","methods","base","4.0.5"
"hasLoadAction","closure","function","TRUE","FALSE","(aname, where = topenv(parent.frame())) ","methods","base","4.0.5"
"hasMethod","closure","function","TRUE","FALSE","(f, signature = character(), where = .genEnv(f, topenv(parent.frame()))) ","methods","base","4.0.5"
"hasMethods","closure","function","TRUE","FALSE","(f, where, package = """") ","methods","base","4.0.5"
"implicitGeneric","closure","function","TRUE","FALSE","(name, where = topenv(parent.frame()), generic = getGeneric(name,     where = where)) ","methods","base","4.0.5"
"inheritedSlotNames","closure","function","TRUE","FALSE","(Class, where = topenv(parent.frame())) ","methods","base","4.0.5"
"initFieldArgs","closure","function","TRUE","FALSE","(.Object, classDef, selfEnv, ...) ","methods","base","4.0.5"
"initRefFields","closure","function","TRUE","FALSE","(.Object, classDef, selfEnv, args) ","methods","base","4.0.5"
"initialize","closure","nonstandardGenericFunction","TRUE","TRUE","(.Object, ...) ","methods","base","4.0.5"
"insertClassMethods","closure","function","TRUE","FALSE","(methods, Class, value, fieldNames, returnAll) ","methods","base","4.0.5"
"insertMethod","closure","function","TRUE","FALSE","(mlist, signature, args, def, cacheOnly = FALSE) ","methods","base","4.0.5"
"insertSource","closure","function","TRUE","FALSE","(source, package = """", functions = allPlainObjects(),     methods = (if (missing(functions)) allMethodTables() else NULL),     force = missing(functions) & missing(methods)) ","methods","base","4.0.5"
"is","closure","function","TRUE","FALSE","(object, class2) ","methods","base","4.0.5"
"isClass","closure","function","TRUE","FALSE","(Class, formal = TRUE, where = topenv(parent.frame())) ","methods","base","4.0.5"
"isClassDef","closure","function","TRUE","FALSE","(object) ","methods","base","4.0.5"
"isClassUnion","closure","function","TRUE","FALSE","(Class) ","methods","base","4.0.5"
"isGeneric","closure","function","TRUE","FALSE","(f, where = topenv(parent.frame()), fdef = NULL, getName = FALSE) ","methods","base","4.0.5"
"isGrammarSymbol","closure","function","TRUE","FALSE","(symbol) ","methods","base","4.0.5"
"isGroup","closure","function","TRUE","FALSE","(f, where = topenv(parent.frame()), fdef = getGeneric(f,     where = where)) ","methods","base","4.0.5"
"isRematched","closure","function","TRUE","FALSE","(definition) ","methods","base","4.0.5"
"isSealedClass","closure","function","TRUE","FALSE","(Class, where = topenv(parent.frame())) ","methods","base","4.0.5"
"isSealedMethod","closure","function","TRUE","FALSE","(f, signature, fdef = getGeneric(f, FALSE, where = where),     where = topenv(parent.frame())) ","methods","base","4.0.5"
"isVirtualClass","closure","function","TRUE","FALSE","(Class, where = topenv(parent.frame())) ","methods","base","4.0.5"
"isXS3Class","closure","function","TRUE","FALSE","(classDef) ","methods","base","4.0.5"
"kronecker","closure","standardGeneric","TRUE","TRUE","(X, Y, FUN = ""*"", make.dimnames = FALSE, ...) ","methods","base","4.0.5"
"languageEl","closure","function","TRUE","FALSE","(object, which) ","methods","base","4.0.5"
"languageEl<-","closure","function","TRUE","FALSE","(object, which, value) ","methods","base","4.0.5"
"linearizeMlist","closure","function","TRUE","FALSE","(mlist, inherited = TRUE) ","methods","base","4.0.5"
"listFromMethods","closure","function","TRUE","FALSE","(generic, where, table) ","methods","base","4.0.5"
"listFromMlist","closure","function","TRUE","FALSE","(mlist, prefix = list(), sigs. = TRUE, methods. = TRUE) ","methods","base","4.0.5"
"loadMethod","closure","standardGeneric","TRUE","TRUE","(method, fname, envir) ","methods","base","4.0.5"
"makeClassRepresentation","closure","function","TRUE","FALSE","(name, slots = list(), superClasses = character(), prototype = NULL,     package, validity = NULL, access = list(), version = .newExternalptr(),     sealed = FALSE, virtual = NA, where) ","methods","base","4.0.5"
"makeExtends","closure","function","TRUE","FALSE","(Class, coerce = NULL, test = NULL, replace = NULL,     by = character(), package, slots = getSlots(classDef1), classDef1 = getClass(Class),     classDef2) ","methods","base","4.0.5"
"makeGeneric","closure","function","TRUE","FALSE","(f, fdef, fdefault = fdef, group = list(), valueClass = character(),     package = getPackageName(environment(fdef)), signature = NULL,     genericFunction = NULL, simpleInheritanceOnly = NULL) ","methods","base","4.0.5"
"makeMethodsList","closure","function","TRUE","FALSE","(object, level = 1) ","methods","base","4.0.5"
"makePrototypeFromClassDef","closure","function","TRUE","FALSE","(slots, ClassDef, extends, where) ","methods","base","4.0.5"
"makeStandardGeneric","closure","function","TRUE","FALSE","(f, fdef) ","methods","base","4.0.5"
"matchSignature","closure","function","TRUE","FALSE","(signature, fun, where = baseenv()) ","methods","base","4.0.5"
"mergeMethods","closure","function","TRUE","FALSE","(m1, m2, genericLabel = character()) ","methods","base","4.0.5"
"metaNameUndo","closure","function","TRUE","FALSE","(strings, prefix, searchForm = FALSE) ","methods","base","4.0.5"
"method.skeleton","closure","function","TRUE","FALSE","(generic, signature, file, external = FALSE, where = topenv(parent.frame())) ","methods","base","4.0.5"
"methodSignatureMatrix","closure","function","TRUE","FALSE","(object, sigSlots = c(""target"", ""defined"")) ","methods","base","4.0.5"
"methodsPackageMetaName","closure","function","TRUE","FALSE","(prefix, name, package = """") ","methods","base","4.0.5"
"missingArg","closure","function","TRUE","FALSE","(symbol, envir = parent.frame(), eval = FALSE) ","methods","base","4.0.5"
"multipleClasses","closure","function","TRUE","FALSE","(details = FALSE) ","methods","base","4.0.5"
"new","closure","function","TRUE","FALSE","(Class, ...) ","methods","base","4.0.5"
"newBasic","closure","function","TRUE","FALSE","(Class, ...) ","methods","base","4.0.5"
"newClassRepresentation","closure","function","TRUE","FALSE","(...) ","methods","base","4.0.5"
"newEmptyObject","closure","function","TRUE","FALSE","() ","methods","base","4.0.5"
"packageSlot","closure","function","TRUE","FALSE","(object) ","methods","base","4.0.5"
"packageSlot<-","closure","function","TRUE","FALSE","(object, value) ","methods","base","4.0.5"
"possibleExtends","closure","function","TRUE","FALSE","(class1, class2, ClassDef1 = getClassDef(class1), ClassDef2 = getClassDef(class2,     where = .classEnv(ClassDef1))) ","methods","base","4.0.5"
"prohibitGeneric","closure","function","TRUE","FALSE","(name, where = topenv(parent.frame())) ","methods","base","4.0.5"
"promptClass","closure","function","TRUE","FALSE","(clName, filename = NULL, type = ""class"", keywords = ""classes"",     where = topenv(parent.frame()), generatorName = clName) ","methods","base","4.0.5"
"promptMethods","closure","function","TRUE","FALSE","(f, filename = NULL, methods) ","methods","base","4.0.5"
"prototype","closure","function","TRUE","FALSE","(...) ","methods","base","4.0.5"
"rbind2","closure","standardGeneric","TRUE","TRUE","(x, y, ...) ","methods","base","4.0.5"
"reconcilePropertiesAndPrototype","closure","function","TRUE","FALSE","(name, properties, prototype, superClasses, where) ","methods","base","4.0.5"
"registerImplicitGenerics","closure","function","TRUE","FALSE","(what = .ImplicitGenericsTable(where), where = topenv(parent.frame())) ","methods","base","4.0.5"
"rematchDefinition","closure","function","TRUE","FALSE","(definition, generic, mnames, fnames, signature) ","methods","base","4.0.5"
"removeClass","closure","function","TRUE","FALSE","(Class, where = topenv(parent.frame())) ","methods","base","4.0.5"
"removeGeneric","closure","function","TRUE","FALSE","(f, where = topenv(parent.frame())) ","methods","base","4.0.5"
"removeMethod","closure","function","TRUE","FALSE","(f, signature = character(), where = topenv(parent.frame())) ","methods","base","4.0.5"
"removeMethods","closure","function","TRUE","FALSE","(f, where = topenv(parent.frame()), all = missing(where)) ","methods","base","4.0.5"
"representation","closure","function","TRUE","FALSE","(...) ","methods","base","4.0.5"
"requireMethods","closure","function","TRUE","FALSE","(functions, signature, message = """", where = topenv(parent.frame())) ","methods","base","4.0.5"
"resetClass","closure","function","TRUE","FALSE","(Class, classDef, where) ","methods","base","4.0.5"
"resetGeneric","closure","function","TRUE","FALSE","(f, fdef = getGeneric(f, where = where), mlist = getMethodsForDispatch(fdef),     where = topenv(parent.frame()), deflt = finalDefaultMethod(mlist)) ","methods","base","4.0.5"
"sealClass","closure","function","TRUE","FALSE","(Class, where = topenv(parent.frame())) ","methods","base","4.0.5"
"selectMethod","closure","function","TRUE","FALSE","(f, signature, optional = FALSE, useInherited = TRUE,     mlist = if (!is.null(fdef)) getMethodsForDispatch(fdef),     fdef = getGeneric(f, !optional), verbose = FALSE, doCache = FALSE) ","methods","base","4.0.5"
"selectSuperClasses","closure","function","TRUE","FALSE","(Class, dropVirtual = FALSE, namesOnly = TRUE, directOnly = TRUE,     simpleOnly = directOnly, where = topenv(parent.frame())) ","methods","base","4.0.5"
"setAs","closure","function","TRUE","FALSE","(from, to, def, replace = NULL, where = topenv(parent.frame())) ","methods","base","4.0.5"
"setClass","closure","function","TRUE","FALSE","(Class, representation = list(), prototype = NULL, contains = character(),     validity = NULL, access = list(), where = topenv(parent.frame()),     version = .newExternalptr(), sealed = FALSE, package = getPackageName(where),     S3methods = FALSE, slots) ","methods","base","4.0.5"
"setClassUnion","closure","function","TRUE","FALSE","(name, members = character(), where = topenv(parent.frame())) ","methods","base","4.0.5"
"setDataPart","closure","function","TRUE","FALSE","(object, value, check = TRUE) ","methods","base","4.0.5"
"setGeneric","closure","function","TRUE","FALSE","(name, def = NULL, group = list(), valueClass = character(),     where = topenv(parent.frame()), package = NULL, signature = NULL,     useAsDefault = NULL, genericFunction = NULL, simpleInheritanceOnly = NULL) ","methods","base","4.0.5"
"setGenericImplicit","closure","function","TRUE","FALSE","(name, where = topenv(parent.frame()), restore = TRUE) ","methods","base","4.0.5"
"setGroupGeneric","closure","function","TRUE","FALSE","(name, def = NULL, group = list(), valueClass = character(),     knownMembers = list(), package = getPackageName(where), where = topenv(parent.frame())) ","methods","base","4.0.5"
"setIs","closure","function","TRUE","FALSE","(class1, class2, test = NULL, coerce = NULL, replace = NULL,     by = character(), where = topenv(parent.frame()), classDef = getClass(class1,         TRUE, where = where), extensionObject = NULL, doComplete = TRUE) ","methods","base","4.0.5"
"setLoadAction","closure","function","TRUE","FALSE","(action, aname = """", where = topenv(parent.frame())) ","methods","base","4.0.5"
"setLoadActions","closure","function","TRUE","FALSE","(..., .where = topenv(parent.frame())) ","methods","base","4.0.5"
"setMethod","closure","function","TRUE","FALSE","(f, signature = character(), definition, where = topenv(parent.frame()),     valueClass = NULL, sealed = FALSE) ","methods","base","4.0.5"
"setOldClass","closure","function","TRUE","FALSE","(Classes, prototype = NULL, where = topenv(parent.frame()),     test = FALSE, S4Class) ","methods","base","4.0.5"
"setPackageName","closure","function","TRUE","FALSE","(pkg, env) ","methods","base","4.0.5"
"setPrimitiveMethods","closure","function","TRUE","FALSE","(f, fdef, code, generic, mlist = get("".Methods"", envir = environment(generic))) ","methods","base","4.0.5"
"setRefClass","closure","function","TRUE","FALSE","(Class, fields = character(), contains = character(),     methods = list(), where = topenv(parent.frame()), inheritPackage = FALSE,     ...) ","methods","base","4.0.5"
"setReplaceMethod","closure","function","TRUE","FALSE","(f, ..., where = topenv(parent.frame())) ","methods","base","4.0.5"
"setValidity","closure","function","TRUE","FALSE","(Class, method, where = topenv(parent.frame())) ","methods","base","4.0.5"
"show","closure","standardGeneric","TRUE","TRUE","(object) ","methods","base","4.0.5"
"showClass","closure","function","TRUE","FALSE","(Class, complete = TRUE, propertiesAreCalled = ""Slots"") ","methods","base","4.0.5"
"showDefault","closure","function","TRUE","FALSE","(object, oldMethods = TRUE) ","methods","base","4.0.5"
"showExtends","closure","function","TRUE","FALSE","(ext, printTo = stdout()) ","methods","base","4.0.5"
"showMethods","closure","function","TRUE","FALSE","(f = character(), where = topenv(parent.frame()), classes = NULL,     includeDefs = FALSE, inherited = !includeDefs, showEmpty,     printTo = stdout(), fdef = getGeneric(f, where = where)) ","methods","base","4.0.5"
"showMlist","closure","function","TRUE","FALSE","(mlist, includeDefs = TRUE, inherited = TRUE, classes = NULL,     useArgNames = TRUE, printTo = stdout()) ","methods","base","4.0.5"
"sigToEnv","closure","function","TRUE","FALSE","(signature, generic) ","methods","base","4.0.5"
"signature","closure","function","TRUE","FALSE","(...) ","methods","base","4.0.5"
"slot","closure","function","TRUE","FALSE","(object, name) ","methods","base","4.0.5"
"slot<-","closure","function","TRUE","FALSE","(object, name, check = TRUE, value) ","methods","base","4.0.5"
"slotNames","closure","function","TRUE","FALSE","(x) ","methods","base","4.0.5"
"slotsFromS3","closure","standardGeneric","TRUE","TRUE","(object) ","methods","base","4.0.5"
"substituteDirect","closure","function","TRUE","FALSE","(object, frame = parent.frame(), cleanFunction = TRUE) ","methods","base","4.0.5"
"substituteFunctionArgs","closure","function","TRUE","FALSE","(def, newArgs, args = formalArgs(def), silent = FALSE,     functionName = ""a function"") ","methods","base","4.0.5"
"superClassDepth","closure","function","TRUE","FALSE","(ClassDef, soFar = ClassDef@className, simpleOnly = TRUE) ","methods","base","4.0.5"
"testInheritedMethods","closure","function","TRUE","FALSE","(f, signatures, test = TRUE, virtual = FALSE, groupMethods = TRUE,     where = .GlobalEnv) ","methods","base","4.0.5"
"testVirtual","closure","function","TRUE","FALSE","(properties, extends, prototype, where) ","methods","base","4.0.5"
"tryNew","closure","function","TRUE","FALSE","(Class, where) ","methods","base","4.0.5"
"unRematchDefinition","closure","function","TRUE","FALSE","(definition) ","methods","base","4.0.5"
"validObject","closure","function","TRUE","FALSE","(object, test = FALSE, complete = FALSE) ","methods","base","4.0.5"
"validSlotNames","closure","function","TRUE","FALSE","(names) ","methods","base","4.0.5"
"%.%","closure","function","TRUE","FALSE","(a, b) ","mgcv","recommended","4.0.5"
".Depends","character","character","FALSE","FALSE","NA","mgcv","recommended","4.0.5"
"FFdes","closure","function","TRUE","FALSE","(size = 5, ccd = FALSE) ","mgcv","recommended","4.0.5"
"Predict.matrix","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix.Bspline.smooth","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix.cr.smooth","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix.cs.smooth","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix.cyclic.smooth","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix.duchon.spline","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix.gp.smooth","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix.mrf.smooth","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix.pspline.smooth","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix.random.effect","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix.sf","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix.soap.film","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix.sos.smooth","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix.sw","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix.t2.smooth","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix.tensor.smooth","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix.tprs.smooth","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix.ts.smooth","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"Predict.matrix2","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"PredictMat","closure","function","TRUE","FALSE","(object, data, n = nrow(data)) ","mgcv","recommended","4.0.5"
"Rrank","closure","function","TRUE","FALSE","(R, tol = .Machine$double.eps^0.9) ","mgcv","recommended","4.0.5"
"Sl.inirep","closure","function","TRUE","FALSE","(Sl, X, l = 0, r = 0, nt = 1) ","mgcv","recommended","4.0.5"
"Sl.initial.repara","closure","function","TRUE","FALSE","(Sl, X, inverse = FALSE, both.sides = TRUE, cov = TRUE,     nt = 1) ","mgcv","recommended","4.0.5"
"Sl.repara","closure","function","TRUE","FALSE","(rp, X, inverse = FALSE, both.sides = TRUE) ","mgcv","recommended","4.0.5"
"Sl.setup","closure","function","TRUE","FALSE","(G, cholesky = FALSE, no.repara = FALSE, sparse = FALSE) ","mgcv","recommended","4.0.5"
"Tweedie","closure","function","TRUE","FALSE","(p = 1, link = power(0)) ","mgcv","recommended","4.0.5"
"XWXd","closure","function","TRUE","FALSE","(X, w, k, ks, ts, dt, v, qc, nthreads = 1, drop = NULL,     ar.stop = -1, ar.row = -1, ar.w = -1, lt = NULL, rt = NULL) ","mgcv","recommended","4.0.5"
"XWyd","closure","function","TRUE","FALSE","(X, w, y, k, ks, ts, dt, v, qc, drop = NULL, ar.stop = -1,     ar.row = -1, ar.w = -1, lt = NULL) ","mgcv","recommended","4.0.5"
"Xbd","closure","function","TRUE","FALSE","(X, beta, k, ks, ts, dt, v, qc, drop = NULL, lt = NULL) ","mgcv","recommended","4.0.5"
"anova.gam","closure","function","TRUE","FALSE","(object, ..., dispersion = NULL, test = NULL, freq = FALSE) ","mgcv","recommended","4.0.5"
"bam","closure","function","TRUE","FALSE","(formula, family = gaussian(), data = list(), weights = NULL,     subset = NULL, na.action = na.omit, offset = NULL, method = ""fREML"",     control = list(), select = FALSE, scale = 0, gamma = 1, knots = NULL,     sp = NULL, min.sp = NULL, paraPen = NULL, chunk.size = 10000,     rho = 0, AR.start = NULL, discrete = FALSE, cluster = NULL,     nthreads = 1, gc.level = 1, use.chol = FALSE, samfrac = 1,     coef = NULL, drop.unused.levels = TRUE, G = NULL, fit = TRUE,     drop.intercept = NULL, ...) ","mgcv","recommended","4.0.5"
"bam.update","closure","function","TRUE","FALSE","(b, data, chunk.size = 10000) ","mgcv","recommended","4.0.5"
"bandchol","closure","function","TRUE","FALSE","(B) ","mgcv","recommended","4.0.5"
"betar","closure","function","TRUE","FALSE","(theta = NULL, link = ""logit"", eps = .Machine$double.eps *     100) ","mgcv","recommended","4.0.5"
"blas.thread.test","closure","function","TRUE","FALSE","(n = 1000, nt = 4) ","mgcv","recommended","4.0.5"
"cSplineDes","closure","function","TRUE","FALSE","(x, knots, ord = 4, derivs = 0) ","mgcv","recommended","4.0.5"
"choldrop","closure","function","TRUE","FALSE","(R, k) ","mgcv","recommended","4.0.5"
"cholup","closure","function","TRUE","FALSE","(R, u, up = TRUE) ","mgcv","recommended","4.0.5"
"concurvity","closure","function","TRUE","FALSE","(b, full = TRUE) ","mgcv","recommended","4.0.5"
"cox.ph","closure","function","TRUE","FALSE","(link = ""identity"") ","mgcv","recommended","4.0.5"
"d.mvt","closure","function","TRUE","FALSE","(x, mu, V, df, R = NULL) ","mgcv","recommended","4.0.5"
"dDeta","closure","function","TRUE","FALSE","(y, mu, wt, theta, fam, deriv = 0) ","mgcv","recommended","4.0.5"
"diagXVXd","closure","function","TRUE","FALSE","(X, V, k, ks, ts, dt, v, qc, drop = NULL, nthreads = 1,     lt = NULL, rt = NULL) ","mgcv","recommended","4.0.5"
"dmvn","closure","function","TRUE","FALSE","(x, mu, V, R = NULL) ","mgcv","recommended","4.0.5"
"exclude.too.far","closure","function","TRUE","FALSE","(g1, g2, d1, d2, dist) ","mgcv","recommended","4.0.5"
"extract.lme.cov","closure","function","TRUE","FALSE","(b, data = NULL, start.level = 1) ","mgcv","recommended","4.0.5"
"extract.lme.cov2","closure","function","TRUE","FALSE","(b, data = NULL, start.level = 1) ","mgcv","recommended","4.0.5"
"fix.family.link","closure","function","TRUE","FALSE","(fam) ","mgcv","recommended","4.0.5"
"fix.family.ls","closure","function","TRUE","FALSE","(fam) ","mgcv","recommended","4.0.5"
"fix.family.qf","closure","function","TRUE","FALSE","(fam) ","mgcv","recommended","4.0.5"
"fix.family.rd","closure","function","TRUE","FALSE","(fam) ","mgcv","recommended","4.0.5"
"fix.family.var","closure","function","TRUE","FALSE","(fam) ","mgcv","recommended","4.0.5"
"fixDependence","closure","function","TRUE","FALSE","(X1, X2, tol = .Machine$double.eps^0.5, rank.def = 0,     strict = FALSE) ","mgcv","recommended","4.0.5"
"formXtViX","closure","function","TRUE","FALSE","(V, X) ","mgcv","recommended","4.0.5"
"formula.gam","closure","function","TRUE","FALSE","(x, ...) ","mgcv","recommended","4.0.5"
"fs.boundary","closure","function","TRUE","FALSE","(r0 = 0.1, r = 0.5, l = 3, n.theta = 20) ","mgcv","recommended","4.0.5"
"fs.test","closure","function","TRUE","FALSE","(x, y, r0 = 0.1, r = 0.5, l = 3, b = 1, exclude = TRUE) ","mgcv","recommended","4.0.5"
"full.score","closure","function","TRUE","FALSE","(sp, G, family, control, gamma, ...) ","mgcv","recommended","4.0.5"
"gam","closure","function","TRUE","FALSE","(formula, family = gaussian(), data = list(), weights = NULL,     subset = NULL, na.action, offset = NULL, method = ""GCV.Cp"",     optimizer = c(""outer"", ""newton""), control = list(), scale = 0,     select = FALSE, knots = NULL, sp = NULL, min.sp = NULL, H = NULL,     gamma = 1, fit = TRUE, paraPen = NULL, G = NULL, in.out = NULL,     drop.unused.levels = TRUE, drop.intercept = NULL, discrete = FALSE,     ...) ","mgcv","recommended","4.0.5"
"gam.check","closure","function","TRUE","FALSE","(b, old.style = FALSE, type = c(""deviance"", ""pearson"",     ""response""), k.sample = 5000, k.rep = 200, rep = 0, level = 0.9,     rl.col = 2, rep.col = ""gray80"", ...) ","mgcv","recommended","4.0.5"
"gam.control","closure","function","TRUE","FALSE","(nthreads = 1, irls.reg = 0, epsilon = 1e-07, maxit = 200,     mgcv.tol = 1e-07, mgcv.half = 15, trace = FALSE, rank.tol = .Machine$double.eps^0.5,     nlm = list(), optim = list(), newton = list(), outerPIsteps = 0,     idLinksBases = TRUE, scalePenalty = TRUE, efs.lspmax = 15,     efs.tol = 0.1, keepData = FALSE, scale.est = ""fletcher"",     edge.correct = FALSE) ","mgcv","recommended","4.0.5"
"gam.fit","closure","function","TRUE","FALSE","(G, start = NULL, etastart = NULL, mustart = NULL, family = gaussian(),     control = gam.control(), gamma = 1, fixedSteps = (control$maxit +         1), ...) ","mgcv","recommended","4.0.5"
"gam.fit3","closure","function","TRUE","FALSE","(x, y, sp, Eb, UrS = list(), weights = rep(1, nobs),     start = NULL, etastart = NULL, mustart = NULL, offset = rep(0,         nobs), U1 = diag(ncol(x)), Mp = -1, family = gaussian(),     control = gam.control(), intercept = TRUE, deriv = 2, gamma = 1,     scale = 1, printWarn = TRUE, scoreType = ""REML"", null.coef = rep(0,         ncol(x)), pearson.extra = 0, dev.extra = 0, n.true = -1,     Sl = NULL, ...) ","mgcv","recommended","4.0.5"
"gam.fit5.post.proc","closure","function","TRUE","FALSE","(object, Sl, L, lsp0, S, off) ","mgcv","recommended","4.0.5"
"gam.mh","closure","function","TRUE","FALSE","(b, ns = 10000, burn = 1000, t.df = 40, rw.scale = 0.25,     thin = 1) ","mgcv","recommended","4.0.5"
"gam.outer","closure","function","TRUE","FALSE","(lsp, fscale, family, control, method, optimizer, criterion,     scale, gamma, G, start = NULL, ...) ","mgcv","recommended","4.0.5"
"gam.reparam","closure","function","TRUE","FALSE","(rS, lsp, deriv) ","mgcv","recommended","4.0.5"
"gam.side","closure","function","TRUE","FALSE","(sm, Xp, tol = .Machine$double.eps^0.5, with.pen = FALSE) ","mgcv","recommended","4.0.5"
"gam.vcomp","closure","function","TRUE","FALSE","(x, rescale = TRUE, conf.lev = 0.95) ","mgcv","recommended","4.0.5"
"gam2derivative","closure","function","TRUE","FALSE","(lsp, args, ...) ","mgcv","recommended","4.0.5"
"gam2objective","closure","function","TRUE","FALSE","(lsp, args, ...) ","mgcv","recommended","4.0.5"
"gamSim","closure","function","TRUE","FALSE","(eg = 1, n = 400, dist = ""normal"", scale = 2, verbose = TRUE) ","mgcv","recommended","4.0.5"
"gamlss.etamu","closure","function","TRUE","FALSE","(l1, l2, l3 = NULL, l4 = NULL, ig1, g2, g3 = NULL, g4 = NULL,     i2, i3 = NULL, i4 = NULL, deriv = 0) ","mgcv","recommended","4.0.5"
"gamlss.gH","closure","function","TRUE","FALSE","(X, jj, l1, l2, i2, l3 = 0, i3 = 0, l4 = 0, i4 = 0,     d1b = 0, d2b = 0, deriv = 0, fh = NULL, D = NULL) ","mgcv","recommended","4.0.5"
"gamm","closure","function","TRUE","FALSE","(formula, random = NULL, correlation = NULL, family = gaussian(),     data = list(), weights = NULL, subset = NULL, na.action,     knots = NULL, control = list(niterEM = 0, optimMethod = ""L-BFGS-B"",         returnObject = TRUE), niterPQL = 20, verbosePQL = TRUE,     method = ""ML"", drop.unused.levels = TRUE, mustart = NULL,     etastart = NULL, ...) ","mgcv","recommended","4.0.5"
"gammals","closure","function","TRUE","FALSE","(link = list(""identity"", ""log""), b = -7) ","mgcv","recommended","4.0.5"
"gaulss","closure","function","TRUE","FALSE","(link = list(""identity"", ""logb""), b = 0.01) ","mgcv","recommended","4.0.5"
"get.var","closure","function","TRUE","FALSE","(txt, data, vecMat = TRUE) ","mgcv","recommended","4.0.5"
"gevlss","closure","function","TRUE","FALSE","(link = list(""identity"", ""identity"", ""logit"")) ","mgcv","recommended","4.0.5"
"ginla","closure","function","TRUE","FALSE","(G, A = NULL, nk = 16, nb = 100, J = 1, interactive = FALSE,     int = 0, approx = 0) ","mgcv","recommended","4.0.5"
"gumbls","closure","function","TRUE","FALSE","(link = list(""identity"", ""log""), b = -7) ","mgcv","recommended","4.0.5"
"in.out","closure","function","TRUE","FALSE","(bnd, x) ","mgcv","recommended","4.0.5"
"inSide","closure","function","TRUE","FALSE","(bnd, x, y) ","mgcv","recommended","4.0.5"
"influence.gam","closure","function","TRUE","FALSE","(model, ...) ","mgcv","recommended","4.0.5"
"initial.sp","closure","function","TRUE","FALSE","(X, S, off, expensive = FALSE, XX = FALSE) ","mgcv","recommended","4.0.5"
"interpret.gam","closure","function","TRUE","FALSE","(gf, extra.special = NULL) ","mgcv","recommended","4.0.5"
"jagam","closure","function","TRUE","FALSE","(formula, family = gaussian, data = list(), file, weights = NULL,     na.action, offset = NULL, knots = NULL, sp = NULL, drop.unused.levels = TRUE,     control = gam.control(), centred = TRUE, sp.prior = ""gamma"",     diagonalize = FALSE) ","mgcv","recommended","4.0.5"
"k.check","closure","function","TRUE","FALSE","(b, subsample = 5000, n.rep = 400) ","mgcv","recommended","4.0.5"
"ldTweedie","closure","function","TRUE","FALSE","(y, mu = y, p = 1.5, phi = 1, rho = NA, theta = NA,     a = 1.001, b = 1.999, all.derivs = FALSE) ","mgcv","recommended","4.0.5"
"ldetS","closure","function","TRUE","FALSE","(Sl, rho, fixed, np, root = FALSE, repara = TRUE, nt = 1,     deriv = 2, sparse = FALSE) ","mgcv","recommended","4.0.5"
"logLik.gam","closure","function","TRUE","FALSE","(object, ...) ","mgcv","recommended","4.0.5"
"ls.size","closure","function","TRUE","FALSE","(x) ","mgcv","recommended","4.0.5"
"magic","closure","function","TRUE","FALSE","(y, X, sp, S, off, L = NULL, lsp0 = NULL, rank = NULL,     H = NULL, C = NULL, w = NULL, gamma = 1, scale = 1, gcv = TRUE,     ridge.parameter = NULL, control = list(tol = 1e-06, step.half = 25,         rank.tol = .Machine$double.eps^0.5), extra.rss = 0, n.score = length(y),     nthreads = 1) ","mgcv","recommended","4.0.5"
"magic.post.proc","closure","function","TRUE","FALSE","(X, object, w = NULL) ","mgcv","recommended","4.0.5"
"mini.roots","closure","function","TRUE","FALSE","(S, off, np, rank = NULL) ","mgcv","recommended","4.0.5"
"model.matrix.gam","closure","function","TRUE","FALSE","(object, ...) ","mgcv","recommended","4.0.5"
"mono.con","closure","function","TRUE","FALSE","(x, up = TRUE, lower = NA, upper = NA) ","mgcv","recommended","4.0.5"
"mroot","closure","function","TRUE","FALSE","(A, rank = NULL, method = ""chol"") ","mgcv","recommended","4.0.5"
"multinom","closure","function","TRUE","FALSE","(K = 1) ","mgcv","recommended","4.0.5"
"mvn","closure","function","TRUE","FALSE","(d = 2) ","mgcv","recommended","4.0.5"
"nb","closure","function","TRUE","FALSE","(theta = NULL, link = ""log"") ","mgcv","recommended","4.0.5"
"negbin","closure","function","TRUE","FALSE","(theta = stop(""'theta' must be specified""), link = ""log"") ","mgcv","recommended","4.0.5"
"new.name","closure","function","TRUE","FALSE","(proposed, old.names) ","mgcv","recommended","4.0.5"
"notExp","closure","function","TRUE","FALSE","(x) ","mgcv","recommended","4.0.5"
"notExp2","closure","function","TRUE","FALSE","(x, d = .Options$mgcv.vc.logrange, b = 1/d) ","mgcv","recommended","4.0.5"
"notLog","closure","function","TRUE","FALSE","(x) ","mgcv","recommended","4.0.5"
"notLog2","closure","function","TRUE","FALSE","(x, d = .Options$mgcv.vc.logrange, b = 1/d) ","mgcv","recommended","4.0.5"
"null.space.dimension","closure","function","TRUE","FALSE","(d, m) ","mgcv","recommended","4.0.5"
"ocat","closure","function","TRUE","FALSE","(theta = NULL, link = ""identity"", R = NULL) ","mgcv","recommended","4.0.5"
"pcls","closure","function","TRUE","FALSE","(M) ","mgcv","recommended","4.0.5"
"pdIdnot","closure","function","TRUE","FALSE","(value = numeric(0), form = NULL, nam = NULL, data = sys.frame(sys.parent())) ","mgcv","recommended","4.0.5"
"pdTens","closure","function","TRUE","FALSE","(value = numeric(0), form = NULL, nam = NULL, data = sys.frame(sys.parent())) ","mgcv","recommended","4.0.5"
"pen.edf","closure","function","TRUE","FALSE","(x) ","mgcv","recommended","4.0.5"
"place.knots","closure","function","TRUE","FALSE","(x, nk) ","mgcv","recommended","4.0.5"
"plot.gam","closure","function","TRUE","FALSE","(x, residuals = FALSE, rug = NULL, se = TRUE, pages = 0,     select = NULL, scale = -1, n = 100, n2 = 40, n3 = 3, pers = FALSE,     theta = 30, phi = 30, jit = FALSE, xlab = NULL, ylab = NULL,     main = NULL, ylim = NULL, xlim = NULL, too.far = 0.1, all.terms = FALSE,     shade = FALSE, shade.col = ""gray80"", shift = 0, trans = I,     seWithMean = FALSE, unconditional = FALSE, by.resids = FALSE,     scheme = 0, ...) ","mgcv","recommended","4.0.5"
"polys.plot","closure","function","TRUE","FALSE","(pc, z = NULL, scheme = ""heat"", lab = """", ...) ","mgcv","recommended","4.0.5"
"predict.bam","closure","function","TRUE","FALSE","(object, newdata, type = ""link"", se.fit = FALSE, terms = NULL,     exclude = NULL, block.size = 50000, newdata.guaranteed = FALSE,     na.action = na.pass, cluster = NULL, discrete = TRUE, n.threads = 1,     ...) ","mgcv","recommended","4.0.5"
"predict.gam","closure","function","TRUE","FALSE","(object, newdata, type = ""link"", se.fit = FALSE, terms = NULL,     exclude = NULL, block.size = NULL, newdata.guaranteed = FALSE,     na.action = na.pass, unconditional = FALSE, iterms.type = NULL,     ...) ","mgcv","recommended","4.0.5"
"print.anova.gam","closure","function","TRUE","FALSE","(x, digits = max(3, getOption(""digits"") - 3), ...) ","mgcv","recommended","4.0.5"
"print.gam","closure","function","TRUE","FALSE","(x, ...) ","mgcv","recommended","4.0.5"
"print.summary.gam","closure","function","TRUE","FALSE","(x, digits = max(3, getOption(""digits"") - 3), signif.stars = getOption(""show.signif.stars""),     ...) ","mgcv","recommended","4.0.5"
"psum.chisq","closure","function","TRUE","FALSE","(q, lb, df = rep(1, length(lb)), nc = rep(0, length(lb)),     sigz = 0, lower.tail = FALSE, tol = 2e-05, nlim = 1e+05,     trace = FALSE) ","mgcv","recommended","4.0.5"
"qq.gam","closure","function","TRUE","FALSE","(object, rep = 0, level = 0.9, s.rep = 10, type = c(""deviance"",     ""pearson"", ""response""), pch = ""."", rl.col = 2, rep.col = ""gray80"",     ...) ","mgcv","recommended","4.0.5"
"r.mvt","closure","function","TRUE","FALSE","(n, mu, V, df) ","mgcv","recommended","4.0.5"
"rTweedie","closure","function","TRUE","FALSE","(mu, p = 1.5, phi = 1) ","mgcv","recommended","4.0.5"
"residuals.gam","closure","function","TRUE","FALSE","(object, type = ""deviance"", ...) ","mgcv","recommended","4.0.5"
"rig","closure","function","TRUE","FALSE","(n, mean, scale) ","mgcv","recommended","4.0.5"
"rmvn","closure","function","TRUE","FALSE","(n, mu, V) ","mgcv","recommended","4.0.5"
"s","closure","function","TRUE","FALSE","(..., k = -1, fx = FALSE, bs = ""tp"", m = NA, by = NA,     xt = NULL, id = NULL, sp = NULL, pc = NULL) ","mgcv","recommended","4.0.5"
"scat","closure","function","TRUE","FALSE","(theta = NULL, link = ""identity"", min.df = 3) ","mgcv","recommended","4.0.5"
"sdiag","closure","function","TRUE","FALSE","(A, k = 0) ","mgcv","recommended","4.0.5"
"sdiag<-","closure","function","TRUE","FALSE","(A, k = 0, value) ","mgcv","recommended","4.0.5"
"shash","closure","function","TRUE","FALSE","(link = list(""identity"", ""logeb"", ""identity"", ""identity""),     b = 0.01, phiPen = 0.001) ","mgcv","recommended","4.0.5"
"sim2jam","closure","function","TRUE","FALSE","(sam, pregam, edf.type = 2, burnin = 0) ","mgcv","recommended","4.0.5"
"slanczos","closure","function","TRUE","FALSE","(A, k = 10, kl = -1, tol = .Machine$double.eps^0.5,     nt = 1) ","mgcv","recommended","4.0.5"
"smooth.construct","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.ad.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.bs.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.cc.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.cp.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.cr.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.cs.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.ds.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.gp.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.mrf.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.ps.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.re.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.sf.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.so.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.sos.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.sw.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.t2.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.tensor.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.tp.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct.ts.smooth.spec","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.construct2","closure","function","TRUE","FALSE","(object, data, knots) ","mgcv","recommended","4.0.5"
"smooth.info","closure","function","TRUE","FALSE","(object) ","mgcv","recommended","4.0.5"
"smooth2random","closure","function","TRUE","FALSE","(object, vnames, type = 1) ","mgcv","recommended","4.0.5"
"smoothCon","closure","function","TRUE","FALSE","(object, data, knots = NULL, absorb.cons = FALSE, scale.penalty = TRUE,     n = nrow(data), dataX = NULL, null.space.penalty = FALSE,     sparse.cons = 0, diagonal.penalty = FALSE, apply.by = TRUE,     modCon = 0) ","mgcv","recommended","4.0.5"
"sp.vcov","closure","function","TRUE","FALSE","(x, edge.correct = TRUE, reg = 0.001) ","mgcv","recommended","4.0.5"
"spasm.construct","closure","function","TRUE","FALSE","(object, data) ","mgcv","recommended","4.0.5"
"spasm.smooth","closure","function","TRUE","FALSE","(object, X, residual = FALSE, block = 0) ","mgcv","recommended","4.0.5"
"spasm.sp","closure","function","TRUE","FALSE","(object, sp, w = rep(1, object$nobs), get.trH = TRUE,     block = 0, centre = FALSE) ","mgcv","recommended","4.0.5"
"summary.gam","closure","function","TRUE","FALSE","(object, dispersion = NULL, freq = FALSE, re.test = TRUE,     ...) ","mgcv","recommended","4.0.5"
"t2","closure","function","TRUE","FALSE","(..., k = NA, bs = ""cr"", m = NA, d = NA, by = NA, xt = NULL,     id = NULL, sp = NULL, full = FALSE, ord = NULL, pc = NULL) ","mgcv","recommended","4.0.5"
"te","closure","function","TRUE","FALSE","(..., k = NA, bs = ""cr"", m = NA, d = NA, by = NA, fx = FALSE,     np = TRUE, xt = NULL, id = NULL, sp = NULL, pc = NULL) ","mgcv","recommended","4.0.5"
"tensor.prod.model.matrix","closure","function","TRUE","FALSE","(X) ","mgcv","recommended","4.0.5"
"tensor.prod.penalties","closure","function","TRUE","FALSE","(S) ","mgcv","recommended","4.0.5"
"ti","closure","function","TRUE","FALSE","(..., k = NA, bs = ""cr"", m = NA, d = NA, by = NA, fx = FALSE,     np = TRUE, xt = NULL, id = NULL, sp = NULL, mc = NULL, pc = NULL) ","mgcv","recommended","4.0.5"
"totalPenaltySpace","closure","function","TRUE","FALSE","(S, H, off, p) ","mgcv","recommended","4.0.5"
"trichol","closure","function","TRUE","FALSE","(ld, sd) ","mgcv","recommended","4.0.5"
"trind.generator","closure","function","TRUE","FALSE","(K = 2) ","mgcv","recommended","4.0.5"
"tw","closure","function","TRUE","FALSE","(theta = NULL, link = ""log"", a = 1.01, b = 1.99) ","mgcv","recommended","4.0.5"
"twlss","closure","function","TRUE","FALSE","(link = list(""log"", ""identity"", ""identity""), a = 1.01,     b = 1.99) ","mgcv","recommended","4.0.5"
"uniquecombs","closure","function","TRUE","FALSE","(x, ordered = FALSE) ","mgcv","recommended","4.0.5"
"vcov.gam","closure","function","TRUE","FALSE","(object, freq = FALSE, dispersion = NULL, unconditional = FALSE,     ...) ","mgcv","recommended","4.0.5"
"vis.gam","closure","function","TRUE","FALSE","(x, view = NULL, cond = list(), n.grid = 30, too.far = 0,     col = NA, color = ""heat"", contour.col = NULL, se = -1, type = ""link"",     plot.type = ""persp"", zlim = NULL, nCol = 50, ...) ","mgcv","recommended","4.0.5"
"ziP","closure","function","TRUE","FALSE","(theta = NULL, link = ""identity"", b = 0) ","mgcv","recommended","4.0.5"
"ziplss","closure","function","TRUE","FALSE","(link = list(""identity"", ""identity"")) ","mgcv","recommended","4.0.5"
"ACF","closure","function","TRUE","FALSE","(object, maxLag, ...) ","nlme","recommended","4.0.5"
"Alfalfa","list","nmGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Assay","list","nffGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"BodyWeight","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Cefamandole","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Dialyzer","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Dim","closure","function","TRUE","FALSE","(object, ...) ","nlme","recommended","4.0.5"
"Earthquake","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Fatigue","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Gasoline","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Glucose","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Glucose2","list","nmGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Gun","list","nffGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"IGF","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Initialize","closure","function","TRUE","FALSE","(object, data, ...) ","nlme","recommended","4.0.5"
"LDEsysMat","closure","function","TRUE","FALSE","(pars, incidence) ","nlme","recommended","4.0.5"
"Machines","list","nffGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"MathAchSchool","list","data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"MathAchieve","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Meat","list","nffGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Milk","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Muscle","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Names","closure","function","TRUE","FALSE","(object, ...) ","nlme","recommended","4.0.5"
"Names<-","closure","function","TRUE","FALSE","(object, ..., value) ","nlme","recommended","4.0.5"
"Nitrendipene","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Oats","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Orthodont","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Ovary","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Oxboys","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Oxide","list","nmGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"PBG","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Phenobarb","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Pixel","list","nmGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Quinidine","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Rail","list","nffGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"RatPupWeight","list","nffGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Relaxin","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Remifentanil","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Soybean","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Spruce","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Tetracycline1","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Tetracycline2","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"VarCorr","closure","function","TRUE","FALSE","(x, sigma = 1, ...) ","nlme","recommended","4.0.5"
"Variogram","closure","function","TRUE","FALSE","(object, distance, ...) ","nlme","recommended","4.0.5"
"Wafer","list","nmGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Wheat","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"Wheat2","list","nffGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"allCoef","closure","function","TRUE","FALSE","(..., extract = coef) ","nlme","recommended","4.0.5"
"anova.lme","closure","function","TRUE","FALSE","(object, ..., test = TRUE, type = c(""sequential"", ""marginal""),     adjustSigma = TRUE, Terms, L, verbose = FALSE) ","nlme","recommended","4.0.5"
"asOneFormula","closure","function","TRUE","FALSE","(..., omit = c(""."", ""pi"")) ","nlme","recommended","4.0.5"
"asTable","closure","function","TRUE","FALSE","(object) ","nlme","recommended","4.0.5"
"augPred","closure","function","TRUE","FALSE","(object, primary = NULL, minimum = min(primary), maximum = max(primary),     length.out = 51, ...) ","nlme","recommended","4.0.5"
"balancedGrouped","closure","function","TRUE","FALSE","(form, data, labels = NULL, units = NULL) ","nlme","recommended","4.0.5"
"bdf","list","nfnGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"coef<-","closure","function","TRUE","FALSE","(object, ..., value) ","nlme","recommended","4.0.5"
"coefficients<-","closure","function","TRUE","FALSE","(object, ..., value) ","nlme","recommended","4.0.5"
"collapse","closure","function","TRUE","FALSE","(object, ...) ","nlme","recommended","4.0.5"
"compareFits","closure","function","TRUE","FALSE","(object1, object2, which = 1:ncol(object1)) ","nlme","recommended","4.0.5"
"comparePred","closure","function","TRUE","FALSE","(object1, object2, primary = NULL, minimum = min(primary),     maximum = max(primary), length.out = 51, level = NULL, ...) ","nlme","recommended","4.0.5"
"corAR1","closure","function","TRUE","FALSE","(value = 0, form = ~1, fixed = FALSE) ","nlme","recommended","4.0.5"
"corARMA","closure","function","TRUE","FALSE","(value = double(p + q), form = ~1, p = 0, q = 0, fixed = FALSE) ","nlme","recommended","4.0.5"
"corCAR1","closure","function","TRUE","FALSE","(value = 0.2, form = ~1, fixed = FALSE) ","nlme","recommended","4.0.5"
"corCompSymm","closure","function","TRUE","FALSE","(value = 0, form = ~1, fixed = FALSE) ","nlme","recommended","4.0.5"
"corExp","closure","function","TRUE","FALSE","(value = numeric(0), form = ~1, nugget = FALSE, metric = c(""euclidean"",     ""maximum"", ""manhattan""), fixed = FALSE) ","nlme","recommended","4.0.5"
"corFactor","closure","function","TRUE","FALSE","(object, ...) ","nlme","recommended","4.0.5"
"corGaus","closure","function","TRUE","FALSE","(value = numeric(0), form = ~1, nugget = FALSE, metric = c(""euclidean"",     ""maximum"", ""manhattan""), fixed = FALSE) ","nlme","recommended","4.0.5"
"corIdent","closure","function","TRUE","FALSE","(form = NULL) ","nlme","recommended","4.0.5"
"corLin","closure","function","TRUE","FALSE","(value = numeric(0), form = ~1, nugget = FALSE, metric = c(""euclidean"",     ""maximum"", ""manhattan""), fixed = FALSE) ","nlme","recommended","4.0.5"
"corMatrix","closure","function","TRUE","FALSE","(object, ...) ","nlme","recommended","4.0.5"
"corNatural","closure","function","TRUE","FALSE","(value = numeric(0), form = ~1, fixed = FALSE) ","nlme","recommended","4.0.5"
"corRatio","closure","function","TRUE","FALSE","(value = numeric(0), form = ~1, nugget = FALSE, metric = c(""euclidean"",     ""maximum"", ""manhattan""), fixed = FALSE) ","nlme","recommended","4.0.5"
"corSpatial","closure","function","TRUE","FALSE","(value = numeric(0), form = ~1, nugget = FALSE, type = c(""spherical"",     ""exponential"", ""gaussian"", ""linear"", ""rational""), metric = c(""euclidean"",     ""maximum"", ""manhattan""), fixed = FALSE) ","nlme","recommended","4.0.5"
"corSpher","closure","function","TRUE","FALSE","(value = numeric(0), form = ~1, nugget = FALSE, metric = c(""euclidean"",     ""maximum"", ""manhattan""), fixed = FALSE) ","nlme","recommended","4.0.5"
"corSymm","closure","function","TRUE","FALSE","(value = numeric(0), form = ~1, fixed = FALSE) ","nlme","recommended","4.0.5"
"covariate<-","closure","function","TRUE","FALSE","(object, value) ","nlme","recommended","4.0.5"
"ergoStool","list","nffGroupedData/nfGroupedData/groupedData/data.frame","FALSE","FALSE","NA","nlme","recommended","4.0.5"
"fdHess","closure","function","TRUE","FALSE","(pars, fun, ..., .relStep = .Machine$double.eps^(1/3),     minAbsPar = 0) ","nlme","recommended","4.0.5"
"fixed.effects","closure","function","TRUE","FALSE","(object, ...) ","nlme","recommended","4.0.5"
"fixef","closure","function","TRUE","FALSE","(object, ...) ","nlme","recommended","4.0.5"
"gapply","closure","function","TRUE","FALSE","(object, which, FUN, form = formula(object), level,     groups = getGroups(object, form, level), ...) ","nlme","recommended","4.0.5"
"getCovariate","closure","function","TRUE","FALSE","(object, form = formula(object), data) ","nlme","recommended","4.0.5"
"getCovariateFormula","closure","function","TRUE","FALSE","(object) ","nlme","recommended","4.0.5"
"getData","closure","function","TRUE","FALSE","(object) ","nlme","recommended","4.0.5"
"getGroups","closure","function","TRUE","FALSE","(object, form = formula(object), level, data, sep = ""/"") ","nlme","recommended","4.0.5"
"getGroupsFormula","closure","function","TRUE","FALSE","(object, asList = FALSE, sep = ""/"") ","nlme","recommended","4.0.5"
"getResponse","closure","function","TRUE","FALSE","(object, form = formula(object)) ","nlme","recommended","4.0.5"
"getResponseFormula","closure","function","TRUE","FALSE","(object) ","nlme","recommended","4.0.5"
"getVarCov","closure","function","TRUE","FALSE","(obj, ...) ","nlme","recommended","4.0.5"
"gls","closure","function","TRUE","FALSE","(model, data = sys.frame(sys.parent()), correlation = NULL,     weights = NULL, subset, method = c(""REML"", ""ML""), na.action = na.fail,     control = list(), verbose = FALSE) ","nlme","recommended","4.0.5"
"glsApVar","closure","function","TRUE","FALSE","(glsSt, sigma, conLin = attr(glsSt, ""conLin""), .relStep = .Machine$double.eps^(1/3),     minAbsPar = 0, natural = TRUE) ","nlme","recommended","4.0.5"
"glsControl","closure","function","TRUE","FALSE","(maxIter = 50L, msMaxIter = 200L, tolerance = 1e-06,     msTol = 1e-07, msVerbose = FALSE, singular.ok = FALSE, returnObject = FALSE,     apVar = TRUE, .relStep = .Machine$double.eps^(1/3), opt = c(""nlminb"",         ""optim""), optimMethod = ""BFGS"", minAbsParApVar = 0.05,     natural = TRUE, sigma = NULL) ","nlme","recommended","4.0.5"
"glsEstimate","closure","function","TRUE","FALSE","(object, conLin = attr(object, ""conLin""), control = list(singular.ok = FALSE)) ","nlme","recommended","4.0.5"
"glsStruct","closure","function","TRUE","FALSE","(corStruct = NULL, varStruct = NULL) ","nlme","recommended","4.0.5"
"gnls","closure","function","TRUE","FALSE","(model, data = sys.frame(sys.parent()), params, start,     correlation = NULL, weights = NULL, subset, na.action = na.fail,     naPattern, control = list(), verbose = FALSE) ","nlme","recommended","4.0.5"
"gnlsControl","closure","function","TRUE","FALSE","(maxIter = 50, nlsMaxIter = 7, msMaxIter = 50, minScale = 0.001,     tolerance = 1e-06, nlsTol = 0.001, msTol = 1e-07, returnObject = FALSE,     msVerbose = FALSE, apVar = TRUE, .relStep = .Machine$double.eps^(1/3),     opt = c(""nlminb"", ""optim""), optimMethod = ""BFGS"", minAbsParApVar = 0.05,     sigma = NULL) ","nlme","recommended","4.0.5"
"gnlsStruct","closure","function","TRUE","FALSE","(corStruct = NULL, varStruct = NULL) ","nlme","recommended","4.0.5"
"groupedData","closure","function","TRUE","FALSE","(formula, data = NULL, order.groups = TRUE, FUN = function(x) max(x,     na.rm = TRUE), outer = NULL, inner = NULL, labels = NULL,     units = NULL) ","nlme","recommended","4.0.5"
"gsummary","closure","function","TRUE","FALSE","(object, FUN = function(x) mean(x, na.rm = TRUE), omitGroupingFactor = FALSE,     form = formula(object), level, groups = getGroups(object,         form, level), invariantsOnly = FALSE, ...) ","nlme","recommended","4.0.5"
"intervals","closure","function","TRUE","FALSE","(object, level = 0.95, ...) ","nlme","recommended","4.0.5"
"isBalanced","closure","function","TRUE","FALSE","(object, countOnly = FALSE, level) ","nlme","recommended","4.0.5"
"isInitialized","closure","function","TRUE","FALSE","(object) ","nlme","recommended","4.0.5"
"lmList","closure","function","TRUE","FALSE","(object, data, level, subset, na.action = na.fail, pool = TRUE,     warn.lm = TRUE) ","nlme","recommended","4.0.5"
"lmList.formula","closure","function","TRUE","FALSE","(object, data, level, subset, na.action = na.fail, pool = TRUE,     warn.lm = TRUE) ","nlme","recommended","4.0.5"
"lme","closure","function","TRUE","FALSE","(fixed, data = sys.frame(sys.parent()), random, correlation = NULL,     weights = NULL, subset, method = c(""REML"", ""ML""), na.action = na.fail,     control = list(), contrasts = NULL, keep.data = TRUE) ","nlme","recommended","4.0.5"
"lme.formula","closure","function","TRUE","FALSE","(fixed, data = sys.frame(sys.parent()), random = pdSymm(eval(as.call(fixed[-2]))),     correlation = NULL, weights = NULL, subset, method = c(""REML"",         ""ML""), na.action = na.fail, control = list(), contrasts = NULL,     keep.data = TRUE) ","nlme","recommended","4.0.5"
"lme.lmList","closure","function","TRUE","FALSE","(fixed, data = sys.frame(sys.parent()), random, correlation = NULL,     weights = NULL, subset, method = c(""REML"", ""ML""), na.action = na.fail,     control = list(), contrasts = NULL, keep.data = TRUE) ","nlme","recommended","4.0.5"
"lmeControl","closure","function","TRUE","FALSE","(maxIter = 50, msMaxIter = 50, tolerance = 1e-06, niterEM = 25,     msMaxEval = 200, msTol = 1e-07, msVerbose = FALSE, returnObject = FALSE,     gradHess = TRUE, apVar = TRUE, .relStep = .Machine$double.eps^(1/3),     minAbsParApVar = 0.05, opt = c(""nlminb"", ""optim""), optimMethod = ""BFGS"",     natural = TRUE, sigma = NULL, allow.n.lt.q = FALSE, ...) ","nlme","recommended","4.0.5"
"lmeStruct","closure","function","TRUE","FALSE","(reStruct, corStruct = NULL, varStruct = NULL) ","nlme","recommended","4.0.5"
"logDet","closure","function","TRUE","FALSE","(object, ...) ","nlme","recommended","4.0.5"
"matrix<-","closure","function","TRUE","FALSE","(object, value) ","nlme","recommended","4.0.5"
"needUpdate","closure","function","TRUE","FALSE","(object) ","nlme","recommended","4.0.5"
"nfGroupedData","closure","function","TRUE","FALSE","(formula, data = NULL, order.groups = TRUE, FUN = function(x) max(x,     na.rm = TRUE), outer = NULL, inner = NULL, labels = NULL,     units = NULL) ","nlme","recommended","4.0.5"
"nlme","closure","function","TRUE","FALSE","(model, data = sys.frame(sys.parent()), fixed, random = fixed,     groups, start, correlation = NULL, weights = NULL, subset,     method = c(""ML"", ""REML""), na.action = na.fail, naPattern,     control = list(), verbose = FALSE) ","nlme","recommended","4.0.5"
"nlme.formula","closure","function","TRUE","FALSE","(model, data = sys.frame(sys.parent()), fixed, random,     groups, start, correlation = NULL, weights = NULL, subset,     method = c(""ML"", ""REML""), na.action = na.fail, naPattern,     control = list(), verbose = FALSE) ","nlme","recommended","4.0.5"
"nlme.nlsList","closure","function","TRUE","FALSE","(model, data = sys.frame(sys.parent()), fixed, random = fixed,     groups, start, correlation = NULL, weights = NULL, subset,     method = c(""ML"", ""REML""), na.action = na.fail, naPattern,     control = list(), verbose = FALSE) ","nlme","recommended","4.0.5"
"nlmeControl","closure","function","TRUE","FALSE","(maxIter = 50, pnlsMaxIter = 7, msMaxIter = 50, minScale = 0.001,     tolerance = 1e-05, niterEM = 25, pnlsTol = 0.001, msTol = 1e-06,     returnObject = FALSE, msVerbose = FALSE, msWarnNoConv = TRUE,     gradHess = TRUE, apVar = TRUE, .relStep = .Machine$double.eps^(1/3),     minAbsParApVar = 0.05, opt = c(""nlminb"", ""nlm""), natural = TRUE,     sigma = NULL, ...) ","nlme","recommended","4.0.5"
"nlmeStruct","closure","function","TRUE","FALSE","(reStruct, corStruct = NULL, varStruct = NULL) ","nlme","recommended","4.0.5"
"nlsList","closure","function","TRUE","FALSE","(model, data, start, control, level, subset, na.action = na.fail,     pool = TRUE, warn.nls = NA) ","nlme","recommended","4.0.5"
"nlsList.formula","closure","function","TRUE","FALSE","(model, data, start = NULL, control, level, subset,     na.action = na.fail, pool = TRUE, warn.nls = NA) ","nlme","recommended","4.0.5"
"nmGroupedData","closure","function","TRUE","FALSE","(formula, data = NULL, order.groups = TRUE, FUN = function(x) max(x,     na.rm = TRUE), outer = NULL, inner = NULL, labels = NULL,     units = NULL) ","nlme","recommended","4.0.5"
"pdBlocked","closure","function","TRUE","FALSE","(value = numeric(0), form = NULL, nam = NULL, data = parent.frame(),     pdClass = ""pdSymm"") ","nlme","recommended","4.0.5"
"pdCompSymm","closure","function","TRUE","FALSE","(value = numeric(0), form = NULL, nam = NULL, data = parent.frame()) ","nlme","recommended","4.0.5"
"pdConstruct","closure","function","TRUE","FALSE","(object, value, form, nam, data, ...) ","nlme","recommended","4.0.5"
"pdDiag","closure","function","TRUE","FALSE","(value = numeric(0), form = NULL, nam = NULL, data = parent.frame()) ","nlme","recommended","4.0.5"
"pdFactor","closure","function","TRUE","FALSE","(object) ","nlme","recommended","4.0.5"
"pdIdent","closure","function","TRUE","FALSE","(value = numeric(0), form = NULL, nam = NULL, data = parent.frame()) ","nlme","recommended","4.0.5"
"pdLogChol","closure","function","TRUE","FALSE","(value = numeric(0), form = NULL, nam = NULL, data = parent.frame()) ","nlme","recommended","4.0.5"
"pdMat","closure","function","TRUE","FALSE","(value = numeric(0), form = NULL, nam = NULL, data = parent.frame(),     pdClass = ""pdSymm"") ","nlme","recommended","4.0.5"
"pdMatrix","closure","function","TRUE","FALSE","(object, factor = FALSE) ","nlme","recommended","4.0.5"
"pdNatural","closure","function","TRUE","FALSE","(value = numeric(0), form = NULL, nam = NULL, data = parent.frame()) ","nlme","recommended","4.0.5"
"pdSymm","closure","function","TRUE","FALSE","(value = numeric(0), form = NULL, nam = NULL, data = parent.frame()) ","nlme","recommended","4.0.5"
"phenoModel","closure","function","TRUE","FALSE","(Subject, time, dose, lCl, lV) ","nlme","recommended","4.0.5"
"plot.lme","closure","function","TRUE","FALSE","(x, form = resid(., type = ""pearson"") ~ fitted(.), abline,     id = NULL, idLabels = NULL, idResType = c(""pearson"", ""normalized""),     grid, ...) ","nlme","recommended","4.0.5"
"pooledSD","closure","function","TRUE","FALSE","(object) ","nlme","recommended","4.0.5"
"quinModel","closure","function","TRUE","FALSE","(Subject, time, conc, dose, interval, lV, lKa, lCl) ","nlme","recommended","4.0.5"
"random.effects","closure","function","TRUE","FALSE","(object, ...) ","nlme","recommended","4.0.5"
"ranef","closure","function","TRUE","FALSE","(object, ...) ","nlme","recommended","4.0.5"
"reStruct","closure","function","TRUE","FALSE","(object, pdClass = ""pdLogChol"", REML = FALSE, data = sys.frame(sys.parent())) ","nlme","recommended","4.0.5"
"recalc","closure","function","TRUE","FALSE","(object, conLin, ...) ","nlme","recommended","4.0.5"
"simulate.lme","closure","function","TRUE","FALSE","(object, nsim = 1, seed = as.integer(runif(1, 0, .Machine$integer.max)),     m2, method = c(""REML"", ""ML""), niterEM = c(40, 200), useGen,     ...) ","nlme","recommended","4.0.5"
"splitFormula","closure","function","TRUE","FALSE","(form, sep = ""/"") ","nlme","recommended","4.0.5"
"varComb","closure","function","TRUE","FALSE","(...) ","nlme","recommended","4.0.5"
"varConstPower","closure","function","TRUE","FALSE","(const = numeric(0), power = numeric(0), form = ~fitted(.),     fixed = NULL) ","nlme","recommended","4.0.5"
"varConstProp","closure","function","TRUE","FALSE","(const = numeric(0), prop = numeric(0), form = ~fitted(.),     fixed = NULL) ","nlme","recommended","4.0.5"
"varExp","closure","function","TRUE","FALSE","(value = numeric(0), form = ~fitted(.), fixed = NULL) ","nlme","recommended","4.0.5"
"varFixed","closure","function","TRUE","FALSE","(value = ~1) ","nlme","recommended","4.0.5"
"varFunc","closure","function","TRUE","FALSE","(object) ","nlme","recommended","4.0.5"
"varIdent","closure","function","TRUE","FALSE","(value = numeric(0), form = ~1, fixed = NULL) ","nlme","recommended","4.0.5"
"varPower","closure","function","TRUE","FALSE","(value = numeric(0), form = ~fitted(.), fixed = NULL) ","nlme","recommended","4.0.5"
"varWeights","closure","function","TRUE","FALSE","(object) ","nlme","recommended","4.0.5"
".Depends","character","character","FALSE","FALSE","NA","nnet","recommended","4.0.5"
"class.ind","closure","function","TRUE","FALSE","(cl) ","nnet","recommended","4.0.5"
"multinom","closure","function","TRUE","FALSE","(formula, data, weights, subset, na.action, contrasts = NULL,     Hess = FALSE, summ = 0, censored = FALSE, model = FALSE,     ...) ","nnet","recommended","4.0.5"
"nnet","closure","function","TRUE","FALSE","(x, ...) ","nnet","recommended","4.0.5"
"nnet.default","closure","function","TRUE","FALSE","(x, y, weights, size, Wts, mask = rep(TRUE, length(wts)),     linout = FALSE, entropy = FALSE, softmax = FALSE, censored = FALSE,     skip = FALSE, rang = 0.7, decay = 0, maxit = 100, Hess = FALSE,     trace = TRUE, MaxNWts = 1000, abstol = 1e-04, reltol = 1e-08,     ...) ","nnet","recommended","4.0.5"
"nnet.formula","closure","function","TRUE","FALSE","(formula, data, weights, ..., subset, na.action, contrasts = NULL) ","nnet","recommended","4.0.5"
"nnetHess","closure","function","TRUE","FALSE","(net, x, y, weights) ","nnet","recommended","4.0.5"
"which.is.max","closure","function","TRUE","FALSE","(x) ","nnet","recommended","4.0.5"
"clusterApply","closure","function","TRUE","FALSE","(cl = NULL, x, fun, ...) ","parallel","base","4.0.5"
"clusterApplyLB","closure","function","TRUE","FALSE","(cl = NULL, x, fun, ...) ","parallel","base","4.0.5"
"clusterCall","closure","function","TRUE","FALSE","(cl = NULL, fun, ...) ","parallel","base","4.0.5"
"clusterEvalQ","closure","function","TRUE","FALSE","(cl = NULL, expr) ","parallel","base","4.0.5"
"clusterExport","closure","function","TRUE","FALSE","(cl = NULL, varlist, envir = .GlobalEnv) ","parallel","base","4.0.5"
"clusterMap","closure","function","TRUE","FALSE","(cl = NULL, fun, ..., MoreArgs = NULL, RECYCLE = TRUE,     SIMPLIFY = FALSE, USE.NAMES = TRUE, .scheduling = c(""static"",         ""dynamic"")) ","parallel","base","4.0.5"
"clusterSetRNGStream","closure","function","TRUE","FALSE","(cl = NULL, iseed = NULL) ","parallel","base","4.0.5"
"clusterSplit","closure","function","TRUE","FALSE","(cl = NULL, seq) ","parallel","base","4.0.5"
"detectCores","closure","function","TRUE","FALSE","(all.tests = FALSE, logical = TRUE) ","parallel","base","4.0.5"
"getDefaultCluster","closure","function","TRUE","FALSE","() ","parallel","base","4.0.5"
"makeCluster","closure","function","TRUE","FALSE","(spec, type = getClusterOption(""type""), ...) ","parallel","base","4.0.5"
"makeForkCluster","closure","function","TRUE","FALSE","(nnodes = getOption(""mc.cores"", 2L), ...) ","parallel","base","4.0.5"
"makePSOCKcluster","closure","function","TRUE","FALSE","(names, ...) ","parallel","base","4.0.5"
"mc.reset.stream","closure","function","TRUE","FALSE","() ","parallel","base","4.0.5"
"mcMap","closure","function","TRUE","FALSE","(f, ...) ","parallel","base","4.0.5"
"mcaffinity","closure","function","TRUE","FALSE","(affinity = NULL) ","parallel","base","4.0.5"
"mccollect","closure","function","TRUE","FALSE","(jobs, wait = TRUE, timeout = 0, intermediate = FALSE) ","parallel","base","4.0.5"
"mclapply","closure","function","TRUE","FALSE","(X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,     mc.silent = FALSE, mc.cores = getOption(""mc.cores"", 2L),     mc.cleanup = TRUE, mc.allow.recursive = TRUE, affinity.list = NULL) ","parallel","base","4.0.5"
"mcmapply","closure","function","TRUE","FALSE","(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE,     mc.preschedule = TRUE, mc.set.seed = TRUE, mc.silent = FALSE,     mc.cores = getOption(""mc.cores"", 2L), mc.cleanup = TRUE,     affinity.list = NULL) ","parallel","base","4.0.5"
"mcparallel","closure","function","TRUE","FALSE","(expr, name, mc.set.seed = TRUE, silent = FALSE, mc.affinity = NULL,     mc.interactive = FALSE, detached = FALSE) ","parallel","base","4.0.5"
"nextRNGStream","closure","function","TRUE","FALSE","(seed) ","parallel","base","4.0.5"
"nextRNGSubStream","closure","function","TRUE","FALSE","(seed) ","parallel","base","4.0.5"
"parApply","closure","function","TRUE","FALSE","(cl = NULL, X, MARGIN, FUN, ..., chunk.size = NULL) ","parallel","base","4.0.5"
"parCapply","closure","function","TRUE","FALSE","(cl = NULL, x, FUN, ..., chunk.size = NULL) ","parallel","base","4.0.5"
"parLapply","closure","function","TRUE","FALSE","(cl = NULL, X, fun, ..., chunk.size = NULL) ","parallel","base","4.0.5"
"parLapplyLB","closure","function","TRUE","FALSE","(cl = NULL, X, fun, ..., chunk.size = NULL) ","parallel","base","4.0.5"
"parRapply","closure","function","TRUE","FALSE","(cl = NULL, x, FUN, ..., chunk.size = NULL) ","parallel","base","4.0.5"
"parSapply","closure","function","TRUE","FALSE","(cl = NULL, X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE,     chunk.size = NULL) ","parallel","base","4.0.5"
"parSapplyLB","closure","function","TRUE","FALSE","(cl = NULL, X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE,     chunk.size = NULL) ","parallel","base","4.0.5"
"pvec","closure","function","TRUE","FALSE","(v, FUN, ..., mc.set.seed = TRUE, mc.silent = FALSE,     mc.cores = getOption(""mc.cores"", 2L), mc.cleanup = TRUE) ","parallel","base","4.0.5"
"setDefaultCluster","closure","function","TRUE","FALSE","(cl = NULL) ","parallel","base","4.0.5"
"splitIndices","closure","function","TRUE","FALSE","(nx, ncl) ","parallel","base","4.0.5"
"stopCluster","closure","function","TRUE","FALSE","(cl = NULL) ","parallel","base","4.0.5"
".Depends","character","character","FALSE","FALSE","NA","rpart","recommended","4.0.5"
"car.test.frame","list","data.frame","FALSE","FALSE","NA","rpart","recommended","4.0.5"
"car90","list","data.frame","FALSE","FALSE","NA","rpart","recommended","4.0.5"
"cu.summary","list","data.frame","FALSE","FALSE","NA","rpart","recommended","4.0.5"
"kyphosis","list","data.frame","FALSE","FALSE","NA","rpart","recommended","4.0.5"
"meanvar","closure","function","TRUE","FALSE","(tree, ...) ","rpart","recommended","4.0.5"
"na.rpart","closure","function","TRUE","FALSE","(x) ","rpart","recommended","4.0.5"
"path.rpart","closure","function","TRUE","FALSE","(tree, nodes, pretty = 0, print.it = TRUE) ","rpart","recommended","4.0.5"
"plotcp","closure","function","TRUE","FALSE","(x, minline = TRUE, lty = 3, col = 1, upper = c(""size"",     ""splits"", ""none""), ...) ","rpart","recommended","4.0.5"
"post","closure","function","TRUE","FALSE","(tree, ...) ","rpart","recommended","4.0.5"
"printcp","closure","function","TRUE","FALSE","(x, digits = getOption(""digits"") - 2L) ","rpart","recommended","4.0.5"
"prune","closure","function","TRUE","FALSE","(tree, ...) ","rpart","recommended","4.0.5"
"prune.rpart","closure","function","TRUE","FALSE","(tree, cp, ...) ","rpart","recommended","4.0.5"
"rpart","closure","function","TRUE","FALSE","(formula, data, weights, subset, na.action = na.rpart,     method, model = FALSE, x = FALSE, y = TRUE, parms, control,     cost, ...) ","rpart","recommended","4.0.5"
"rpart.control","closure","function","TRUE","FALSE","(minsplit = 20L, minbucket = round(minsplit/3), cp = 0.01,     maxcompete = 4L, maxsurrogate = 5L, usesurrogate = 2L, xval = 10L,     surrogatestyle = 0L, maxdepth = 30L, ...) ","rpart","recommended","4.0.5"
"rpart.exp","closure","function","TRUE","FALSE","(y, offset, parms, wt) ","rpart","recommended","4.0.5"
"rsq.rpart","closure","function","TRUE","FALSE","(x) ","rpart","recommended","4.0.5"
"snip.rpart","closure","function","TRUE","FALSE","(x, toss) ","rpart","recommended","4.0.5"
"solder","list","data.frame","FALSE","FALSE","NA","rpart","recommended","4.0.5"
"solder.balance","list","data.frame","FALSE","FALSE","NA","rpart","recommended","4.0.5"
"stagec","list","data.frame","FALSE","FALSE","NA","rpart","recommended","4.0.5"
"xpred.rpart","closure","function","TRUE","FALSE","(fit, xval = 10L, cp, return.all = FALSE) ","rpart","recommended","4.0.5"
".Depends","character","character","FALSE","FALSE","NA","spatial","recommended","4.0.5"
"Kaver","closure","function","TRUE","FALSE","(fs, nsim, ...) ","spatial","recommended","4.0.5"
"Kenvl","closure","function","TRUE","FALSE","(fs, nsim, ...) ","spatial","recommended","4.0.5"
"Kfn","closure","function","TRUE","FALSE","(pp, fs, k = 100) ","spatial","recommended","4.0.5"
"Psim","closure","function","TRUE","FALSE","(n) ","spatial","recommended","4.0.5"
"SSI","closure","function","TRUE","FALSE","(n, r) ","spatial","recommended","4.0.5"
"Strauss","closure","function","TRUE","FALSE","(n, c = 0, r) ","spatial","recommended","4.0.5"
"anova.trls","closure","function","TRUE","FALSE","(object, ...) ","spatial","recommended","4.0.5"
"anovalist.trls","closure","function","TRUE","FALSE","(object, ...) ","spatial","recommended","4.0.5"
"correlogram","closure","function","TRUE","FALSE","(krig, nint, plotit = TRUE, ...) ","spatial","recommended","4.0.5"
"expcov","closure","function","TRUE","FALSE","(r, d, alpha = 0, se = 1) ","spatial","recommended","4.0.5"
"gaucov","closure","function","TRUE","FALSE","(r, d, alpha = 0, se = 1) ","spatial","recommended","4.0.5"
"plot.trls","closure","function","TRUE","FALSE","(x, border = ""red"", col = NA, pch = 4, cex = 0.6, add = FALSE,     div = 8, ...) ","spatial","recommended","4.0.5"
"ppgetregion","closure","function","TRUE","FALSE","() ","spatial","recommended","4.0.5"
"ppinit","closure","function","TRUE","FALSE","(file) ","spatial","recommended","4.0.5"
"pplik","closure","function","TRUE","FALSE","(pp, R, ng = 50, trace = FALSE) ","spatial","recommended","4.0.5"
"ppregion","closure","function","TRUE","FALSE","(xl = 0, xu = 1, yl = 0, yu = 1) ","spatial","recommended","4.0.5"
"predict.trls","closure","function","TRUE","FALSE","(object, x, y, ...) ","spatial","recommended","4.0.5"
"prmat","closure","function","TRUE","FALSE","(obj, xl, xu, yl, yu, n) ","spatial","recommended","4.0.5"
"semat","closure","function","TRUE","FALSE","(obj, xl, xu, yl, yu, n, se) ","spatial","recommended","4.0.5"
"sphercov","closure","function","TRUE","FALSE","(r, d, alpha = 0, se = 1, D = 2) ","spatial","recommended","4.0.5"
"surf.gls","closure","function","TRUE","FALSE","(np, covmod, x, y, z, nx = 1000, ...) ","spatial","recommended","4.0.5"
"surf.ls","closure","function","TRUE","FALSE","(np, x, y, z) ","spatial","recommended","4.0.5"
"trls.influence","closure","function","TRUE","FALSE","(object) ","spatial","recommended","4.0.5"
"trmat","closure","function","TRUE","FALSE","(obj, xl, xu, yl, yu, n) ","spatial","recommended","4.0.5"
"variogram","closure","function","TRUE","FALSE","(krig, nint, plotit = TRUE, ...) ","spatial","recommended","4.0.5"
"as.polySpline","closure","function","TRUE","FALSE","(object, ...) ","splines","base","4.0.5"
"asVector","closure","function","TRUE","FALSE","(object) ","splines","base","4.0.5"
"backSpline","closure","function","TRUE","FALSE","(object) ","splines","base","4.0.5"
"bs","closure","function","TRUE","FALSE","(x, df = NULL, knots = NULL, degree = 3, intercept = FALSE,     Boundary.knots = range(x)) ","splines","base","4.0.5"
"interpSpline","closure","function","TRUE","FALSE","(obj1, obj2, bSpline = FALSE, period = NULL, ord = 4L,     na.action = na.fail, sparse = FALSE) ","splines","base","4.0.5"
"ns","closure","function","TRUE","FALSE","(x, df = NULL, knots = NULL, intercept = FALSE, Boundary.knots = range(x)) ","splines","base","4.0.5"
"periodicSpline","closure","function","TRUE","FALSE","(obj1, obj2, knots, period = 2 * pi, ord = 4L) ","splines","base","4.0.5"
"polySpline","closure","function","TRUE","FALSE","(object, ...) ","splines","base","4.0.5"
"spline.des","closure","function","TRUE","FALSE","(knots, x, ord = 4, derivs = integer(length(x)), outer.ok = FALSE,     sparse = FALSE) ","splines","base","4.0.5"
"splineDesign","closure","function","TRUE","FALSE","(knots, x, ord = 4L, derivs = 0L, outer.ok = FALSE,     sparse = FALSE) ","splines","base","4.0.5"
"splineKnots","closure","function","TRUE","FALSE","(object) ","splines","base","4.0.5"
"splineOrder","closure","function","TRUE","FALSE","(object) ","splines","base","4.0.5"
"xyVector","closure","function","TRUE","FALSE","(x, y) ","splines","base","4.0.5"
".MFclass","closure","function","TRUE","FALSE","(x) ","stats","base","4.0.5"
".checkMFClasses","closure","function","TRUE","FALSE","(cl, m, ordNotOK = FALSE) ","stats","base","4.0.5"
".getXlevels","closure","function","TRUE","FALSE","(Terms, m) ","stats","base","4.0.5"
".lm.fit","closure","function","TRUE","FALSE","(x, y, tol = 1e-07) ","stats","base","4.0.5"
".nknots.smspl","closure","function","TRUE","FALSE","(n) ","stats","base","4.0.5"
".preformat.ts","closure","function","TRUE","FALSE","(x, calendar, ...) ","stats","base","4.0.5"
".vcov.aliased","closure","function","TRUE","FALSE","(aliased, vc, complete = TRUE) ","stats","base","4.0.5"
"AIC","closure","function","TRUE","FALSE","(object, ..., k = 2) ","stats","base","4.0.5"
"ARMAacf","closure","function","TRUE","FALSE","(ar = numeric(), ma = numeric(), lag.max = r, pacf = FALSE) ","stats","base","4.0.5"
"ARMAtoMA","closure","function","TRUE","FALSE","(ar = numeric(), ma = numeric(), lag.max) ","stats","base","4.0.5"
"BIC","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"Box.test","closure","function","TRUE","FALSE","(x, lag = 1, type = c(""Box-Pierce"", ""Ljung-Box""), fitdf = 0) ","stats","base","4.0.5"
"C","closure","function","TRUE","FALSE","(object, contr, how.many, ...) ","stats","base","4.0.5"
"D","closure","function","TRUE","FALSE","(expr, name) ","stats","base","4.0.5"
"DF2formula","closure","function","TRUE","FALSE","(x, env = parent.frame()) ","stats","base","4.0.5"
"Gamma","closure","function","TRUE","FALSE","(link = ""inverse"") ","stats","base","4.0.5"
"HoltWinters","closure","function","TRUE","FALSE","(x, alpha = NULL, beta = NULL, gamma = NULL, seasonal = c(""additive"",     ""multiplicative""), start.periods = 2, l.start = NULL, b.start = NULL,     s.start = NULL, optim.start = c(alpha = 0.3, beta = 0.1,         gamma = 0.1), optim.control = list()) ","stats","base","4.0.5"
"IQR","closure","function","TRUE","FALSE","(x, na.rm = FALSE, type = 7) ","stats","base","4.0.5"
"KalmanForecast","closure","function","TRUE","FALSE","(n.ahead = 10L, mod, update = FALSE) ","stats","base","4.0.5"
"KalmanLike","closure","function","TRUE","FALSE","(y, mod, nit = 0L, update = FALSE) ","stats","base","4.0.5"
"KalmanRun","closure","function","TRUE","FALSE","(y, mod, nit = 0L, update = FALSE) ","stats","base","4.0.5"
"KalmanSmooth","closure","function","TRUE","FALSE","(y, mod, nit = 0L) ","stats","base","4.0.5"
"NLSstAsymptotic","closure","function","TRUE","FALSE","(xy) ","stats","base","4.0.5"
"NLSstClosestX","closure","function","TRUE","FALSE","(xy, yval) ","stats","base","4.0.5"
"NLSstLfAsymptote","closure","function","TRUE","FALSE","(xy) ","stats","base","4.0.5"
"NLSstRtAsymptote","closure","function","TRUE","FALSE","(xy) ","stats","base","4.0.5"
"PP.test","closure","function","TRUE","FALSE","(x, lshort = TRUE) ","stats","base","4.0.5"
"Pair","closure","function","TRUE","FALSE","(x, y) ","stats","base","4.0.5"
"SSD","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"SSasymp","closure","selfStart","TRUE","FALSE","(input, Asym, R0, lrc) ","stats","base","4.0.5"
"SSasympOff","closure","selfStart","TRUE","FALSE","(input, Asym, lrc, c0) ","stats","base","4.0.5"
"SSasympOrig","closure","selfStart","TRUE","FALSE","(input, Asym, lrc) ","stats","base","4.0.5"
"SSbiexp","closure","selfStart","TRUE","FALSE","(input, A1, lrc1, A2, lrc2) ","stats","base","4.0.5"
"SSfol","closure","selfStart","TRUE","FALSE","(Dose, input, lKe, lKa, lCl) ","stats","base","4.0.5"
"SSfpl","closure","selfStart","TRUE","FALSE","(input, A, B, xmid, scal) ","stats","base","4.0.5"
"SSgompertz","closure","selfStart","TRUE","FALSE","(x, Asym, b2, b3) ","stats","base","4.0.5"
"SSlogis","closure","selfStart","TRUE","FALSE","(input, Asym, xmid, scal) ","stats","base","4.0.5"
"SSmicmen","closure","selfStart","TRUE","FALSE","(input, Vm, K) ","stats","base","4.0.5"
"SSweibull","closure","selfStart","TRUE","FALSE","(x, Asym, Drop, lrc, pwr) ","stats","base","4.0.5"
"StructTS","closure","function","TRUE","FALSE","(x, type = c(""level"", ""trend"", ""BSM""), init = NULL,     fixed = NULL, optim.control = NULL) ","stats","base","4.0.5"
"TukeyHSD","closure","function","TRUE","FALSE","(x, which, ordered = FALSE, conf.level = 0.95, ...) ","stats","base","4.0.5"
"acf","closure","function","TRUE","FALSE","(x, lag.max = NULL, type = c(""correlation"", ""covariance"",     ""partial""), plot = TRUE, na.action = na.fail, demean = TRUE,     ...) ","stats","base","4.0.5"
"acf2AR","closure","function","TRUE","FALSE","(acf) ","stats","base","4.0.5"
"add.scope","closure","function","TRUE","FALSE","(terms1, terms2) ","stats","base","4.0.5"
"add1","closure","function","TRUE","FALSE","(object, scope, ...) ","stats","base","4.0.5"
"addmargins","closure","function","TRUE","FALSE","(A, margin = seq_along(dim(A)), FUN = sum, quiet = FALSE) ","stats","base","4.0.5"
"aggregate","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"aggregate.data.frame","closure","function","TRUE","FALSE","(x, by, FUN, ..., simplify = TRUE, drop = TRUE) ","stats","base","4.0.5"
"aggregate.ts","closure","function","TRUE","FALSE","(x, nfrequency = 1, FUN = sum, ndeltat = 1, ts.eps = getOption(""ts.eps""),     ...) ","stats","base","4.0.5"
"alias","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"anova","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"ansari.test","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"aov","closure","function","TRUE","FALSE","(formula, data = NULL, projections = FALSE, qr = TRUE,     contrasts = NULL, ...) ","stats","base","4.0.5"
"approx","closure","function","TRUE","FALSE","(x, y = NULL, xout, method = ""linear"", n = 50, yleft,     yright, rule = 1, f = 0, ties = mean, na.rm = TRUE) ","stats","base","4.0.5"
"approxfun","closure","function","TRUE","FALSE","(x, y = NULL, method = ""linear"", yleft, yright, rule = 1,     f = 0, ties = mean, na.rm = TRUE) ","stats","base","4.0.5"
"ar","closure","function","TRUE","FALSE","(x, aic = TRUE, order.max = NULL, method = c(""yule-walker"",     ""burg"", ""ols"", ""mle"", ""yw""), na.action = na.fail, series = deparse1(substitute(x)),     ...) ","stats","base","4.0.5"
"ar.burg","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"ar.mle","closure","function","TRUE","FALSE","(x, aic = TRUE, order.max = NULL, na.action = na.fail,     demean = TRUE, series = NULL, ...) ","stats","base","4.0.5"
"ar.ols","closure","function","TRUE","FALSE","(x, aic = TRUE, order.max = NULL, na.action = na.fail,     demean = TRUE, intercept = demean, series = NULL, ...) ","stats","base","4.0.5"
"ar.yw","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"arima","closure","function","TRUE","FALSE","(x, order = c(0L, 0L, 0L), seasonal = list(order = c(0L,     0L, 0L), period = NA), xreg = NULL, include.mean = TRUE,     transform.pars = TRUE, fixed = NULL, init = NULL, method = c(""CSS-ML"",         ""ML"", ""CSS""), n.cond, SSinit = c(""Gardner1980"", ""Rossignol2011""),     optim.method = ""BFGS"", optim.control = list(), kappa = 1e+06) ","stats","base","4.0.5"
"arima.sim","closure","function","TRUE","FALSE","(model, n, rand.gen = rnorm, innov = rand.gen(n, ...),     n.start = NA, start.innov = rand.gen(n.start, ...), ...) ","stats","base","4.0.5"
"arima0","closure","function","TRUE","FALSE","(x, order = c(0, 0, 0), seasonal = list(order = c(0,     0, 0), period = NA), xreg = NULL, include.mean = TRUE, delta = 0.01,     transform.pars = TRUE, fixed = NULL, init = NULL, method = c(""ML"",         ""CSS""), n.cond, optim.control = list()) ","stats","base","4.0.5"
"arima0.diag","closure","function","TRUE","FALSE","(...) ","stats","base","4.0.5"
"as.dendrogram","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"as.dist","closure","function","TRUE","FALSE","(m, diag = FALSE, upper = FALSE) ","stats","base","4.0.5"
"as.formula","closure","function","TRUE","FALSE","(object, env = parent.frame()) ","stats","base","4.0.5"
"as.hclust","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"as.stepfun","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"as.ts","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"asOneSidedFormula","closure","function","TRUE","FALSE","(object) ","stats","base","4.0.5"
"ave","closure","function","TRUE","FALSE","(x, ..., FUN = mean) ","stats","base","4.0.5"
"bandwidth.kernel","closure","function","TRUE","FALSE","(k) ","stats","base","4.0.5"
"bartlett.test","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"binom.test","closure","function","TRUE","FALSE","(x, n, p = 0.5, alternative = c(""two.sided"", ""less"",     ""greater""), conf.level = 0.95) ","stats","base","4.0.5"
"binomial","closure","function","TRUE","FALSE","(link = ""logit"") ","stats","base","4.0.5"
"biplot","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"bw.SJ","closure","function","TRUE","FALSE","(x, nb = 1000L, lower = 0.1 * hmax, upper = hmax, method = c(""ste"",     ""dpi""), tol = 0.1 * lower) ","stats","base","4.0.5"
"bw.bcv","closure","function","TRUE","FALSE","(x, nb = 1000L, lower = 0.1 * hmax, upper = hmax, tol = 0.1 *     lower) ","stats","base","4.0.5"
"bw.nrd","closure","function","TRUE","FALSE","(x) ","stats","base","4.0.5"
"bw.nrd0","closure","function","TRUE","FALSE","(x) ","stats","base","4.0.5"
"bw.ucv","closure","function","TRUE","FALSE","(x, nb = 1000L, lower = 0.1 * hmax, upper = hmax, tol = 0.1 *     lower) ","stats","base","4.0.5"
"cancor","closure","function","TRUE","FALSE","(x, y, xcenter = TRUE, ycenter = TRUE) ","stats","base","4.0.5"
"case.names","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"ccf","closure","function","TRUE","FALSE","(x, y, lag.max = NULL, type = c(""correlation"", ""covariance""),     plot = TRUE, na.action = na.fail, ...) ","stats","base","4.0.5"
"chisq.test","closure","function","TRUE","FALSE","(x, y = NULL, correct = TRUE, p = rep(1/length(x), length(x)),     rescale.p = FALSE, simulate.p.value = FALSE, B = 2000) ","stats","base","4.0.5"
"cmdscale","closure","function","TRUE","FALSE","(d, k = 2, eig = FALSE, add = FALSE, x.ret = FALSE,     list. = eig || add || x.ret) ","stats","base","4.0.5"
"coef","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"coefficients","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"complete.cases","closure","function","TRUE","FALSE","(...) ","stats","base","4.0.5"
"confint","closure","function","TRUE","FALSE","(object, parm, level = 0.95, ...) ","stats","base","4.0.5"
"confint.default","closure","function","TRUE","FALSE","(object, parm, level = 0.95, ...) ","stats","base","4.0.5"
"confint.lm","closure","function","TRUE","FALSE","(object, parm, level = 0.95, ...) ","stats","base","4.0.5"
"constrOptim","closure","function","TRUE","FALSE","(theta, f, grad, ui, ci, mu = 1e-04, control = list(),     method = if (is.null(grad)) ""Nelder-Mead"" else ""BFGS"", outer.iterations = 100,     outer.eps = 1e-05, ..., hessian = FALSE) ","stats","base","4.0.5"
"contr.SAS","closure","function","TRUE","FALSE","(n, contrasts = TRUE, sparse = FALSE) ","stats","base","4.0.5"
"contr.helmert","closure","function","TRUE","FALSE","(n, contrasts = TRUE, sparse = FALSE) ","stats","base","4.0.5"
"contr.poly","closure","function","TRUE","FALSE","(n, scores = 1:n, contrasts = TRUE, sparse = FALSE) ","stats","base","4.0.5"
"contr.sum","closure","function","TRUE","FALSE","(n, contrasts = TRUE, sparse = FALSE) ","stats","base","4.0.5"
"contr.treatment","closure","function","TRUE","FALSE","(n, base = 1, contrasts = TRUE, sparse = FALSE) ","stats","base","4.0.5"
"contrasts","closure","function","TRUE","FALSE","(x, contrasts = TRUE, sparse = FALSE) ","stats","base","4.0.5"
"contrasts<-","closure","function","TRUE","FALSE","(x, how.many, value) ","stats","base","4.0.5"
"convolve","closure","function","TRUE","FALSE","(x, y, conj = TRUE, type = c(""circular"", ""open"", ""filter"")) ","stats","base","4.0.5"
"cooks.distance","closure","function","TRUE","FALSE","(model, ...) ","stats","base","4.0.5"
"cophenetic","closure","function","TRUE","FALSE","(x) ","stats","base","4.0.5"
"cor","closure","function","TRUE","FALSE","(x, y = NULL, use = ""everything"", method = c(""pearson"",     ""kendall"", ""spearman"")) ","stats","base","4.0.5"
"cor.test","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"cov","closure","function","TRUE","FALSE","(x, y = NULL, use = ""everything"", method = c(""pearson"",     ""kendall"", ""spearman"")) ","stats","base","4.0.5"
"cov.wt","closure","function","TRUE","FALSE","(x, wt = rep(1/nrow(x), nrow(x)), cor = FALSE, center = TRUE,     method = c(""unbiased"", ""ML"")) ","stats","base","4.0.5"
"cov2cor","closure","function","TRUE","TRUE","(V) ","stats","base","4.0.5"
"covratio","closure","function","TRUE","FALSE","(model, infl = lm.influence(model, do.coef = FALSE),     res = weighted.residuals(model)) ","stats","base","4.0.5"
"cpgram","closure","function","TRUE","FALSE","(ts, taper = 0.1, main = paste(""Series: "", deparse1(substitute(ts))),     ci.col = ""blue"") ","stats","base","4.0.5"
"cutree","closure","function","TRUE","FALSE","(tree, k = NULL, h = NULL) ","stats","base","4.0.5"
"cycle","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"dbeta","closure","function","TRUE","FALSE","(x, shape1, shape2, ncp = 0, log = FALSE) ","stats","base","4.0.5"
"dbinom","closure","function","TRUE","FALSE","(x, size, prob, log = FALSE) ","stats","base","4.0.5"
"dcauchy","closure","function","TRUE","FALSE","(x, location = 0, scale = 1, log = FALSE) ","stats","base","4.0.5"
"dchisq","closure","function","TRUE","FALSE","(x, df, ncp = 0, log = FALSE) ","stats","base","4.0.5"
"decompose","closure","function","TRUE","FALSE","(x, type = c(""additive"", ""multiplicative""), filter = NULL) ","stats","base","4.0.5"
"delete.response","closure","function","TRUE","FALSE","(termobj) ","stats","base","4.0.5"
"deltat","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"dendrapply","closure","function","TRUE","FALSE","(X, FUN, ...) ","stats","base","4.0.5"
"density","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"density.default","closure","function","TRUE","FALSE","(x, bw = ""nrd0"", adjust = 1, kernel = c(""gaussian"",     ""epanechnikov"", ""rectangular"", ""triangular"", ""biweight"",     ""cosine"", ""optcosine""), weights = NULL, window = kernel,     width, give.Rkern = FALSE, n = 512, from, to, cut = 3, na.rm = FALSE,     ...) ","stats","base","4.0.5"
"deriv","closure","function","TRUE","FALSE","(expr, ...) ","stats","base","4.0.5"
"deriv3","closure","function","TRUE","FALSE","(expr, ...) ","stats","base","4.0.5"
"deviance","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"dexp","closure","function","TRUE","FALSE","(x, rate = 1, log = FALSE) ","stats","base","4.0.5"
"df","closure","function","TRUE","FALSE","(x, df1, df2, ncp, log = FALSE) ","stats","base","4.0.5"
"df.kernel","closure","function","TRUE","FALSE","(k) ","stats","base","4.0.5"
"df.residual","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"dfbeta","closure","function","TRUE","FALSE","(model, ...) ","stats","base","4.0.5"
"dfbetas","closure","function","TRUE","FALSE","(model, ...) ","stats","base","4.0.5"
"dffits","closure","function","TRUE","FALSE","(model, infl = lm.influence(model, do.coef = FALSE),     res = weighted.residuals(model)) ","stats","base","4.0.5"
"dgamma","closure","function","TRUE","FALSE","(x, shape, rate = 1, scale = 1/rate, log = FALSE) ","stats","base","4.0.5"
"dgeom","closure","function","TRUE","FALSE","(x, prob, log = FALSE) ","stats","base","4.0.5"
"dhyper","closure","function","TRUE","FALSE","(x, m, n, k, log = FALSE) ","stats","base","4.0.5"
"diffinv","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"dist","closure","function","TRUE","FALSE","(x, method = ""euclidean"", diag = FALSE, upper = FALSE,     p = 2) ","stats","base","4.0.5"
"dlnorm","closure","function","TRUE","FALSE","(x, meanlog = 0, sdlog = 1, log = FALSE) ","stats","base","4.0.5"
"dlogis","closure","function","TRUE","FALSE","(x, location = 0, scale = 1, log = FALSE) ","stats","base","4.0.5"
"dmultinom","closure","function","TRUE","FALSE","(x, size = NULL, prob, log = FALSE) ","stats","base","4.0.5"
"dnbinom","closure","function","TRUE","FALSE","(x, size, prob, mu, log = FALSE) ","stats","base","4.0.5"
"dnorm","closure","function","TRUE","FALSE","(x, mean = 0, sd = 1, log = FALSE) ","stats","base","4.0.5"
"dpois","closure","function","TRUE","FALSE","(x, lambda, log = FALSE) ","stats","base","4.0.5"
"drop.scope","closure","function","TRUE","FALSE","(terms1, terms2) ","stats","base","4.0.5"
"drop.terms","closure","function","TRUE","FALSE","(termobj, dropx = NULL, keep.response = FALSE) ","stats","base","4.0.5"
"drop1","closure","function","TRUE","FALSE","(object, scope, ...) ","stats","base","4.0.5"
"dsignrank","closure","function","TRUE","FALSE","(x, n, log = FALSE) ","stats","base","4.0.5"
"dt","closure","function","TRUE","FALSE","(x, df, ncp, log = FALSE) ","stats","base","4.0.5"
"dummy.coef","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"dummy.coef.lm","closure","function","TRUE","FALSE","(object, use.na = FALSE, ...) ","stats","base","4.0.5"
"dunif","closure","function","TRUE","FALSE","(x, min = 0, max = 1, log = FALSE) ","stats","base","4.0.5"
"dweibull","closure","function","TRUE","FALSE","(x, shape, scale = 1, log = FALSE) ","stats","base","4.0.5"
"dwilcox","closure","function","TRUE","FALSE","(x, m, n, log = FALSE) ","stats","base","4.0.5"
"ecdf","closure","function","TRUE","FALSE","(x) ","stats","base","4.0.5"
"eff.aovlist","closure","function","TRUE","FALSE","(aovlist) ","stats","base","4.0.5"
"effects","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"embed","closure","function","TRUE","FALSE","(x, dimension = 1) ","stats","base","4.0.5"
"end","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"estVar","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"expand.model.frame","closure","function","TRUE","FALSE","(model, extras, envir = environment(formula(model)),     na.expand = FALSE) ","stats","base","4.0.5"
"extractAIC","closure","function","TRUE","FALSE","(fit, scale, k = 2, ...) ","stats","base","4.0.5"
"factanal","closure","function","TRUE","FALSE","(x, factors, data = NULL, covmat = NULL, n.obs = NA,     subset, na.action, start = NULL, scores = c(""none"", ""regression"",         ""Bartlett""), rotation = ""varimax"", control = NULL, ...) ","stats","base","4.0.5"
"factor.scope","closure","function","TRUE","FALSE","(factor, scope) ","stats","base","4.0.5"
"family","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"fft","closure","function","TRUE","FALSE","(z, inverse = FALSE) ","stats","base","4.0.5"
"filter","closure","function","TRUE","FALSE","(x, filter, method = c(""convolution"", ""recursive""),     sides = 2L, circular = FALSE, init = NULL) ","stats","base","4.0.5"
"fisher.test","closure","function","TRUE","FALSE","(x, y = NULL, workspace = 2e+05, hybrid = FALSE, hybridPars = c(expect = 5,     percent = 80, Emin = 1), control = list(), or = 1, alternative = ""two.sided"",     conf.int = TRUE, conf.level = 0.95, simulate.p.value = FALSE,     B = 2000) ","stats","base","4.0.5"
"fitted","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"fitted.values","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"fivenum","closure","function","TRUE","FALSE","(x, na.rm = TRUE) ","stats","base","4.0.5"
"fligner.test","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"formula","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"frequency","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"friedman.test","closure","function","TRUE","FALSE","(y, ...) ","stats","base","4.0.5"
"ftable","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"gaussian","closure","function","TRUE","FALSE","(link = ""identity"") ","stats","base","4.0.5"
"getCall","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"getInitial","closure","function","TRUE","FALSE","(object, data, ...) ","stats","base","4.0.5"
"get_all_vars","closure","function","TRUE","FALSE","(formula, data = NULL, ...) ","stats","base","4.0.5"
"glm","closure","function","TRUE","FALSE","(formula, family = gaussian, data, weights, subset,     na.action, start = NULL, etastart, mustart, offset, control = list(...),     model = TRUE, method = ""glm.fit"", x = FALSE, y = TRUE, singular.ok = TRUE,     contrasts = NULL, ...) ","stats","base","4.0.5"
"glm.control","closure","function","TRUE","FALSE","(epsilon = 1e-08, maxit = 25, trace = FALSE) ","stats","base","4.0.5"
"glm.fit","closure","function","TRUE","FALSE","(x, y, weights = rep.int(1, nobs), start = NULL, etastart = NULL,     mustart = NULL, offset = rep.int(0, nobs), family = gaussian(),     control = list(), intercept = TRUE, singular.ok = TRUE) ","stats","base","4.0.5"
"hasTsp","closure","function","TRUE","FALSE","(x) ","stats","base","4.0.5"
"hat","closure","function","TRUE","FALSE","(x, intercept = TRUE) ","stats","base","4.0.5"
"hatvalues","closure","function","TRUE","FALSE","(model, ...) ","stats","base","4.0.5"
"hclust","closure","function","TRUE","FALSE","(d, method = ""complete"", members = NULL) ","stats","base","4.0.5"
"heatmap","closure","function","TRUE","FALSE","(x, Rowv = NULL, Colv = if (symm) ""Rowv"" else NULL,     distfun = dist, hclustfun = hclust, reorderfun = function(d,         w) reorder(d, w), add.expr, symm = FALSE, revC = identical(Colv,         ""Rowv""), scale = c(""row"", ""column"", ""none""), na.rm = TRUE,     margins = c(5, 5), ColSideColors, RowSideColors, cexRow = 0.2 +         1/log10(nr), cexCol = 0.2 + 1/log10(nc), labRow = NULL,     labCol = NULL, main = NULL, xlab = NULL, ylab = NULL, keep.dendro = FALSE,     verbose = getOption(""verbose""), ...) ","stats","base","4.0.5"
"influence","closure","function","TRUE","FALSE","(model, ...) ","stats","base","4.0.5"
"influence.measures","closure","function","TRUE","FALSE","(model, infl = influence(model)) ","stats","base","4.0.5"
"integrate","closure","function","TRUE","FALSE","(f, lower, upper, ..., subdivisions = 100L, rel.tol = .Machine$double.eps^0.25,     abs.tol = rel.tol, stop.on.error = TRUE, keep.xy = FALSE,     aux = NULL) ","stats","base","4.0.5"
"interaction.plot","closure","function","TRUE","FALSE","(x.factor, trace.factor, response, fun = mean, type = c(""l"",     ""p"", ""b"", ""o"", ""c""), legend = TRUE, trace.label = deparse1(substitute(trace.factor)),     fixed = FALSE, xlab = deparse1(substitute(x.factor)), ylab = ylabel,     ylim = range(cells, na.rm = TRUE), lty = nc:1, col = 1, pch = c(1L:9,         0, letters), xpd = NULL, leg.bg = par(""bg""), leg.bty = ""n"",     xtick = FALSE, xaxt = par(""xaxt""), axes = TRUE, ...) ","stats","base","4.0.5"
"inverse.gaussian","closure","function","TRUE","FALSE","(link = ""1/mu^2"") ","stats","base","4.0.5"
"is.empty.model","closure","function","TRUE","FALSE","(x) ","stats","base","4.0.5"
"is.leaf","closure","function","TRUE","FALSE","(object) ","stats","base","4.0.5"
"is.mts","closure","function","TRUE","FALSE","(x) ","stats","base","4.0.5"
"is.stepfun","closure","function","TRUE","FALSE","(x) ","stats","base","4.0.5"
"is.ts","closure","function","TRUE","FALSE","(x) ","stats","base","4.0.5"
"is.tskernel","closure","function","TRUE","FALSE","(k) ","stats","base","4.0.5"
"isoreg","closure","function","TRUE","FALSE","(x, y = NULL) ","stats","base","4.0.5"
"kernapply","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"kernel","closure","function","TRUE","FALSE","(coef, m = 2, r, name = ""unknown"") ","stats","base","4.0.5"
"kmeans","closure","function","TRUE","FALSE","(x, centers, iter.max = 10L, nstart = 1L, algorithm = c(""Hartigan-Wong"",     ""Lloyd"", ""Forgy"", ""MacQueen""), trace = FALSE) ","stats","base","4.0.5"
"knots","closure","function","TRUE","FALSE","(Fn, ...) ","stats","base","4.0.5"
"kruskal.test","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"ks.test","closure","function","TRUE","FALSE","(x, y, ..., alternative = c(""two.sided"", ""less"", ""greater""),     exact = NULL) ","stats","base","4.0.5"
"ksmooth","closure","function","TRUE","FALSE","(x, y, kernel = c(""box"", ""normal""), bandwidth = 0.5,     range.x = range(x), n.points = max(100L, length(x)), x.points) ","stats","base","4.0.5"
"lag","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"lag.plot","closure","function","TRUE","FALSE","(x, lags = 1, layout = NULL, set.lags = 1L:lags, main = NULL,     asp = 1, diag = TRUE, diag.col = ""gray"", type = ""p"", oma = NULL,     ask = NULL, do.lines = (n <= 150), labels = do.lines, ...) ","stats","base","4.0.5"
"line","closure","function","TRUE","FALSE","(x, y = NULL, iter = 1) ","stats","base","4.0.5"
"lm","closure","function","TRUE","FALSE","(formula, data, subset, weights, na.action, method = ""qr"",     model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE,     contrasts = NULL, offset, ...) ","stats","base","4.0.5"
"lm.fit","closure","function","TRUE","FALSE","(x, y, offset = NULL, method = ""qr"", tol = 1e-07, singular.ok = TRUE,     ...) ","stats","base","4.0.5"
"lm.influence","closure","function","TRUE","FALSE","(model, do.coef = TRUE) ","stats","base","4.0.5"
"lm.wfit","closure","function","TRUE","FALSE","(x, y, w, offset = NULL, method = ""qr"", tol = 1e-07,     singular.ok = TRUE, ...) ","stats","base","4.0.5"
"loadings","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"loess","closure","function","TRUE","FALSE","(formula, data, weights, subset, na.action, model = FALSE,     span = 0.75, enp.target, degree = 2L, parametric = FALSE,     drop.square = FALSE, normalize = TRUE, family = c(""gaussian"",         ""symmetric""), method = c(""loess"", ""model.frame""), control = loess.control(...),     ...) ","stats","base","4.0.5"
"loess.control","closure","function","TRUE","FALSE","(surface = c(""interpolate"", ""direct""), statistics = c(""approximate"",     ""exact"", ""none""), trace.hat = c(""exact"", ""approximate""),     cell = 0.2, iterations = 4L, iterTrace = FALSE, ...) ","stats","base","4.0.5"
"loess.smooth","closure","function","TRUE","FALSE","(x, y, span = 2/3, degree = 1, family = c(""symmetric"",     ""gaussian""), evaluation = 50, ...) ","stats","base","4.0.5"
"logLik","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"loglin","closure","function","TRUE","FALSE","(table, margin, start = rep(1, length(table)), fit = FALSE,     eps = 0.1, iter = 20L, param = FALSE, print = TRUE) ","stats","base","4.0.5"
"lowess","closure","function","TRUE","FALSE","(x, y = NULL, f = 2/3, iter = 3L, delta = 0.01 * diff(range(x))) ","stats","base","4.0.5"
"ls.diag","closure","function","TRUE","FALSE","(ls.out) ","stats","base","4.0.5"
"ls.print","closure","function","TRUE","FALSE","(ls.out, digits = 4L, print.it = TRUE) ","stats","base","4.0.5"
"lsfit","closure","function","TRUE","FALSE","(x, y, wt = NULL, intercept = TRUE, tolerance = 1e-07,     yname = NULL) ","stats","base","4.0.5"
"mad","closure","function","TRUE","FALSE","(x, center = median(x), constant = 1.4826, na.rm = FALSE,     low = FALSE, high = FALSE) ","stats","base","4.0.5"
"mahalanobis","closure","function","TRUE","FALSE","(x, center, cov, inverted = FALSE, ...) ","stats","base","4.0.5"
"make.link","closure","function","TRUE","FALSE","(link) ","stats","base","4.0.5"
"makeARIMA","closure","function","TRUE","FALSE","(phi, theta, Delta, kappa = 1e+06, SSinit = c(""Gardner1980"",     ""Rossignol2011""), tol = .Machine$double.eps) ","stats","base","4.0.5"
"makepredictcall","closure","function","TRUE","FALSE","(var, call) ","stats","base","4.0.5"
"manova","closure","function","TRUE","FALSE","(...) ","stats","base","4.0.5"
"mantelhaen.test","closure","function","TRUE","FALSE","(x, y = NULL, z = NULL, alternative = c(""two.sided"",     ""less"", ""greater""), correct = TRUE, exact = FALSE, conf.level = 0.95) ","stats","base","4.0.5"
"mauchly.test","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"mcnemar.test","closure","function","TRUE","FALSE","(x, y = NULL, correct = TRUE) ","stats","base","4.0.5"
"median","closure","function","TRUE","FALSE","(x, na.rm = FALSE, ...) ","stats","base","4.0.5"
"median.default","closure","function","TRUE","FALSE","(x, na.rm = FALSE, ...) ","stats","base","4.0.5"
"medpolish","closure","function","TRUE","FALSE","(x, eps = 0.01, maxiter = 10L, trace.iter = TRUE, na.rm = FALSE) ","stats","base","4.0.5"
"model.extract","closure","function","TRUE","FALSE","(frame, component) ","stats","base","4.0.5"
"model.frame","closure","function","TRUE","FALSE","(formula, ...) ","stats","base","4.0.5"
"model.frame.default","closure","function","TRUE","FALSE","(formula, data = NULL, subset = NULL, na.action = na.fail,     drop.unused.levels = FALSE, xlev = NULL, ...) ","stats","base","4.0.5"
"model.matrix","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"model.matrix.default","closure","function","TRUE","FALSE","(object, data = environment(object), contrasts.arg = NULL,     xlev = NULL, ...) ","stats","base","4.0.5"
"model.matrix.lm","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"model.offset","closure","function","TRUE","FALSE","(x) ","stats","base","4.0.5"
"model.response","closure","function","TRUE","FALSE","(data, type = ""any"") ","stats","base","4.0.5"
"model.tables","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"model.weights","closure","function","TRUE","FALSE","(x) ","stats","base","4.0.5"
"monthplot","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"mood.test","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"mvfft","closure","function","TRUE","FALSE","(z, inverse = FALSE) ","stats","base","4.0.5"
"na.action","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"na.contiguous","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"na.exclude","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"na.fail","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"na.omit","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"na.pass","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"napredict","closure","function","TRUE","FALSE","(omit, x, ...) ","stats","base","4.0.5"
"naprint","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"naresid","closure","function","TRUE","FALSE","(omit, x, ...) ","stats","base","4.0.5"
"nextn","closure","function","TRUE","FALSE","(n, factors = c(2, 3, 5)) ","stats","base","4.0.5"
"nlm","closure","function","TRUE","FALSE","(f, p, ..., hessian = FALSE, typsize = rep(1, length(p)),     fscale = 1, print.level = 0, ndigit = 12, gradtol = 1e-06,     stepmax = max(1000 * sqrt(sum((p/typsize)^2)), 1000), steptol = 1e-06,     iterlim = 100, check.analyticals = TRUE) ","stats","base","4.0.5"
"nlminb","closure","function","TRUE","FALSE","(start, objective, gradient = NULL, hessian = NULL,     ..., scale = 1, control = list(), lower = -Inf, upper = Inf) ","stats","base","4.0.5"
"nls","closure","function","TRUE","FALSE","(formula, data = parent.frame(), start, control = nls.control(),     algorithm = c(""default"", ""plinear"", ""port""), trace = FALSE,     subset, weights, na.action, model = FALSE, lower = -Inf,     upper = Inf, ...) ","stats","base","4.0.5"
"nls.control","closure","function","TRUE","FALSE","(maxiter = 50, tol = 1e-05, minFactor = 1/1024, printEval = FALSE,     warnOnly = FALSE) ","stats","base","4.0.5"
"nobs","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"numericDeriv","closure","function","TRUE","FALSE","(expr, theta, rho = parent.frame(), dir = 1) ","stats","base","4.0.5"
"offset","closure","function","TRUE","FALSE","(object) ","stats","base","4.0.5"
"oneway.test","closure","function","TRUE","FALSE","(formula, data, subset, na.action, var.equal = FALSE) ","stats","base","4.0.5"
"optim","closure","function","TRUE","FALSE","(par, fn, gr = NULL, ..., method = c(""Nelder-Mead"",     ""BFGS"", ""CG"", ""L-BFGS-B"", ""SANN"", ""Brent""), lower = -Inf,     upper = Inf, control = list(), hessian = FALSE) ","stats","base","4.0.5"
"optimHess","closure","function","TRUE","FALSE","(par, fn, gr = NULL, ..., control = list()) ","stats","base","4.0.5"
"optimise","closure","function","TRUE","FALSE","(f, interval, ..., lower = min(interval), upper = max(interval),     maximum = FALSE, tol = .Machine$double.eps^0.25) ","stats","base","4.0.5"
"optimize","closure","function","TRUE","FALSE","(f, interval, ..., lower = min(interval), upper = max(interval),     maximum = FALSE, tol = .Machine$double.eps^0.25) ","stats","base","4.0.5"
"order.dendrogram","closure","function","TRUE","FALSE","(x) ","stats","base","4.0.5"
"p.adjust","closure","function","TRUE","FALSE","(p, method = p.adjust.methods, n = length(p)) ","stats","base","4.0.5"
"p.adjust.methods","character","character","TRUE","FALSE","NA","stats","base","4.0.5"
"pacf","closure","function","TRUE","FALSE","(x, lag.max, plot, na.action, ...) ","stats","base","4.0.5"
"pairwise.prop.test","closure","function","TRUE","FALSE","(x, n, p.adjust.method = p.adjust.methods, ...) ","stats","base","4.0.5"
"pairwise.t.test","closure","function","TRUE","FALSE","(x, g, p.adjust.method = p.adjust.methods, pool.sd = !paired,     paired = FALSE, alternative = c(""two.sided"", ""less"", ""greater""),     ...) ","stats","base","4.0.5"
"pairwise.table","closure","function","TRUE","FALSE","(compare.levels, level.names, p.adjust.method) ","stats","base","4.0.5"
"pairwise.wilcox.test","closure","function","TRUE","FALSE","(x, g, p.adjust.method = p.adjust.methods, paired = FALSE,     ...) ","stats","base","4.0.5"
"pbeta","closure","function","TRUE","FALSE","(q, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"pbinom","closure","function","TRUE","FALSE","(q, size, prob, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"pbirthday","closure","function","TRUE","FALSE","(n, classes = 365, coincident = 2) ","stats","base","4.0.5"
"pcauchy","closure","function","TRUE","FALSE","(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"pchisq","closure","function","TRUE","FALSE","(q, df, ncp = 0, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"pexp","closure","function","TRUE","FALSE","(q, rate = 1, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"pf","closure","function","TRUE","FALSE","(q, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"pgamma","closure","function","TRUE","FALSE","(q, shape, rate = 1, scale = 1/rate, lower.tail = TRUE,     log.p = FALSE) ","stats","base","4.0.5"
"pgeom","closure","function","TRUE","FALSE","(q, prob, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"phyper","closure","function","TRUE","FALSE","(q, m, n, k, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"plclust","closure","function","TRUE","FALSE","(tree, hang = 0.1, unit = FALSE, level = FALSE, hmin = 0,     square = TRUE, labels = NULL, plot. = TRUE, axes = TRUE,     frame.plot = FALSE, ann = TRUE, main = """", sub = NULL, xlab = NULL,     ylab = ""Height"") ","stats","base","4.0.5"
"plnorm","closure","function","TRUE","FALSE","(q, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"plogis","closure","function","TRUE","FALSE","(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"plot.ecdf","closure","function","TRUE","FALSE","(x, ..., ylab = ""Fn(x)"", verticals = FALSE, col.01line = ""gray70"",     pch = 19) ","stats","base","4.0.5"
"plot.spec.coherency","closure","function","TRUE","FALSE","(x, ci = 0.95, xlab = ""frequency"", ylab = ""squared coherency"",     ylim = c(0, 1), type = ""l"", main = NULL, ci.col = ""blue"",     ci.lty = 3, ...) ","stats","base","4.0.5"
"plot.spec.phase","closure","function","TRUE","FALSE","(x, ci = 0.95, xlab = ""frequency"", ylab = ""phase"", ylim = c(-pi,     pi), type = ""l"", main = NULL, ci.col = ""blue"", ci.lty = 3,     ...) ","stats","base","4.0.5"
"plot.stepfun","closure","function","TRUE","FALSE","(x, xval, xlim, ylim = range(c(y, Fn.kn)), xlab = ""x"",     ylab = ""f(x)"", main = NULL, add = FALSE, verticals = TRUE,     do.points = (n < 1000), pch = par(""pch""), col = par(""col""),     col.points = col, cex.points = par(""cex""), col.hor = col,     col.vert = col, lty = par(""lty""), lwd = par(""lwd""), ...) ","stats","base","4.0.5"
"plot.ts","closure","function","TRUE","FALSE","(x, y = NULL, plot.type = c(""multiple"", ""single""), xy.labels,     xy.lines, panel = lines, nc, yax.flip = FALSE, mar.multi = c(0,         5.1, 0, if (yax.flip) 5.1 else 2.1), oma.multi = c(6,         0, 5, 0), axes = TRUE, ...) ","stats","base","4.0.5"
"pnbinom","closure","function","TRUE","FALSE","(q, size, prob, mu, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"pnorm","closure","function","TRUE","FALSE","(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"poisson","closure","function","TRUE","FALSE","(link = ""log"") ","stats","base","4.0.5"
"poisson.test","closure","function","TRUE","FALSE","(x, T = 1, r = 1, alternative = c(""two.sided"", ""less"",     ""greater""), conf.level = 0.95) ","stats","base","4.0.5"
"poly","closure","function","TRUE","FALSE","(x, ..., degree = 1, coefs = NULL, raw = FALSE, simple = FALSE) ","stats","base","4.0.5"
"polym","closure","function","TRUE","FALSE","(..., degree = 1, coefs = NULL, raw = FALSE) ","stats","base","4.0.5"
"power","closure","function","TRUE","FALSE","(lambda = 1) ","stats","base","4.0.5"
"power.anova.test","closure","function","TRUE","FALSE","(groups = NULL, n = NULL, between.var = NULL, within.var = NULL,     sig.level = 0.05, power = NULL) ","stats","base","4.0.5"
"power.prop.test","closure","function","TRUE","FALSE","(n = NULL, p1 = NULL, p2 = NULL, sig.level = 0.05, power = NULL,     alternative = c(""two.sided"", ""one.sided""), strict = FALSE,     tol = .Machine$double.eps^0.25) ","stats","base","4.0.5"
"power.t.test","closure","function","TRUE","FALSE","(n = NULL, delta = NULL, sd = 1, sig.level = 0.05, power = NULL,     type = c(""two.sample"", ""one.sample"", ""paired""), alternative = c(""two.sided"",         ""one.sided""), strict = FALSE, tol = .Machine$double.eps^0.25) ","stats","base","4.0.5"
"ppoints","closure","function","TRUE","FALSE","(n, a = if (n <= 10) 3/8 else 1/2) ","stats","base","4.0.5"
"ppois","closure","function","TRUE","FALSE","(q, lambda, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"ppr","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"prcomp","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"predict","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"predict.glm","closure","function","TRUE","FALSE","(object, newdata = NULL, type = c(""link"", ""response"",     ""terms""), se.fit = FALSE, dispersion = NULL, terms = NULL,     na.action = na.pass, ...) ","stats","base","4.0.5"
"predict.lm","closure","function","TRUE","FALSE","(object, newdata, se.fit = FALSE, scale = NULL, df = Inf,     interval = c(""none"", ""confidence"", ""prediction""), level = 0.95,     type = c(""response"", ""terms""), terms = NULL, na.action = na.pass,     pred.var = res.var/weights, weights = 1, ...) ","stats","base","4.0.5"
"preplot","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"princomp","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"printCoefmat","closure","function","TRUE","FALSE","(x, digits = max(3L, getOption(""digits"") - 2L), signif.stars = getOption(""show.signif.stars""),     signif.legend = signif.stars, dig.tst = max(1L, min(5L, digits -         1L)), cs.ind = 1:k, tst.ind = k + 1, zap.ind = integer(),     P.values = NULL, has.Pvalue = nc >= 4L && length(cn <- colnames(x)) &&         substr(cn[nc], 1L, 3L) %in% c(""Pr("", ""p-v""), eps.Pvalue = .Machine$double.eps,     na.print = ""NA"", quote = FALSE, right = TRUE, ...) ","stats","base","4.0.5"
"profile","closure","function","TRUE","FALSE","(fitted, ...) ","stats","base","4.0.5"
"proj","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"promax","closure","function","TRUE","FALSE","(x, m = 4) ","stats","base","4.0.5"
"prop.test","closure","function","TRUE","FALSE","(x, n, p = NULL, alternative = c(""two.sided"", ""less"",     ""greater""), conf.level = 0.95, correct = TRUE) ","stats","base","4.0.5"
"prop.trend.test","closure","function","TRUE","FALSE","(x, n, score = seq_along(x)) ","stats","base","4.0.5"
"psignrank","closure","function","TRUE","FALSE","(q, n, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"pt","closure","function","TRUE","FALSE","(q, df, ncp, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"ptukey","closure","function","TRUE","FALSE","(q, nmeans, df, nranges = 1, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"punif","closure","function","TRUE","FALSE","(q, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"pweibull","closure","function","TRUE","FALSE","(q, shape, scale = 1, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"pwilcox","closure","function","TRUE","FALSE","(q, m, n, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qbeta","closure","function","TRUE","FALSE","(p, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qbinom","closure","function","TRUE","FALSE","(p, size, prob, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qbirthday","closure","function","TRUE","FALSE","(prob = 0.5, classes = 365, coincident = 2) ","stats","base","4.0.5"
"qcauchy","closure","function","TRUE","FALSE","(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qchisq","closure","function","TRUE","FALSE","(p, df, ncp = 0, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qexp","closure","function","TRUE","FALSE","(p, rate = 1, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qf","closure","function","TRUE","FALSE","(p, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qgamma","closure","function","TRUE","FALSE","(p, shape, rate = 1, scale = 1/rate, lower.tail = TRUE,     log.p = FALSE) ","stats","base","4.0.5"
"qgeom","closure","function","TRUE","FALSE","(p, prob, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qhyper","closure","function","TRUE","FALSE","(p, m, n, k, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qlnorm","closure","function","TRUE","FALSE","(p, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qlogis","closure","function","TRUE","FALSE","(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qnbinom","closure","function","TRUE","FALSE","(p, size, prob, mu, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qnorm","closure","function","TRUE","FALSE","(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qpois","closure","function","TRUE","FALSE","(p, lambda, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qqline","closure","function","TRUE","FALSE","(y, datax = FALSE, distribution = qnorm, probs = c(0.25,     0.75), qtype = 7, ...) ","stats","base","4.0.5"
"qqnorm","closure","function","TRUE","FALSE","(y, ...) ","stats","base","4.0.5"
"qqplot","closure","function","TRUE","FALSE","(x, y, plot.it = TRUE, xlab = deparse1(substitute(x)),     ylab = deparse1(substitute(y)), ...) ","stats","base","4.0.5"
"qsignrank","closure","function","TRUE","FALSE","(p, n, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qt","closure","function","TRUE","FALSE","(p, df, ncp, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qtukey","closure","function","TRUE","FALSE","(p, nmeans, df, nranges = 1, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"quade.test","closure","function","TRUE","FALSE","(y, ...) ","stats","base","4.0.5"
"quantile","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"quasi","closure","function","TRUE","FALSE","(link = ""identity"", variance = ""constant"") ","stats","base","4.0.5"
"quasibinomial","closure","function","TRUE","FALSE","(link = ""logit"") ","stats","base","4.0.5"
"quasipoisson","closure","function","TRUE","FALSE","(link = ""log"") ","stats","base","4.0.5"
"qunif","closure","function","TRUE","FALSE","(p, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qweibull","closure","function","TRUE","FALSE","(p, shape, scale = 1, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"qwilcox","closure","function","TRUE","FALSE","(p, m, n, lower.tail = TRUE, log.p = FALSE) ","stats","base","4.0.5"
"r2dtable","closure","function","TRUE","FALSE","(n, r, c) ","stats","base","4.0.5"
"rWishart","closure","function","TRUE","FALSE","(n, df, Sigma) ","stats","base","4.0.5"
"rbeta","closure","function","TRUE","FALSE","(n, shape1, shape2, ncp = 0) ","stats","base","4.0.5"
"rbinom","closure","function","TRUE","FALSE","(n, size, prob) ","stats","base","4.0.5"
"rcauchy","closure","function","TRUE","FALSE","(n, location = 0, scale = 1) ","stats","base","4.0.5"
"rchisq","closure","function","TRUE","FALSE","(n, df, ncp = 0) ","stats","base","4.0.5"
"read.ftable","closure","function","TRUE","FALSE","(file, sep = """", quote = ""\"""", row.var.names, col.vars,     skip = 0) ","stats","base","4.0.5"
"rect.hclust","closure","function","TRUE","FALSE","(tree, k = NULL, which = NULL, x = NULL, h = NULL, border = 2,     cluster = NULL) ","stats","base","4.0.5"
"reformulate","closure","function","TRUE","FALSE","(termlabels, response = NULL, intercept = TRUE, env = parent.frame()) ","stats","base","4.0.5"
"relevel","closure","function","TRUE","FALSE","(x, ref, ...) ","stats","base","4.0.5"
"reorder","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"replications","closure","function","TRUE","FALSE","(formula, data = NULL, na.action) ","stats","base","4.0.5"
"reshape","closure","function","TRUE","FALSE","(data, varying = NULL, v.names = NULL, timevar = ""time"",     idvar = ""id"", ids = 1L:NROW(data), times = seq_along(varying[[1L]]),     drop = NULL, direction, new.row.names = NULL, sep = ""."",     split = if (sep == """") ","stats","base","4.0.5"
"resid","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"residuals","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"residuals.glm","closure","function","TRUE","FALSE","(object, type = c(""deviance"", ""pearson"", ""working"",     ""response"", ""partial""), ...) ","stats","base","4.0.5"
"residuals.lm","closure","function","TRUE","FALSE","(object, type = c(""working"", ""response"", ""deviance"",     ""pearson"", ""partial""), ...) ","stats","base","4.0.5"
"rexp","closure","function","TRUE","FALSE","(n, rate = 1) ","stats","base","4.0.5"
"rf","closure","function","TRUE","FALSE","(n, df1, df2, ncp) ","stats","base","4.0.5"
"rgamma","closure","function","TRUE","FALSE","(n, shape, rate = 1, scale = 1/rate) ","stats","base","4.0.5"
"rgeom","closure","function","TRUE","FALSE","(n, prob) ","stats","base","4.0.5"
"rhyper","closure","function","TRUE","FALSE","(nn, m, n, k) ","stats","base","4.0.5"
"rlnorm","closure","function","TRUE","FALSE","(n, meanlog = 0, sdlog = 1) ","stats","base","4.0.5"
"rlogis","closure","function","TRUE","FALSE","(n, location = 0, scale = 1) ","stats","base","4.0.5"
"rmultinom","closure","function","TRUE","FALSE","(n, size, prob) ","stats","base","4.0.5"
"rnbinom","closure","function","TRUE","FALSE","(n, size, prob, mu) ","stats","base","4.0.5"
"rnorm","closure","function","TRUE","FALSE","(n, mean = 0, sd = 1) ","stats","base","4.0.5"
"rpois","closure","function","TRUE","FALSE","(n, lambda) ","stats","base","4.0.5"
"rsignrank","closure","function","TRUE","FALSE","(nn, n) ","stats","base","4.0.5"
"rstandard","closure","function","TRUE","FALSE","(model, ...) ","stats","base","4.0.5"
"rstudent","closure","function","TRUE","FALSE","(model, ...) ","stats","base","4.0.5"
"rt","closure","function","TRUE","FALSE","(n, df, ncp) ","stats","base","4.0.5"
"runif","closure","function","TRUE","FALSE","(n, min = 0, max = 1) ","stats","base","4.0.5"
"runmed","closure","function","TRUE","FALSE","(x, k, endrule = c(""median"", ""keep"", ""constant""), algorithm = NULL,     na.action = c(""+Big_alternate"", ""-Big_alternate"", ""na.omit"",         ""fail""), print.level = 0) ","stats","base","4.0.5"
"rweibull","closure","function","TRUE","FALSE","(n, shape, scale = 1) ","stats","base","4.0.5"
"rwilcox","closure","function","TRUE","FALSE","(nn, m, n) ","stats","base","4.0.5"
"scatter.smooth","closure","function","TRUE","FALSE","(x, y = NULL, span = 2/3, degree = 1, family = c(""symmetric"",     ""gaussian""), xlab = NULL, ylab = NULL, ylim = range(y, pred$y,     na.rm = TRUE), evaluation = 50, ..., lpars = list()) ","stats","base","4.0.5"
"screeplot","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"sd","closure","function","TRUE","FALSE","(x, na.rm = FALSE) ","stats","base","4.0.5"
"se.contrast","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"selfStart","closure","function","TRUE","FALSE","(model, initial, parameters, template) ","stats","base","4.0.5"
"setNames","closure","function","TRUE","FALSE","(object = nm, nm) ","stats","base","4.0.5"
"shapiro.test","closure","function","TRUE","FALSE","(x) ","stats","base","4.0.5"
"sigma","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"simulate","closure","function","TRUE","FALSE","(object, nsim = 1, seed = NULL, ...) ","stats","base","4.0.5"
"smooth","closure","function","TRUE","FALSE","(x, kind = c(""3RS3R"", ""3RSS"", ""3RSR"", ""3R"", ""3"", ""S""),     twiceit = FALSE, endrule = c(""Tukey"", ""copy""), do.ends = FALSE) ","stats","base","4.0.5"
"smooth.spline","closure","function","TRUE","FALSE","(x, y = NULL, w = NULL, df, spar = NULL, lambda = NULL,     cv = FALSE, all.knots = FALSE, nknots = .nknots.smspl, keep.data = TRUE,     df.offset = 0, penalty = 1, control.spar = list(), tol = 1e-06 *         IQR(x), keep.stuff = FALSE) ","stats","base","4.0.5"
"smoothEnds","closure","function","TRUE","FALSE","(y, k = 3) ","stats","base","4.0.5"
"sortedXyData","closure","function","TRUE","FALSE","(x, y, data) ","stats","base","4.0.5"
"spec.ar","closure","function","TRUE","FALSE","(x, n.freq, order = NULL, plot = TRUE, na.action = na.fail,     method = ""yule-walker"", ...) ","stats","base","4.0.5"
"spec.pgram","closure","function","TRUE","FALSE","(x, spans = NULL, kernel = NULL, taper = 0.1, pad = 0,     fast = TRUE, demean = FALSE, detrend = TRUE, plot = TRUE,     na.action = na.fail, ...) ","stats","base","4.0.5"
"spec.taper","closure","function","TRUE","FALSE","(x, p = 0.1) ","stats","base","4.0.5"
"spectrum","closure","function","TRUE","FALSE","(x, ..., method = c(""pgram"", ""ar"")) ","stats","base","4.0.5"
"spline","closure","function","TRUE","FALSE","(x, y = NULL, n = 3 * length(x), method = ""fmm"", xmin = min(x),     xmax = max(x), xout, ties = mean) ","stats","base","4.0.5"
"splinefun","closure","function","TRUE","FALSE","(x, y = NULL, method = c(""fmm"", ""periodic"", ""natural"",     ""monoH.FC"", ""hyman""), ties = mean) ","stats","base","4.0.5"
"splinefunH","closure","function","TRUE","FALSE","(x, y, m) ","stats","base","4.0.5"
"start","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"stat.anova","closure","function","TRUE","FALSE","(table, test = c(""Rao"", ""LRT"", ""Chisq"", ""F"", ""Cp""),     scale, df.scale, n) ","stats","base","4.0.5"
"step","closure","function","TRUE","FALSE","(object, scope, scale = 0, direction = c(""both"", ""backward"",     ""forward""), trace = 1, keep = NULL, steps = 1000, k = 2,     ...) ","stats","base","4.0.5"
"stepfun","closure","function","TRUE","FALSE","(x, y, f = as.numeric(right), ties = ""ordered"", right = FALSE) ","stats","base","4.0.5"
"stl","closure","function","TRUE","FALSE","(x, s.window, s.degree = 0, t.window = NULL, t.degree = 1,     l.window = nextodd(period), l.degree = t.degree, s.jump = ceiling(s.window/10),     t.jump = ceiling(t.window/10), l.jump = ceiling(l.window/10),     robust = FALSE, inner = if (robust) 1 else 2, outer = if (robust) 15 else 0,     na.action = na.fail) ","stats","base","4.0.5"
"summary.aov","closure","function","TRUE","FALSE","(object, intercept = FALSE, split, expand.split = TRUE,     keep.zero.df = TRUE, ...) ","stats","base","4.0.5"
"summary.glm","closure","function","TRUE","FALSE","(object, dispersion = NULL, correlation = FALSE, symbolic.cor = FALSE,     ...) ","stats","base","4.0.5"
"summary.lm","closure","function","TRUE","FALSE","(object, correlation = FALSE, symbolic.cor = FALSE,     ...) ","stats","base","4.0.5"
"summary.manova","closure","function","TRUE","FALSE","(object, test = c(""Pillai"", ""Wilks"", ""Hotelling-Lawley"",     ""Roy""), intercept = FALSE, tol = 1e-07, ...) ","stats","base","4.0.5"
"summary.stepfun","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"supsmu","closure","function","TRUE","FALSE","(x, y, wt = rep(1, n), span = ""cv"", periodic = FALSE,     bass = 0, trace = FALSE) ","stats","base","4.0.5"
"symnum","closure","function","TRUE","FALSE","(x, cutpoints = c(0.3, 0.6, 0.8, 0.9, 0.95), symbols = if (numeric.x) c("" "",     ""."", "","", ""+"", ""*"", ""B"") else c(""."", ""|""), legend = length(symbols) >=     3, na = ""?"", eps = 1e-05, numeric.x = is.numeric(x), corr = missing(cutpoints) &&     numeric.x, show.max = if (corr) ""1"", show.min = NULL, abbr.colnames = has.colnames,     lower.triangular = corr && is.numeric(x) && is.matrix(x),     diag.lower.tri = corr && !is.null(show.max)) ","stats","base","4.0.5"
"t.test","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"termplot","closure","function","TRUE","FALSE","(model, data = NULL, envir = environment(formula(model)),     partial.resid = FALSE, rug = FALSE, terms = NULL, se = FALSE,     xlabs = NULL, ylabs = NULL, main = NULL, col.term = 2, lwd.term = 1.5,     col.se = ""orange"", lty.se = 2, lwd.se = 1, col.res = ""gray"",     cex = 1, pch = par(""pch""), col.smth = ""darkred"", lty.smth = 2,     span.smth = 2/3, ask = dev.interactive() && nb.fig < n.tms,     use.factor.levels = TRUE, smooth = NULL, ylim = ""common"",     plot = TRUE, transform.x = FALSE, ...) ","stats","base","4.0.5"
"terms","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"terms.formula","closure","function","TRUE","FALSE","(x, specials = NULL, abb = NULL, data = NULL, neg.out = TRUE,     keep.order = FALSE, simplify = FALSE, ..., allowDotAsName = FALSE) ","stats","base","4.0.5"
"time","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"toeplitz","closure","function","TRUE","TRUE","(x) ","stats","base","4.0.5"
"ts","closure","function","TRUE","FALSE","(data = NA, start = 1, end = numeric(), frequency = 1,     deltat = 1, ts.eps = getOption(""ts.eps""), class = if (nseries >         1) c(""mts"", ""ts"", ""matrix"") else ""ts"", names = if (!is.null(dimnames(data))) colnames(data) else paste(""Series"",         seq(nseries))) ","stats","base","4.0.5"
"ts.intersect","closure","function","TRUE","FALSE","(..., dframe = FALSE) ","stats","base","4.0.5"
"ts.plot","closure","function","TRUE","FALSE","(..., gpars = list()) ","stats","base","4.0.5"
"ts.union","closure","function","TRUE","FALSE","(..., dframe = FALSE) ","stats","base","4.0.5"
"tsSmooth","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"tsdiag","closure","function","TRUE","FALSE","(object, gof.lag, ...) ","stats","base","4.0.5"
"tsp","closure","function","TRUE","FALSE","(x) ","stats","base","4.0.5"
"tsp<-","closure","function","TRUE","FALSE","(x, value) ","stats","base","4.0.5"
"uniroot","closure","function","TRUE","FALSE","(f, interval, ..., lower = min(interval), upper = max(interval),     f.lower = f(lower, ...), f.upper = f(upper, ...), extendInt = c(""no"",         ""yes"", ""downX"", ""upX""), check.conv = FALSE, tol = .Machine$double.eps^0.25,     maxiter = 1000, trace = 0) ","stats","base","4.0.5"
"update","closure","function","TRUE","TRUE","(object, ...) ","stats","base","4.0.5"
"update.default","closure","function","TRUE","FALSE","(object, formula., ..., evaluate = TRUE) ","stats","base","4.0.5"
"update.formula","closure","function","TRUE","FALSE","(old, new, ...) ","stats","base","4.0.5"
"var","closure","function","TRUE","FALSE","(x, y = NULL, na.rm = FALSE, use) ","stats","base","4.0.5"
"var.test","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"variable.names","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"varimax","closure","function","TRUE","FALSE","(x, normalize = TRUE, eps = 1e-05) ","stats","base","4.0.5"
"vcov","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"weighted.mean","closure","function","TRUE","FALSE","(x, w, ...) ","stats","base","4.0.5"
"weighted.residuals","closure","function","TRUE","FALSE","(obj, drop0 = TRUE) ","stats","base","4.0.5"
"weights","closure","function","TRUE","FALSE","(object, ...) ","stats","base","4.0.5"
"wilcox.test","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"window","closure","function","TRUE","FALSE","(x, ...) ","stats","base","4.0.5"
"window<-","closure","function","TRUE","FALSE","(x, ..., value) ","stats","base","4.0.5"
"write.ftable","closure","function","TRUE","FALSE","(x, file = """", quote = TRUE, append = FALSE, digits = getOption(""digits""),     ...) ","stats","base","4.0.5"
"xtabs","closure","function","TRUE","FALSE","(formula = ~., data = parent.frame(), subset, sparse = FALSE,     na.action, addNA = FALSE, exclude = if (!addNA) c(NA, NaN),     drop.unused.levels = FALSE) ","stats","base","4.0.5"
".__C__mle","S4","classRepresentation","TRUE","FALSE","NA","stats4","base","4.0.5"
".__C__profile.mle","S4","classRepresentation","TRUE","FALSE","NA","stats4","base","4.0.5"
".__C__summary.mle","S4","classRepresentation","TRUE","FALSE","NA","stats4","base","4.0.5"
".__T__AIC:stats","environment","environment","TRUE","FALSE","NA","stats4","base","4.0.5"
".__T__BIC:stats","environment","environment","TRUE","FALSE","NA","stats4","base","4.0.5"
".__T__coef:stats","environment","environment","TRUE","FALSE","NA","stats4","base","4.0.5"
".__T__confint:stats","environment","environment","TRUE","FALSE","NA","stats4","base","4.0.5"
".__T__logLik:stats","environment","environment","TRUE","FALSE","NA","stats4","base","4.0.5"
".__T__nobs:stats","environment","environment","TRUE","FALSE","NA","stats4","base","4.0.5"
".__T__plot:base","environment","environment","TRUE","FALSE","NA","stats4","base","4.0.5"
".__T__profile:stats","environment","environment","TRUE","FALSE","NA","stats4","base","4.0.5"
".__T__show:methods","environment","environment","TRUE","FALSE","NA","stats4","base","4.0.5"
".__T__summary:base","environment","environment","TRUE","FALSE","NA","stats4","base","4.0.5"
".__T__update:stats","environment","environment","TRUE","FALSE","NA","stats4","base","4.0.5"
".__T__vcov:stats","environment","environment","TRUE","FALSE","NA","stats4","base","4.0.5"
"AIC","closure","standardGeneric","TRUE","TRUE","(object, ..., k = 2) ","stats4","base","4.0.5"
"BIC","closure","standardGeneric","TRUE","TRUE","(object, ...) ","stats4","base","4.0.5"
"coef","closure","standardGeneric","TRUE","TRUE","(object, ...) ","stats4","base","4.0.5"
"confint","closure","standardGeneric","TRUE","TRUE","(object, parm, level = 0.95, ...) ","stats4","base","4.0.5"
"logLik","closure","standardGeneric","TRUE","TRUE","(object, ...) ","stats4","base","4.0.5"
"mle","closure","function","TRUE","FALSE","(minuslogl, start, optim = stats::optim, method = if (!useLim) ""BFGS"" else ""L-BFGS-B"",     fixed = list(), nobs, lower, upper, ...) ","stats4","base","4.0.5"
"nobs","closure","standardGeneric","TRUE","TRUE","(object, ...) ","stats4","base","4.0.5"
"plot","closure","standardGeneric","TRUE","TRUE","(x, y, ...) ","stats4","base","4.0.5"
"profile","closure","standardGeneric","TRUE","TRUE","(fitted, ...) ","stats4","base","4.0.5"
"show","closure","standardGeneric","TRUE","TRUE","(object) ","stats4","base","4.0.5"
"summary","closure","standardGeneric","TRUE","TRUE","(object, ...) ","stats4","base","4.0.5"
"update","closure","standardGeneric","TRUE","TRUE","(object, ...) ","stats4","base","4.0.5"
"vcov","closure","standardGeneric","TRUE","TRUE","(object, ...) ","stats4","base","4.0.5"
"Surv","closure","function","TRUE","FALSE","(time, time2, event, type = c(""right"", ""left"", ""interval"",     ""counting"", ""interval2"", ""mstate""), origin = 0) ","survival","recommended","4.0.5"
"Surv2","closure","function","TRUE","FALSE","(time, event, repeated = FALSE) ","survival","recommended","4.0.5"
"Surv2data","closure","function","TRUE","FALSE","(formula, data, subset, id) ","survival","recommended","4.0.5"
"aareg","closure","function","TRUE","FALSE","(formula, data, weights, subset, na.action, qrtol = 1e-07,     nmin, dfbeta = FALSE, taper = 1, test = c(""aalen"", ""variance"",         ""nrisk""), model = FALSE, x = FALSE, y = FALSE) ","survival","recommended","4.0.5"
"aeqSurv","closure","function","TRUE","FALSE","(x, tolerance = sqrt(.Machine$double.eps)) ","survival","recommended","4.0.5"
"agexact.fit","closure","function","TRUE","FALSE","(x, y, strata, offset, init, control, weights, method,     rownames, resid = TRUE, nocenter = NULL) ","survival","recommended","4.0.5"
"agreg.fit","closure","function","TRUE","FALSE","(x, y, strata, offset, init, control, weights, method,     rownames, resid = TRUE, nocenter = NULL) ","survival","recommended","4.0.5"
"aml","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"attrassign","closure","function","TRUE","FALSE","(object, ...) ","survival","recommended","4.0.5"
"basehaz","closure","function","TRUE","FALSE","(fit, centered = TRUE) ","survival","recommended","4.0.5"
"bcloglog","closure","function","TRUE","FALSE","(edge = 0.05) ","survival","recommended","4.0.5"
"bladder","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"bladder1","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"bladder2","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"blog","closure","function","TRUE","FALSE","(edge = 0.05) ","survival","recommended","4.0.5"
"blogit","closure","function","TRUE","FALSE","(edge = 0.05) ","survival","recommended","4.0.5"
"bprobit","closure","function","TRUE","FALSE","(edge = 0.05) ","survival","recommended","4.0.5"
"cancer","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"capacitor","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"cch","closure","function","TRUE","FALSE","(formula, data, subcoh, id, stratum = NULL, cohort.size,     method = c(""Prentice"", ""SelfPrentice"", ""LinYing"", ""I.Borgan"",         ""II.Borgan""), robust = FALSE) ","survival","recommended","4.0.5"
"cgd","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"cgd0","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"cipoisson","closure","function","TRUE","FALSE","(k, time = 1, p = 0.95, method = c(""exact"", ""anscombe"")) ","survival","recommended","4.0.5"
"clogit","closure","function","TRUE","FALSE","(formula, data, weights, subset, na.action, method = c(""exact"",     ""approximate"", ""efron"", ""breslow""), ...) ","survival","recommended","4.0.5"
"cluster","closure","function","TRUE","FALSE","(x) ","survival","recommended","4.0.5"
"colon","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"concordance","closure","function","TRUE","FALSE","(object, ...) ","survival","recommended","4.0.5"
"concordancefit","closure","function","TRUE","FALSE","(y, x, strata, weights, ymin = NULL, ymax = NULL, timewt = c(""n"",     ""S"", ""S/G"", ""n/G"", ""n/G2"", ""I""), cluster, influence = 0,     ranks = FALSE, reverse = FALSE, timefix = TRUE, keepstrata = 10) ","survival","recommended","4.0.5"
"cox.zph","closure","function","TRUE","FALSE","(fit, transform = ""km"", terms = TRUE, singledf = FALSE,     global = TRUE) ","survival","recommended","4.0.5"
"coxph","closure","function","TRUE","FALSE","(formula, data, weights, subset, na.action, init, control,     ties = c(""efron"", ""breslow"", ""exact""), singular.ok = TRUE,     robust, model = FALSE, x = FALSE, y = TRUE, tt, method = ties,     id, cluster, istate, statedata, nocenter = c(-1, 0, 1), ...) ","survival","recommended","4.0.5"
"coxph.control","closure","function","TRUE","FALSE","(eps = 1e-09, toler.chol = .Machine$double.eps^0.75,     iter.max = 20, toler.inf = sqrt(eps), outer.max = 10, timefix = TRUE) ","survival","recommended","4.0.5"
"coxph.detail","closure","function","TRUE","FALSE","(object, riskmat = FALSE, rorder = c(""data"", ""time"")) ","survival","recommended","4.0.5"
"coxph.fit","closure","function","TRUE","FALSE","(x, y, strata, offset, init, control, weights, method,     rownames, resid = TRUE, nocenter = NULL) ","survival","recommended","4.0.5"
"coxph.wtest","closure","function","TRUE","FALSE","(var, b, toler.chol = 1e-09) ","survival","recommended","4.0.5"
"coxsurv.fit","closure","function","TRUE","FALSE","(ctype, stype, se.fit, varmat, cluster, y, x, wt, risk,     position, strata, oldid, y2, x2, risk2, strata2, id2, unlist = TRUE) ","survival","recommended","4.0.5"
"cracks","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"diabetic","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"dsurvreg","closure","function","TRUE","FALSE","(x, mean, scale = 1, distribution = ""weibull"", parms) ","survival","recommended","4.0.5"
"finegray","closure","function","TRUE","FALSE","(formula, data, weights, subset, na.action = na.pass,     etype, prefix = ""fg"", count = """", id, timefix = TRUE) ","survival","recommended","4.0.5"
"flchain","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"format.Surv","closure","function","TRUE","FALSE","(x, ...) ","survival","recommended","4.0.5"
"frailty","closure","function","TRUE","FALSE","(x, distribution = ""gamma"", ...) ","survival","recommended","4.0.5"
"frailty.gamma","closure","function","TRUE","FALSE","(x, sparse = (nclass > 5), theta, df, eps = 1e-05, method = c(""em"",     ""aic"", ""df"", ""fixed""), ...) ","survival","recommended","4.0.5"
"frailty.gaussian","closure","function","TRUE","FALSE","(x, sparse = (nclass > 5), theta, df, method = c(""reml"",     ""aic"", ""df"", ""fixed""), ...) ","survival","recommended","4.0.5"
"frailty.t","closure","function","TRUE","FALSE","(x, sparse = (nclass > 5), theta, df, eps = 1e-05, tdf = 5,     method = c(""aic"", ""df"", ""fixed""), ...) ","survival","recommended","4.0.5"
"gbsg","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"genfan","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"heart","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"ifluid","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"imotor","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"is.Surv","closure","function","TRUE","FALSE","(x) ","survival","recommended","4.0.5"
"is.na.Surv","closure","function","TRUE","FALSE","(x) ","survival","recommended","4.0.5"
"is.ratetable","closure","function","TRUE","FALSE","(x, verbose = FALSE) ","survival","recommended","4.0.5"
"jasa","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"jasa1","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"kidney","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"labels.survreg","closure","function","TRUE","FALSE","(object, ...) ","survival","recommended","4.0.5"
"leukemia","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"logan","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"lung","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"match.ratetable","closure","function","TRUE","FALSE","(R, ratetable) ","survival","recommended","4.0.5"
"mgus","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"mgus1","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"mgus2","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"myeloid","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"nafld1","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"nafld2","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"nafld3","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"neardate","closure","function","TRUE","FALSE","(id1, id2, y1, y2, best = c(""after"", ""prior""), nomatch = NA_integer_) ","survival","recommended","4.0.5"
"nsk","closure","function","TRUE","FALSE","(x, df = NULL, knots = NULL, intercept = FALSE, b = 0.05,     Boundary.knots = quantile(x, c(b, 1 - b), na.rm = TRUE)) ","survival","recommended","4.0.5"
"nwtco","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"ovarian","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"pbc","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"pbcseq","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"pseudo","closure","function","TRUE","FALSE","(fit, times, type, addNA = TRUE, data.frame = FALSE,     minus1 = FALSE, ...) ","survival","recommended","4.0.5"
"pspline","closure","function","TRUE","FALSE","(x, df = 4, theta, nterm = 2.5 * df, degree = 3, eps = 0.1,     method, Boundary.knots = range(x), intercept = FALSE, penalty = TRUE,     combine, ...) ","survival","recommended","4.0.5"
"psurvreg","closure","function","TRUE","FALSE","(q, mean, scale = 1, distribution = ""weibull"", parms) ","survival","recommended","4.0.5"
"pyears","closure","function","TRUE","FALSE","(formula, data, weights, subset, na.action, rmap, ratetable,     scale = 365.25, expect = c(""event"", ""pyears""), model = FALSE,     x = FALSE, y = FALSE, data.frame = FALSE) ","survival","recommended","4.0.5"
"qsurvreg","closure","function","TRUE","FALSE","(p, mean, scale = 1, distribution = ""weibull"", parms) ","survival","recommended","4.0.5"
"ratetable","closure","function","TRUE","FALSE","(...) ","survival","recommended","4.0.5"
"ratetableDate","closure","function","TRUE","FALSE","(x) ","survival","recommended","4.0.5"
"rats","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"rats2","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"retinopathy","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"rhDNase","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"ridge","closure","function","TRUE","FALSE","(..., theta, df = nvar/2, eps = 0.1, scale = TRUE) ","survival","recommended","4.0.5"
"rotterdam","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"royston","closure","function","TRUE","FALSE","(fit, newdata, ties = TRUE, adjust = FALSE) ","survival","recommended","4.0.5"
"rsurvreg","closure","function","TRUE","FALSE","(n, mean, scale = 1, distribution = ""weibull"", parms) ","survival","recommended","4.0.5"
"rttright","closure","function","TRUE","FALSE","(formula, data, weights, subset, na.action, times, id,     timefix = TRUE) ","survival","recommended","4.0.5"
"solder","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"stanford2","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"statefig","closure","function","TRUE","FALSE","(layout, connect, margin = 0.03, box = TRUE, cex = 1,     col = 1, lwd = 1, lty = 1, bcol = col, acol = col, alwd = lwd,     alty = lty, offset = 0) ","survival","recommended","4.0.5"
"strata","closure","function","TRUE","FALSE","(..., na.group = FALSE, shortlabel, sep = "", "") ","survival","recommended","4.0.5"
"survConcordance","closure","function","TRUE","FALSE","(formula, data, weights, subset, na.action) ","survival","recommended","4.0.5"
"survConcordance.fit","closure","function","TRUE","FALSE","(y, x, strata, weight) ","survival","recommended","4.0.5"
"survSplit","closure","function","TRUE","FALSE","(formula, data, subset, na.action = na.pass, cut, start = ""tstart"",     id, zero = 0, episode, end = ""tstop"", event = ""event"") ","survival","recommended","4.0.5"
"survcheck","closure","function","TRUE","FALSE","(formula, data, subset, na.action, id, istate, istate0 = ""(s0)"",     timefix = TRUE, ...) ","survival","recommended","4.0.5"
"survdiff","closure","function","TRUE","FALSE","(formula, data, subset, na.action, rho = 0, timefix = TRUE) ","survival","recommended","4.0.5"
"survexp","closure","function","TRUE","FALSE","(formula, data, weights, subset, na.action, rmap, times,     method = c(""ederer"", ""hakulinen"", ""conditional"", ""individual.h"",         ""individual.s""), cohort = TRUE, conditional = FALSE,     ratetable = survival::survexp.us, scale = 1, se.fit, model = FALSE,     x = FALSE, y = FALSE) ","survival","recommended","4.0.5"
"survexp.mn","double","ratetable","FALSE","FALSE","NA","survival","recommended","4.0.5"
"survexp.us","double","ratetable","FALSE","FALSE","NA","survival","recommended","4.0.5"
"survexp.usr","double","ratetable","FALSE","FALSE","NA","survival","recommended","4.0.5"
"survfit","closure","function","TRUE","FALSE","(formula, ...) ","survival","recommended","4.0.5"
"survfit.formula","closure","function","TRUE","FALSE","(formula, data, weights, subset, na.action, stype = 1,     ctype = 1, id, cluster, robust, istate, timefix = TRUE, etype,     error, ...) ","survival","recommended","4.0.5"
"survfit0","closure","function","TRUE","FALSE","(x, start.time = 0) ","survival","recommended","4.0.5"
"survfitCI","closure","function","TRUE","FALSE","(X, Y, weights, id, cluster, robust, istate, stype = 1,     ctype = 1, se.fit = TRUE, conf.int = 0.95, conf.type = c(""log"",         ""log-log"", ""plain"", ""none"", ""logit"", ""arcsin""), conf.lower = c(""usual"",         ""peto"", ""modified""), influence = FALSE, start.time, p0,     type) ","survival","recommended","4.0.5"
"survfitKM","closure","function","TRUE","FALSE","(x, y, weights = rep(1, length(x)), stype = 1, ctype = 1,     se.fit = TRUE, conf.int = 0.95, conf.type = c(""log"", ""log-log"",         ""plain"", ""none"", ""logit"", ""arcsin""), conf.lower = c(""usual"",         ""peto"", ""modified""), start.time, id, cluster, robust,     influence = FALSE, type) ","survival","recommended","4.0.5"
"survfitcoxph.fit","closure","function","TRUE","FALSE","(y, x, wt, x2, risk, newrisk, strata, se.fit, survtype,     vartype, varmat, id, y2, strata2, unlist = TRUE) ","survival","recommended","4.0.5"
"survobrien","closure","function","TRUE","FALSE","(formula, data, subset, na.action, transform) ","survival","recommended","4.0.5"
"survpenal.fit","closure","function","TRUE","FALSE","(x, y, weights, offset, init, controlvals, dist, scale = 0,     nstrat = 1, strata, pcols, pattr, assign, parms = NULL) ","survival","recommended","4.0.5"
"survreg","closure","function","TRUE","FALSE","(formula, data, weights, subset, na.action, dist = ""weibull"",     init = NULL, scale = 0, control, parms = NULL, model = FALSE,     x = FALSE, y = TRUE, robust = FALSE, cluster, score = FALSE,     ...) ","survival","recommended","4.0.5"
"survreg.control","closure","function","TRUE","FALSE","(maxiter = 30, rel.tolerance = 1e-09, toler.chol = 1e-10,     iter.max, debug = 0, outer.max = 10) ","survival","recommended","4.0.5"
"survreg.distributions","list","list","TRUE","FALSE","NA","survival","recommended","4.0.5"
"survreg.fit","closure","function","TRUE","FALSE","(x, y, weights, offset, init, controlvals, dist, scale = 0,     nstrat = 1, strata, parms = NULL, assign) ","survival","recommended","4.0.5"
"survregDtest","closure","function","TRUE","FALSE","(dlist, verbose = F) ","survival","recommended","4.0.5"
"tcut","closure","function","TRUE","FALSE","(x, breaks, labels, scale = 1) ","survival","recommended","4.0.5"
"tmerge","closure","function","TRUE","FALSE","(data1, data2, id, ..., tstart, tstop, options) ","survival","recommended","4.0.5"
"tobin","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"transplant","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"turbine","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"udca","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"udca1","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"udca2","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"untangle.specials","closure","function","TRUE","FALSE","(tt, special, order = 1) ","survival","recommended","4.0.5"
"uspop2","integer","array","FALSE","FALSE","NA","survival","recommended","4.0.5"
"valveSeat","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"veteran","list","data.frame","FALSE","FALSE","NA","survival","recommended","4.0.5"
"yates","closure","function","TRUE","FALSE","(fit, term, population = c(""data"", ""factorial"", ""sas""),     levels, test = c(""global"", ""trend"", ""pairwise""), predict = ""linear"",     options, nsim = 200, method = c(""direct"", ""sgtt"")) ","survival","recommended","4.0.5"
"yates_setup","closure","function","TRUE","FALSE","(fit, ...) ","survival","recommended","4.0.5"
".Tcl","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
".Tcl.args","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
".Tcl.args.objv","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
".Tcl.callback","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
".Tcl.objv","closure","function","TRUE","FALSE","(objv) ","tcltk","base","4.0.5"
".Tk.ID","closure","function","TRUE","FALSE","(win) ","tcltk","base","4.0.5"
".Tk.newwin","closure","function","TRUE","FALSE","(ID) ","tcltk","base","4.0.5"
".Tk.subwin","closure","function","TRUE","FALSE","(parent) ","tcltk","base","4.0.5"
".TkRoot","list","tkwin","TRUE","FALSE","NA","tcltk","base","4.0.5"
".TkUp","logical","logical","TRUE","FALSE","NA","tcltk","base","4.0.5"
"addTclPath","closure","function","TRUE","FALSE","(path = ""."") ","tcltk","base","4.0.5"
"as.tclObj","closure","function","TRUE","FALSE","(x, drop = FALSE) ","tcltk","base","4.0.5"
"getTkProgressBar","closure","function","TRUE","FALSE","(pb) ","tcltk","base","4.0.5"
"is.tclObj","closure","function","TRUE","FALSE","(x) ","tcltk","base","4.0.5"
"is.tkwin","closure","function","TRUE","FALSE","(x) ","tcltk","base","4.0.5"
"setTkProgressBar","closure","function","TRUE","FALSE","(pb, value, title = NULL, label = NULL) ","tcltk","base","4.0.5"
"tcl","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tclArray","closure","function","TRUE","FALSE","() ","tcltk","base","4.0.5"
"tclObj","closure","function","TRUE","FALSE","(x) ","tcltk","base","4.0.5"
"tclObj<-","closure","function","TRUE","FALSE","(x, value) ","tcltk","base","4.0.5"
"tclObj<-.tclVar","closure","function","TRUE","FALSE","(x, value) ","tcltk","base","4.0.5"
"tclRequire","closure","function","TRUE","FALSE","(package, warn = TRUE) ","tcltk","base","4.0.5"
"tclServiceMode","closure","function","TRUE","FALSE","(on = NULL) ","tcltk","base","4.0.5"
"tclVar","closure","function","TRUE","FALSE","(init = """") ","tcltk","base","4.0.5"
"tclVersion","closure","function","TRUE","FALSE","() ","tcltk","base","4.0.5"
"tclclose","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tclfile.dir","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tclfile.tail","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tclopen","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tclputs","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tclread","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tclvalue","closure","function","TRUE","FALSE","(x) ","tcltk","base","4.0.5"
"tclvalue<-","closure","function","TRUE","FALSE","(x, value) ","tcltk","base","4.0.5"
"tclvalue<-.default","closure","function","TRUE","FALSE","(x, value) ","tcltk","base","4.0.5"
"tclvalue<-.tclVar","closure","function","TRUE","FALSE","(x, value) ","tcltk","base","4.0.5"
"tclvar","list","tclvar","TRUE","FALSE","NA","tcltk","base","4.0.5"
"tkProgressBar","closure","function","TRUE","FALSE","(title = ""R progress bar"", label = """", min = 0, max = 1,     initial = 0, width = 300) ","tcltk","base","4.0.5"
"tkStartGUI","closure","function","TRUE","FALSE","() ","tcltk","base","4.0.5"
"tkXselection.clear","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkXselection.get","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkXselection.handle","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkXselection.own","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tk_choose.dir","closure","function","TRUE","FALSE","(default = """", caption = ""Select directory"") ","tcltk","base","4.0.5"
"tk_choose.files","closure","function","TRUE","FALSE","(default = """", caption = ""Select files"", multi = TRUE,     filters = NULL, index = 1) ","tcltk","base","4.0.5"
"tk_messageBox","closure","function","TRUE","FALSE","(type = c(""ok"", ""okcancel"", ""yesno"", ""yesnocancel"",     ""retrycancel"", ""abortretryignore""), message, caption = """",     default = """", ...) ","tcltk","base","4.0.5"
"tk_select.list","closure","function","TRUE","FALSE","(choices, preselect = NULL, multiple = FALSE, title = NULL) ","tcltk","base","4.0.5"
"tkactivate","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkadd","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkaddtag","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkbbox","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkbell","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkbind","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkbindtags","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkbutton","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"tkcanvas","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"tkcanvasx","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkcanvasy","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkcget","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkcheckbutton","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"tkchooseDirectory","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkclipboard.append","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkclipboard.clear","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkcompare","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkconfigure","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkcoords","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkcreate","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkcurselection","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkdchars","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkdebug","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkdelete","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkdelta","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkdeselect","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkdestroy","closure","function","TRUE","FALSE","(win) ","tcltk","base","4.0.5"
"tkdialog","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkdlineinfo","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkdtag","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkdump","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkentry","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"tkentrycget","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkentryconfigure","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkevent.add","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkevent.delete","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkevent.generate","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkevent.info","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkfind","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkflash","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkfocus","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkfont.actual","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkfont.configure","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkfont.create","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkfont.delete","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkfont.families","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkfont.measure","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkfont.metrics","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkfont.names","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkfraction","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkframe","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"tkget","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkgetOpenFile","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgetSaveFile","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgettags","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkgrab","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgrab.current","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgrab.release","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgrab.set","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgrab.status","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgrid","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgrid.bbox","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgrid.columnconfigure","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgrid.configure","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgrid.forget","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgrid.info","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgrid.location","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgrid.propagate","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgrid.remove","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgrid.rowconfigure","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgrid.size","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkgrid.slaves","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkicursor","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkidentify","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkimage.create","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkimage.delete","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkimage.height","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkimage.inuse","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkimage.names","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkimage.type","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkimage.types","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkimage.width","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkindex","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkinsert","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkinvoke","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkitembind","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkitemcget","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkitemconfigure","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkitemfocus","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkitemlower","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkitemraise","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkitemscale","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tklabel","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"tklistbox","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"tklower","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkmark.gravity","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkmark.names","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkmark.next","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkmark.previous","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkmark.set","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkmark.unset","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkmenu","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"tkmenubutton","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"tkmessage","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"tkmessageBox","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkmove","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tknearest","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkpack","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkpack.configure","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkpack.forget","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkpack.info","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkpack.propagate","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkpack.slaves","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkpager","closure","function","TRUE","FALSE","(file, header, title, delete.file) ","tcltk","base","4.0.5"
"tkplace","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkplace.configure","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkplace.forget","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkplace.info","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkplace.slaves","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkpopup","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkpost","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkpostcascade","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkpostscript","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkradiobutton","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"tkraise","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkscale","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"tkscan.dragto","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkscan.mark","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkscrollbar","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"tksearch","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tksee","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkselect","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkselection.adjust","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkselection.anchor","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkselection.clear","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkselection.from","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkselection.includes","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkselection.present","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkselection.range","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkselection.set","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkselection.to","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkset","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tksize","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tktag.add","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tktag.bind","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tktag.cget","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tktag.configure","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tktag.delete","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tktag.lower","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tktag.names","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tktag.nextrange","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tktag.prevrange","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tktag.raise","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tktag.ranges","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tktag.remove","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tktext","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"tktitle","closure","function","TRUE","FALSE","(x) ","tcltk","base","4.0.5"
"tktitle<-","closure","function","TRUE","FALSE","(x, value) ","tcltk","base","4.0.5"
"tktoggle","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tktoplevel","closure","function","TRUE","FALSE","(parent = .TkRoot, ...) ","tcltk","base","4.0.5"
"tktype","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkunpost","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkwait.variable","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwait.visibility","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwait.window","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwidget","closure","function","TRUE","FALSE","(parent, type, ...) ","tcltk","base","4.0.5"
"tkwindow.cget","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkwindow.configure","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkwindow.create","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkwindow.names","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkwinfo","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.aspect","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.client","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.colormapwindows","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.command","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.deiconify","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.focusmodel","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.frame","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.geometry","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.grid","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.group","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.iconbitmap","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.iconify","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.iconmask","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.iconname","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.iconposition","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.iconwindow","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.maxsize","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.minsize","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.overrideredirect","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.positionfrom","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.protocol","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.resizable","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.sizefrom","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.state","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.title","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.transient","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkwm.withdraw","closure","function","TRUE","FALSE","(...) ","tcltk","base","4.0.5"
"tkxview","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkxview.moveto","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkxview.scroll","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkyposition","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkyview","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkyview.moveto","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"tkyview.scroll","closure","function","TRUE","FALSE","(widget, ...) ","tcltk","base","4.0.5"
"ttkbutton","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"ttkcheckbutton","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"ttkcombobox","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"ttkentry","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"ttkframe","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"ttklabel","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"ttklabelframe","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"ttkmenubutton","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"ttknotebook","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"ttkpanedwindow","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"ttkprogressbar","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"ttkradiobutton","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"ttkscale","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"ttkscrollbar","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"ttkseparator","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"ttksizegrip","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"ttkspinbox","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
"ttktreeview","closure","function","TRUE","FALSE","(parent, ...) ","tcltk","base","4.0.5"
".print.via.format","closure","function","TRUE","FALSE","(x, ...) ","tools","base","4.0.5"
"Adobe_glyphs","list","data.frame","TRUE","FALSE","NA","tools","base","4.0.5"
"CRAN_check_details","closure","function","TRUE","FALSE","(flavors = NULL) ","tools","base","4.0.5"
"CRAN_check_issues","closure","function","TRUE","FALSE","() ","tools","base","4.0.5"
"CRAN_check_results","closure","function","TRUE","FALSE","(flavors = NULL) ","tools","base","4.0.5"
"CRAN_memtest_notes","closure","function","TRUE","FALSE","() ","tools","base","4.0.5"
"CRAN_package_db","closure","function","TRUE","FALSE","() ","tools","base","4.0.5"
"HTMLheader","closure","function","TRUE","FALSE","(title = ""R"", logo = TRUE, up = NULL, top = file.path(Rhome,     ""doc/html/index.html""), Rhome = """", css = file.path(Rhome,     ""doc/html/R.css""), headerTitle = paste(""R:"", title), outputEncoding = ""UTF-8"") ","tools","base","4.0.5"
"R_user_dir","closure","function","TRUE","FALSE","(package, which = c(""data"", ""config"", ""cache"")) ","tools","base","4.0.5"
"Rcmd","closure","function","TRUE","FALSE","(args, ...) ","tools","base","4.0.5"
"Rd2HTML","closure","function","TRUE","FALSE","(Rd, out = """", package = """", defines = .Platform$OS.type,     Links = NULL, Links2 = NULL, stages = ""render"", outputEncoding = ""UTF-8"",     dynamic = FALSE, no_links = FALSE, fragment = FALSE, stylesheet = ""R.css"",     ...) ","tools","base","4.0.5"
"Rd2ex","closure","function","TRUE","FALSE","(Rd, out = """", defines = .Platform$OS.type, stages = ""render"",     outputEncoding = ""UTF-8"", commentDontrun = TRUE, commentDonttest = FALSE,     ...) ","tools","base","4.0.5"
"Rd2latex","closure","function","TRUE","FALSE","(Rd, out = """", defines = .Platform$OS.type, stages = ""render"",     outputEncoding = ""UTF-8"", fragment = FALSE, ..., writeEncoding = TRUE) ","tools","base","4.0.5"
"Rd2txt","closure","function","TRUE","FALSE","(Rd, out = """", package = """", defines = .Platform$OS.type,     stages = ""render"", outputEncoding = """", fragment = FALSE,     options, ...) ","tools","base","4.0.5"
"Rd2txt_options","closure","function","TRUE","FALSE","(...) ","tools","base","4.0.5"
"RdTextFilter","closure","function","TRUE","FALSE","(ifile, encoding = ""unknown"", keepSpacing = TRUE, drop = character(),     keep = character(), macros = file.path(R.home(""share""), ""Rd"",         ""macros"", ""system.Rd"")) ","tools","base","4.0.5"
"Rd_db","closure","function","TRUE","FALSE","(package, dir, lib.loc = NULL, stages = ""build"") ","tools","base","4.0.5"
"Rdiff","closure","function","TRUE","FALSE","(from, to, useDiff = FALSE, forEx = FALSE, nullPointers = TRUE,     Log = FALSE) ","tools","base","4.0.5"
"Rdindex","closure","function","TRUE","FALSE","(RdFiles, outFile = """", type = NULL, width = 0.9 * getOption(""width""),     indent = NULL) ","tools","base","4.0.5"
"SIGCHLD","integer","integer","TRUE","FALSE","NA","tools","base","4.0.5"
"SIGCONT","integer","integer","TRUE","FALSE","NA","tools","base","4.0.5"
"SIGHUP","integer","integer","TRUE","FALSE","NA","tools","base","4.0.5"
"SIGINT","integer","integer","TRUE","FALSE","NA","tools","base","4.0.5"
"SIGKILL","integer","integer","TRUE","FALSE","NA","tools","base","4.0.5"
"SIGQUIT","integer","integer","TRUE","FALSE","NA","tools","base","4.0.5"
"SIGSTOP","integer","integer","TRUE","FALSE","NA","tools","base","4.0.5"
"SIGTERM","integer","integer","TRUE","FALSE","NA","tools","base","4.0.5"
"SIGTSTP","integer","integer","TRUE","FALSE","NA","tools","base","4.0.5"
"SIGUSR1","integer","integer","TRUE","FALSE","NA","tools","base","4.0.5"
"SIGUSR2","integer","integer","TRUE","FALSE","NA","tools","base","4.0.5"
"SweaveTeXFilter","closure","function","TRUE","FALSE","(ifile, encoding = ""unknown"") ","tools","base","4.0.5"
"add_datalist","closure","function","TRUE","FALSE","(pkgpath, force = FALSE, small.size = 1024^2) ","tools","base","4.0.5"
"assertCondition","closure","function","TRUE","FALSE","(expr, ..., .exprString = .deparseTrim(substitute(expr),     cutoff = 30L), verbose = FALSE) ","tools","base","4.0.5"
"assertError","closure","function","TRUE","FALSE","(expr, classes = ""error"", verbose = FALSE) ","tools","base","4.0.5"
"assertWarning","closure","function","TRUE","FALSE","(expr, classes = ""warning"", verbose = FALSE) ","tools","base","4.0.5"
"bibstyle","closure","function","TRUE","FALSE","(style, envir, ..., .init = FALSE, .default = TRUE) ","tools","base","4.0.5"
"buildVignette","closure","function","TRUE","FALSE","(file, dir = ""."", weave = TRUE, latex = TRUE, tangle = TRUE,     quiet = TRUE, clean = TRUE, keep = character(), engine = NULL,     buildPkg = NULL, encoding = getVignetteEncoding(file), ...) ","tools","base","4.0.5"
"buildVignettes","closure","function","TRUE","FALSE","(package, dir, lib.loc = NULL, quiet = TRUE, clean = TRUE,     tangle = FALSE, ser_elibs = NULL) ","tools","base","4.0.5"
"charset_to_Unicode","integer","noquote/hexmode","TRUE","FALSE","NA","tools","base","4.0.5"
"checkDocFiles","closure","function","TRUE","FALSE","(package, dir, lib.loc = NULL) ","tools","base","4.0.5"
"checkDocStyle","closure","function","TRUE","FALSE","(package, dir, lib.loc = NULL) ","tools","base","4.0.5"
"checkFF","closure","function","TRUE","FALSE","(package, dir, file, lib.loc = NULL, registration = FALSE,     check_DUP = FALSE, verbose = getOption(""verbose"")) ","tools","base","4.0.5"
"checkMD5sums","closure","function","TRUE","FALSE","(package, dir) ","tools","base","4.0.5"
"checkNEWS","closure","function","TRUE","FALSE","(file = file.path(R.home(), ""NEWS"")) ","tools","base","4.0.5"
"checkPoFile","closure","function","TRUE","FALSE","(f, strictPlural = FALSE) ","tools","base","4.0.5"
"checkPoFiles","closure","function","TRUE","FALSE","(language, dir = ""."") ","tools","base","4.0.5"
"checkRd","closure","function","TRUE","FALSE","(Rd, defines = .Platform$OS.type, stages = ""render"",     unknownOK = TRUE, listOK = TRUE, ..., def_enc = FALSE) ","tools","base","4.0.5"
"checkRdaFiles","closure","function","TRUE","FALSE","(paths) ","tools","base","4.0.5"
"checkReplaceFuns","closure","function","TRUE","FALSE","(package, dir, lib.loc = NULL) ","tools","base","4.0.5"
"checkS3methods","closure","function","TRUE","FALSE","(package, dir, lib.loc = NULL) ","tools","base","4.0.5"
"checkTnF","closure","function","TRUE","FALSE","(package, dir, file, lib.loc = NULL) ","tools","base","4.0.5"
"checkVignettes","closure","function","TRUE","FALSE","(package, dir, lib.loc = NULL, tangle = TRUE, weave = TRUE,     latex = FALSE, workdir = c(""tmp"", ""src"", ""cur""), keepfiles = FALSE) ","tools","base","4.0.5"
"check_packages_in_dir","closure","function","TRUE","FALSE","(dir, check_args = character(), check_args_db = list(),     reverse = NULL, check_env = character(), xvfb = FALSE, Ncpus = getOption(""Ncpus"",         1L), clean = TRUE, ...) ","tools","base","4.0.5"
"check_packages_in_dir_changes","closure","function","TRUE","FALSE","(dir, old, outputs = FALSE, sources = FALSE, ...) ","tools","base","4.0.5"
"check_packages_in_dir_details","closure","function","TRUE","FALSE","(dir, logs = NULL, drop_ok = TRUE, ...) ","tools","base","4.0.5"
"codoc","closure","function","TRUE","FALSE","(package, dir, lib.loc = NULL, use.values = NULL, verbose = getOption(""verbose"")) ","tools","base","4.0.5"
"codocClasses","closure","function","TRUE","FALSE","(package, lib.loc = NULL) ","tools","base","4.0.5"
"codocData","closure","function","TRUE","FALSE","(package, lib.loc = NULL) ","tools","base","4.0.5"
"compactPDF","closure","function","TRUE","FALSE","(paths, qpdf = Sys.which(Sys.getenv(""R_QPDF"", ""qpdf"")),     gs_cmd = Sys.getenv(""R_GSCMD"", """"), gs_quality = Sys.getenv(""GS_QUALITY"",         ""none""), gs_extras = character()) ","tools","base","4.0.5"
"delimMatch","closure","function","TRUE","FALSE","(x, delim = c(""","tools","base","4.0.5"
"deparseLatex","closure","function","TRUE","FALSE","(x, dropBraces = FALSE) ","tools","base","4.0.5"
"dependsOnPkgs","closure","function","TRUE","FALSE","(pkgs, dependencies = c(""Depends"", ""Imports"", ""LinkingTo""),     recursive = TRUE, lib.loc = NULL, installed = utils::installed.packages(lib.loc,         fields = ""Enhances"")) ","tools","base","4.0.5"
"encoded_text_to_latex","closure","function","TRUE","FALSE","(x, encoding = c(""latin1"", ""latin2"", ""latin9"", ""UTF-8"",     ""utf8"")) ","tools","base","4.0.5"
"file_ext","closure","function","TRUE","FALSE","(x) ","tools","base","4.0.5"
"file_path_as_absolute","closure","function","TRUE","FALSE","(x) ","tools","base","4.0.5"
"file_path_sans_ext","closure","function","TRUE","FALSE","(x, compression = FALSE) ","tools","base","4.0.5"
"findHTMLlinks","closure","function","TRUE","FALSE","(pkgDir = """", lib.loc = NULL, level = 0:2) ","tools","base","4.0.5"
"find_gs_cmd","closure","function","TRUE","FALSE","(gs_cmd = """") ","tools","base","4.0.5"
"getBibstyle","closure","function","TRUE","FALSE","(all = FALSE) ","tools","base","4.0.5"
"getDepList","closure","function","TRUE","FALSE","(depMtrx, instPkgs, recursive = TRUE, local = TRUE,     reduce = TRUE, lib.loc = NULL) ","tools","base","4.0.5"
"getVignetteInfo","closure","function","TRUE","FALSE","(package = NULL, lib.loc = NULL, all = TRUE) ","tools","base","4.0.5"
"installFoundDepends","closure","function","TRUE","FALSE","(depPkgList, ...) ","tools","base","4.0.5"
"langElts","character","character","TRUE","FALSE","NA","tools","base","4.0.5"
"latexToUtf8","closure","function","TRUE","FALSE","(x) ","tools","base","4.0.5"
"list_files_with_exts","closure","function","TRUE","FALSE","(dir, exts, all.files = FALSE, full.names = TRUE) ","tools","base","4.0.5"
"list_files_with_type","closure","function","TRUE","FALSE","(dir, type, all.files = FALSE, full.names = TRUE, OS_subdirs = .OStype()) ","tools","base","4.0.5"
"loadPkgRdMacros","closure","function","TRUE","FALSE","(pkgdir, macros = NULL) ","tools","base","4.0.5"
"loadRdMacros","closure","function","TRUE","FALSE","(file, macros = TRUE) ","tools","base","4.0.5"
"make_translations_pkg","closure","function","TRUE","FALSE","(srcdir, outDir = ""."", append = ""-1"") ","tools","base","4.0.5"
"makevars_site","closure","function","TRUE","FALSE","() ","tools","base","4.0.5"
"makevars_user","closure","function","TRUE","FALSE","() ","tools","base","4.0.5"
"md5sum","closure","function","TRUE","FALSE","(files) ","tools","base","4.0.5"
"nonS3methods","closure","function","TRUE","FALSE","(package) ","tools","base","4.0.5"
"package.dependencies","closure","function","TRUE","FALSE","(x, check = FALSE, depLevel = c(""Depends"", ""Imports"",     ""Suggests"")) ","tools","base","4.0.5"
"package_dependencies","closure","function","TRUE","FALSE","(packages = NULL, db = NULL, which = c(""Depends"", ""Imports"",     ""LinkingTo""), recursive = FALSE, reverse = FALSE, verbose = getOption(""verbose"")) ","tools","base","4.0.5"
"package_native_routine_registration_skeleton","closure","function","TRUE","FALSE","(dir, con = stdout(), align = TRUE, character_only = TRUE,     include_declarations = TRUE) ","tools","base","4.0.5"
"parseLatex","closure","function","TRUE","FALSE","(text, filename = deparse1(substitute(text)), verbose = FALSE,     verbatim = c(""verbatim"", ""verbatim*"", ""Sinput"", ""Soutput"")) ","tools","base","4.0.5"
"parse_Rd","closure","function","TRUE","FALSE","(file, srcfile = NULL, encoding = ""unknown"", verbose = FALSE,     fragment = FALSE, warningCalls = TRUE, macros = file.path(R.home(""share""),         ""Rd"", ""macros"", ""system.Rd""), permissive = FALSE) ","tools","base","4.0.5"
"pkgDepends","closure","function","TRUE","FALSE","(pkg, recursive = TRUE, local = TRUE, reduce = TRUE,     lib.loc = NULL) ","tools","base","4.0.5"
"pkgVignettes","closure","function","TRUE","FALSE","(package, dir, subdirs = NULL, lib.loc = NULL, output = FALSE,     source = FALSE, check = FALSE) ","tools","base","4.0.5"
"pskill","closure","function","TRUE","FALSE","(pid, signal = SIGTERM) ","tools","base","4.0.5"
"psnice","closure","function","TRUE","FALSE","(pid = Sys.getpid(), value = NA_integer_) ","tools","base","4.0.5"
"read.00Index","closure","function","TRUE","FALSE","(file) ","tools","base","4.0.5"
"readNEWS","closure","function","TRUE","FALSE","(file = file.path(R.home(), ""NEWS""), trace = FALSE,     chop = c(""first"", ""1"", ""par1"", ""keepAll"")) ","tools","base","4.0.5"
"resaveRdaFiles","closure","function","TRUE","FALSE","(paths, compress = c(""auto"", ""gzip"", ""bzip2"", ""xz""),     compression_level, version = NULL) ","tools","base","4.0.5"
"showNonASCII","closure","function","TRUE","FALSE","(x) ","tools","base","4.0.5"
"showNonASCIIfile","closure","function","TRUE","FALSE","(file) ","tools","base","4.0.5"
"startDynamicHelp","closure","function","TRUE","FALSE","(start = TRUE) ","tools","base","4.0.5"
"summarize_CRAN_check_status","closure","function","TRUE","FALSE","(packages, results = NULL, details = NULL, issues = NULL) ","tools","base","4.0.5"
"summarize_check_packages_in_dir_depends","closure","function","TRUE","FALSE","(dir, all = FALSE, which = c(""Depends"", ""Imports"", ""LinkingTo"")) ","tools","base","4.0.5"
"summarize_check_packages_in_dir_results","closure","function","TRUE","FALSE","(dir, all = TRUE, full = FALSE, ...) ","tools","base","4.0.5"
"summarize_check_packages_in_dir_timings","closure","function","TRUE","FALSE","(dir, all = FALSE, full = FALSE) ","tools","base","4.0.5"
"testInstalledBasic","closure","function","TRUE","FALSE","(scope = c(""basic"", ""devel"", ""both"", ""internet"")) ","tools","base","4.0.5"
"testInstalledPackage","closure","function","TRUE","FALSE","(pkg, lib.loc = NULL, outDir = ""."", types = c(""examples"",     ""tests"", ""vignettes""), srcdir = NULL, Ropts = """", ...) ","tools","base","4.0.5"
"testInstalledPackages","closure","function","TRUE","FALSE","(outDir = ""."", errorsAreFatal = TRUE, scope = c(""both"",     ""base"", ""recommended""), types = c(""examples"", ""tests"", ""vignettes""),     srcdir = NULL, Ropts = """", ...) ","tools","base","4.0.5"
"texi2dvi","closure","function","TRUE","FALSE","(file, pdf = FALSE, clean = FALSE, quiet = TRUE, texi2dvi = getOption(""texi2dvi""),     texinputs = NULL, index = TRUE) ","tools","base","4.0.5"
"texi2pdf","closure","function","TRUE","FALSE","(file, clean = FALSE, quiet = TRUE, texi2dvi = getOption(""texi2dvi""),     texinputs = NULL, index = TRUE) ","tools","base","4.0.5"
"toHTML","closure","function","TRUE","FALSE","(x, ...) ","tools","base","4.0.5"
"toRd","closure","function","TRUE","FALSE","(obj, ...) ","tools","base","4.0.5"
"toTitleCase","closure","function","TRUE","FALSE","(text) ","tools","base","4.0.5"
"undoc","closure","function","TRUE","FALSE","(package, dir, lib.loc = NULL) ","tools","base","4.0.5"
"update_PACKAGES","closure","function","TRUE","FALSE","(dir = ""."", fields = NULL, type = c(""source"", ""mac.binary"",     ""win.binary""), verbose.level = as.integer(dryrun), latestOnly = TRUE,     addFiles = FALSE, rds_compress = ""xz"", strict = TRUE, dryrun = FALSE) ","tools","base","4.0.5"
"update_pkg_po","closure","function","TRUE","FALSE","(pkgdir, pkg = NULL, version = NULL, copyright, bugs) ","tools","base","4.0.5"
"vignetteDepends","closure","function","TRUE","FALSE","(vignette, recursive = TRUE, reduce = TRUE, local = TRUE,     lib.loc = NULL) ","tools","base","4.0.5"
"vignetteEngine","closure","function","TRUE","FALSE","(name, weave, tangle, pattern = NULL, package = NULL,     aspell = list()) ","tools","base","4.0.5"
"vignetteInfo","closure","function","TRUE","FALSE","(file) ","tools","base","4.0.5"
"write_PACKAGES","closure","function","TRUE","FALSE","(dir = ""."", fields = NULL, type = c(""source"", ""mac.binary"",     ""win.binary""), verbose = FALSE, unpacked = FALSE, subdirs = FALSE,     latestOnly = TRUE, addFiles = FALSE, rds_compress = ""xz"") ","tools","base","4.0.5"
"xgettext","closure","function","TRUE","FALSE","(dir, verbose = FALSE, asCall = TRUE) ","tools","base","4.0.5"
"xgettext2pot","closure","function","TRUE","FALSE","(dir, potFile, name = ""R"", version, bugs) ","tools","base","4.0.5"
"xngettext","closure","function","TRUE","FALSE","(dir, verbose = FALSE) ","tools","base","4.0.5"
".DollarNames","closure","function","TRUE","FALSE","(x, pattern) ","utils","base","4.0.5"
".RtangleCodeLabel","closure","function","TRUE","FALSE","(chunk) ","utils","base","4.0.5"
".S3methods","closure","function","TRUE","FALSE","(generic.function, class, envir = parent.frame()) ","utils","base","4.0.5"
".romans","integer","integer","TRUE","FALSE","NA","utils","base","4.0.5"
"?","closure","function","TRUE","FALSE","(e1, e2) ","utils","base","4.0.5"
"CRAN.packages","closure","function","TRUE","FALSE","(CRAN = getOption(""repos""), method, contriburl = contrib.url(CRAN)) ","utils","base","4.0.5"
"RShowDoc","closure","function","TRUE","FALSE","(what, type = c(""pdf"", ""html"", ""txt""), package) ","utils","base","4.0.5"
"RSiteSearch","closure","function","TRUE","FALSE","(string, restrict = c(""functions"", ""vignettes"", ""views""),     format = c(""normal"", ""short""), sortby = c(""score"", ""date:late"",         ""date:early"", ""subject"", ""subject:descending"", ""from"",         ""from:descending"", ""size"", ""size:descending""), matchesPerPage = 20) ","utils","base","4.0.5"
"Rprof","closure","function","TRUE","FALSE","(filename = ""Rprof.out"", append = FALSE, interval = 0.02,     memory.profiling = FALSE, gc.profiling = FALSE, line.profiling = FALSE,     filter.callframes = FALSE, numfiles = 100L, bufsize = 10000L) ","utils","base","4.0.5"
"Rprofmem","closure","function","TRUE","FALSE","(filename = ""Rprofmem.out"", append = FALSE, threshold = 0) ","utils","base","4.0.5"
"Rtangle","closure","function","TRUE","FALSE","() ","utils","base","4.0.5"
"RtangleSetup","closure","function","TRUE","FALSE","(file, syntax, output = NULL, annotate = TRUE, split = FALSE,     quiet = FALSE, drop.evalFALSE = FALSE, ...) ","utils","base","4.0.5"
"RtangleWritedoc","closure","function","TRUE","FALSE","(object, chunk) ","utils","base","4.0.5"
"RweaveChunkPrefix","closure","function","TRUE","FALSE","(options) ","utils","base","4.0.5"
"RweaveEvalWithOpt","closure","function","TRUE","FALSE","(expr, options) ","utils","base","4.0.5"
"RweaveLatex","closure","function","TRUE","FALSE","() ","utils","base","4.0.5"
"RweaveLatexFinish","closure","function","TRUE","FALSE","(object, error = FALSE) ","utils","base","4.0.5"
"RweaveLatexOptions","closure","function","TRUE","FALSE","(options) ","utils","base","4.0.5"
"RweaveLatexSetup","closure","function","TRUE","FALSE","(file, syntax, output = NULL, quiet = FALSE, debug = FALSE,     stylepath, ...) ","utils","base","4.0.5"
"RweaveLatexWritedoc","closure","function","TRUE","FALSE","(object, chunk) ","utils","base","4.0.5"
"RweaveTryStop","closure","function","TRUE","FALSE","(err, options) ","utils","base","4.0.5"
"Stangle","closure","function","TRUE","FALSE","(file, driver = Rtangle(), syntax = getOption(""SweaveSyntax""),     encoding = """", ...) ","utils","base","4.0.5"
"Sweave","closure","function","TRUE","FALSE","(file, driver = RweaveLatex(), syntax = getOption(""SweaveSyntax""),     encoding = """", ...) ","utils","base","4.0.5"
"SweaveHooks","closure","function","TRUE","FALSE","(options, run = FALSE, envir = .GlobalEnv) ","utils","base","4.0.5"
"SweaveSyntConv","closure","function","TRUE","FALSE","(file, syntax, output = NULL) ","utils","base","4.0.5"
"SweaveSyntaxLatex","list","SweaveSyntax","TRUE","FALSE","NA","utils","base","4.0.5"
"SweaveSyntaxNoweb","list","SweaveSyntax","TRUE","FALSE","NA","utils","base","4.0.5"
"URLdecode","closure","function","TRUE","FALSE","(URL) ","utils","base","4.0.5"
"URLencode","closure","function","TRUE","FALSE","(URL, reserved = FALSE, repeated = FALSE) ","utils","base","4.0.5"
"View","closure","function","TRUE","FALSE","(x, title) ","utils","base","4.0.5"
"adist","closure","function","TRUE","FALSE","(x, y = NULL, costs = NULL, counts = FALSE, fixed = TRUE,     partial = !fixed, ignore.case = FALSE, useBytes = FALSE) ","utils","base","4.0.5"
"alarm","closure","function","TRUE","FALSE","() ","utils","base","4.0.5"
"apropos","closure","function","TRUE","FALSE","(what, where = FALSE, ignore.case = TRUE, mode = ""any"") ","utils","base","4.0.5"
"aregexec","closure","function","TRUE","FALSE","(pattern, text, max.distance = 0.1, costs = NULL, ignore.case = FALSE,     fixed = FALSE, useBytes = FALSE) ","utils","base","4.0.5"
"argsAnywhere","closure","function","TRUE","FALSE","(x) ","utils","base","4.0.5"
"as.person","closure","function","TRUE","FALSE","(x) ","utils","base","4.0.5"
"as.personList","closure","function","TRUE","FALSE","(x) ","utils","base","4.0.5"
"as.relistable","closure","function","TRUE","FALSE","(x) ","utils","base","4.0.5"
"as.roman","closure","function","TRUE","FALSE","(x) ","utils","base","4.0.5"
"asDateBuilt","closure","function","TRUE","FALSE","(built) ","utils","base","4.0.5"
"askYesNo","closure","function","TRUE","FALSE","(msg, default = TRUE, prompts = getOption(""askYesNo"",     gettext(c(""Yes"", ""No"", ""Cancel""))), ...) ","utils","base","4.0.5"
"aspell","closure","function","TRUE","FALSE","(files, filter, control = list(), encoding = ""unknown"",     program = NULL, dictionaries = character()) ","utils","base","4.0.5"
"aspell_package_C_files","closure","function","TRUE","FALSE","(dir, ignore = character(), control = list(), program = NULL,     dictionaries = character()) ","utils","base","4.0.5"
"aspell_package_R_files","closure","function","TRUE","FALSE","(dir, ignore = character(), control = list(), program = NULL,     dictionaries = character()) ","utils","base","4.0.5"
"aspell_package_Rd_files","closure","function","TRUE","FALSE","(dir, drop = c(""\\author"", ""\\references""), control = list(),     program = NULL, dictionaries = character()) ","utils","base","4.0.5"
"aspell_package_vignettes","closure","function","TRUE","FALSE","(dir, control = list(), program = NULL, dictionaries = character()) ","utils","base","4.0.5"
"aspell_write_personal_dictionary_file","closure","function","TRUE","FALSE","(x, out, language = ""en"", program = NULL) ","utils","base","4.0.5"
"assignInMyNamespace","closure","function","TRUE","FALSE","(x, value) ","utils","base","4.0.5"
"assignInNamespace","closure","function","TRUE","FALSE","(x, value, ns, pos = -1, envir = as.environment(pos)) ","utils","base","4.0.5"
"available.packages","closure","function","TRUE","FALSE","(contriburl = contrib.url(repos, type), method, fields = NULL,     type = getOption(""pkgType""), filters = NULL, repos = getOption(""repos""),     ignore_repo_cache = FALSE, max_repo_cache_age, quiet = TRUE,     ...) ","utils","base","4.0.5"
"bibentry","closure","function","TRUE","FALSE","(bibtype, textVersion = NULL, header = NULL, footer = NULL,     key = NULL, ..., other = list(), mheader = NULL, mfooter = NULL) ","utils","base","4.0.5"
"browseEnv","closure","function","TRUE","FALSE","(envir = .GlobalEnv, pattern, excludepatt = ""^last\\.warning"",     html = .Platform$GUI != ""AQUA"", expanded = TRUE, properties = NULL,     main = NULL, debugMe = FALSE) ","utils","base","4.0.5"
"browseURL","closure","function","TRUE","FALSE","(url, browser = getOption(""browser""), encodeIfNeeded = FALSE) ","utils","base","4.0.5"
"browseVignettes","closure","function","TRUE","FALSE","(package = NULL, lib.loc = NULL, all = TRUE) ","utils","base","4.0.5"
"bug.report","closure","function","TRUE","FALSE","(subject = """", address, file = ""R.bug.report"", package = NULL,     lib.loc = NULL, ...) ","utils","base","4.0.5"
"capture.output","closure","function","TRUE","FALSE","(..., file = NULL, append = FALSE, type = c(""output"",     ""message""), split = FALSE) ","utils","base","4.0.5"
"changedFiles","closure","function","TRUE","FALSE","(before, after, path = before$path, timestamp = before$timestamp,     check.file.info = c(""size"", ""isdir"", ""mode"", ""mtime""), md5sum = before$md5sum,     digest = before$digest, full.names = before$full.names, ...) ","utils","base","4.0.5"
"checkCRAN","closure","function","TRUE","FALSE","(method) ","utils","base","4.0.5"
"chooseBioCmirror","closure","function","TRUE","FALSE","(graphics = getOption(""menu.graphics""), ind = NULL,     local.only = FALSE) ","utils","base","4.0.5"
"chooseCRANmirror","closure","function","TRUE","FALSE","(graphics = getOption(""menu.graphics""), ind = NULL,     local.only = FALSE) ","utils","base","4.0.5"
"citEntry","closure","function","TRUE","FALSE","(entry, textVersion, header = NULL, footer = NULL, ...) ","utils","base","4.0.5"
"citFooter","closure","function","TRUE","FALSE","(...) ","utils","base","4.0.5"
"citHeader","closure","function","TRUE","FALSE","(...) ","utils","base","4.0.5"
"citation","closure","function","TRUE","FALSE","(package = ""base"", lib.loc = NULL, auto = NULL) ","utils","base","4.0.5"
"cite","closure","function","TRUE","FALSE","(keys, bib, ...) ","utils","base","4.0.5"
"citeNatbib","closure","function","TRUE","FALSE","(keys, bib, textual = FALSE, before = NULL, after = NULL,     mode = c(""authoryear"", ""numbers"", ""super""), abbreviate = TRUE,     longnamesfirst = TRUE, bibpunct = c(""("", "")"", "";"", ""a"", """",         "",""), previous) ","utils","base","4.0.5"
"close.socket","closure","function","TRUE","FALSE","(socket, ...) ","utils","base","4.0.5"
"combn","closure","function","TRUE","FALSE","(x, m, FUN = NULL, simplify = TRUE, ...) ","utils","base","4.0.5"
"compareVersion","closure","function","TRUE","FALSE","(a, b) ","utils","base","4.0.5"
"contrib.url","closure","function","TRUE","FALSE","(repos, type = getOption(""pkgType"")) ","utils","base","4.0.5"
"count.fields","closure","function","TRUE","FALSE","(file, sep = """", quote = ""\""'"", skip = 0, blank.lines.skip = TRUE,     comment.char = ""#"") ","utils","base","4.0.5"
"create.post","closure","function","TRUE","FALSE","(instructions = character(), description = ""post"", subject = """",     method = getOption(""mailer""), address = ""the relevant mailing list"",     ccaddress = getOption(""ccaddress"", """"), filename = ""R.post"",     info = character()) ","utils","base","4.0.5"
"data","closure","function","TRUE","FALSE","(..., list = character(), package = NULL, lib.loc = NULL,     verbose = getOption(""verbose""), envir = .GlobalEnv, overwrite = TRUE) ","utils","base","4.0.5"
"data.entry","closure","function","TRUE","FALSE","(..., Modes = NULL, Names = NULL) ","utils","base","4.0.5"
"dataentry","closure","function","TRUE","FALSE","(data, modes) ","utils","base","4.0.5"
"de","closure","function","TRUE","FALSE","(..., Modes = list(), Names = NULL) ","utils","base","4.0.5"
"de.ncols","closure","function","TRUE","FALSE","(inlist) ","utils","base","4.0.5"
"de.restore","closure","function","TRUE","FALSE","(inlist, ncols, coltypes, argnames, args) ","utils","base","4.0.5"
"de.setup","closure","function","TRUE","FALSE","(ilist, list.names, incols) ","utils","base","4.0.5"
"debugcall","closure","function","TRUE","FALSE","(call, once = FALSE) ","utils","base","4.0.5"
"debugger","closure","function","TRUE","FALSE","(dump = last.dump) ","utils","base","4.0.5"
"demo","closure","function","TRUE","FALSE","(topic, package = NULL, lib.loc = NULL, character.only = FALSE,     verbose = getOption(""verbose""), echo = TRUE, ask = getOption(""demo.ask""),     encoding = getOption(""encoding"")) ","utils","base","4.0.5"
"download.file","closure","function","TRUE","FALSE","(url, destfile, method, quiet = FALSE, mode = ""w"", cacheOK = TRUE,     extra = getOption(""download.file.extra""), headers = NULL,     ...) ","utils","base","4.0.5"
"download.packages","closure","function","TRUE","FALSE","(pkgs, destdir, available = NULL, repos = getOption(""repos""),     contriburl = contrib.url(repos, type), method, type = getOption(""pkgType""),     ...) ","utils","base","4.0.5"
"dump.frames","closure","function","TRUE","FALSE","(dumpto = ""last.dump"", to.file = FALSE, include.GlobalEnv = FALSE) ","utils","base","4.0.5"
"edit","closure","function","TRUE","FALSE","(name, ...) ","utils","base","4.0.5"
"emacs","closure","function","TRUE","FALSE","(name = NULL, file = """") ","utils","base","4.0.5"
"example","closure","function","TRUE","FALSE","(topic, package = NULL, lib.loc = NULL, character.only = FALSE,     give.lines = FALSE, local = FALSE, echo = TRUE, verbose = getOption(""verbose""),     setRNG = FALSE, ask = getOption(""example.ask""), prompt.prefix = abbreviate(topic,         6), run.dontrun = FALSE, run.donttest = interactive()) ","utils","base","4.0.5"
"file.edit","closure","function","TRUE","FALSE","(..., title = file, editor = getOption(""editor""), fileEncoding = """") ","utils","base","4.0.5"
"fileSnapshot","closure","function","TRUE","FALSE","(path = ""."", file.info = TRUE, timestamp = NULL, md5sum = FALSE,     digest = NULL, full.names = length(path) > 1, ...) ","utils","base","4.0.5"
"file_test","closure","function","TRUE","FALSE","(op, x, y) ","utils","base","4.0.5"
"find","closure","function","TRUE","FALSE","(what, mode = ""any"", numeric = FALSE, simple.words = TRUE) ","utils","base","4.0.5"
"findLineNum","closure","function","TRUE","FALSE","(srcfile, line, nameonly = TRUE, envir = parent.frame(),     lastenv) ","utils","base","4.0.5"
"fix","closure","function","TRUE","FALSE","(x, ...) ","utils","base","4.0.5"
"fixInNamespace","closure","function","TRUE","FALSE","(x, ns, pos = -1, envir = as.environment(pos), ...) ","utils","base","4.0.5"
"flush.console","closure","function","TRUE","FALSE","() ","utils","base","4.0.5"
"formatOL","closure","function","TRUE","FALSE","(x, type = ""arabic"", offset = 0, start = 1, width = 0.9 *     getOption(""width"")) ","utils","base","4.0.5"
"formatUL","closure","function","TRUE","FALSE","(x, label = ""*"", offset = 0, width = 0.9 * getOption(""width"")) ","utils","base","4.0.5"
"getAnywhere","closure","function","TRUE","FALSE","(x) ","utils","base","4.0.5"
"getCRANmirrors","closure","function","TRUE","FALSE","(all = FALSE, local.only = FALSE) ","utils","base","4.0.5"
"getFromNamespace","closure","function","TRUE","FALSE","(x, ns, pos = -1, envir = as.environment(pos)) ","utils","base","4.0.5"
"getParseData","closure","function","TRUE","FALSE","(x, includeText = NA) ","utils","base","4.0.5"
"getParseText","closure","function","TRUE","FALSE","(parseData, id) ","utils","base","4.0.5"
"getS3method","closure","function","TRUE","FALSE","(f, class, optional = FALSE, envir = parent.frame()) ","utils","base","4.0.5"
"getSrcDirectory","closure","function","TRUE","FALSE","(x, unique = TRUE) ","utils","base","4.0.5"
"getSrcFilename","closure","function","TRUE","FALSE","(x, full.names = FALSE, unique = TRUE) ","utils","base","4.0.5"
"getSrcLocation","closure","function","TRUE","FALSE","(x, which = c(""line"", ""column"", ""byte"", ""parse""), first = TRUE) ","utils","base","4.0.5"
"getSrcref","closure","function","TRUE","FALSE","(x) ","utils","base","4.0.5"
"getTxtProgressBar","closure","function","TRUE","FALSE","(pb) ","utils","base","4.0.5"
"glob2rx","closure","function","TRUE","FALSE","(pattern, trim.head = FALSE, trim.tail = TRUE) ","utils","base","4.0.5"
"globalVariables","closure","function","TRUE","FALSE","(names, package, add = TRUE) ","utils","base","4.0.5"
"hasName","closure","function","TRUE","FALSE","(x, name) ","utils","base","4.0.5"
"head","closure","function","TRUE","TRUE","(x, ...) ","utils","base","4.0.5"
"head.matrix","closure","function","TRUE","FALSE","(x, n = 6L, ...) ","utils","base","4.0.5"
"help","closure","function","TRUE","FALSE","(topic, package = NULL, lib.loc = NULL, verbose = getOption(""verbose""),     try.all.packages = getOption(""help.try.all.packages""), help_type = getOption(""help_type"")) ","utils","base","4.0.5"
"help.request","closure","function","TRUE","FALSE","(subject = """", address = ""r-help@R-project.org"", file = ""R.help.request"",     ...) ","utils","base","4.0.5"
"help.search","closure","function","TRUE","FALSE","(pattern, fields = c(""alias"", ""concept"", ""title""), apropos,     keyword, whatis, ignore.case = TRUE, package = NULL, lib.loc = NULL,     help.db = getOption(""help.db""), verbose = getOption(""verbose""),     rebuild = FALSE, agrep = NULL, use_UTF8 = FALSE, types = getOption(""help.search.types"")) ","utils","base","4.0.5"
"help.start","closure","function","TRUE","FALSE","(update = FALSE, gui = ""irrelevant"", browser = getOption(""browser""),     remote = NULL) ","utils","base","4.0.5"
"history","closure","function","TRUE","FALSE","(max.show = 25, reverse = FALSE, pattern, ...) ","utils","base","4.0.5"
"hsearch_db","closure","function","TRUE","FALSE","(package = NULL, lib.loc = NULL, types = getOption(""help.search.types""),     verbose = getOption(""verbose""), rebuild = FALSE, use_UTF8 = FALSE) ","utils","base","4.0.5"
"hsearch_db_concepts","closure","function","TRUE","FALSE","(db = hsearch_db()) ","utils","base","4.0.5"
"hsearch_db_keywords","closure","function","TRUE","FALSE","(db = hsearch_db()) ","utils","base","4.0.5"
"install.packages","closure","function","TRUE","FALSE","(pkgs, lib, repos = getOption(""repos""), contriburl = contrib.url(repos,     type), method, available = NULL, destdir = NULL, dependencies = NA,     type = getOption(""pkgType""), configure.args = getOption(""configure.args""),     configure.vars = getOption(""configure.vars""), clean = FALSE,     Ncpus = getOption(""Ncpus"", 1L), verbose = getOption(""verbose""),     libs_only = FALSE, INSTALL_opts, quiet = FALSE, keep_outputs = FALSE,     ...) ","utils","base","4.0.5"
"installed.packages","closure","function","TRUE","FALSE","(lib.loc = NULL, priority = NULL, noCache = FALSE, fields = NULL,     subarch = .Platform$r_arch, ...) ","utils","base","4.0.5"
"is.relistable","closure","function","TRUE","FALSE","(x) ","utils","base","4.0.5"
"isS3method","closure","function","TRUE","FALSE","(method, f, class, envir = parent.frame()) ","utils","base","4.0.5"
"isS3stdGeneric","closure","function","TRUE","FALSE","(f) ","utils","base","4.0.5"
"limitedLabels","closure","function","TRUE","FALSE","(value, maxwidth = getOption(""width"") - 5L) ","utils","base","4.0.5"
"loadhistory","closure","function","TRUE","FALSE","(file = "".Rhistory"") ","utils","base","4.0.5"
"localeToCharset","closure","function","TRUE","FALSE","(locale = Sys.getlocale(""LC_CTYPE"")) ","utils","base","4.0.5"
"ls.str","closure","function","TRUE","FALSE","(pos = -1, name, envir, all.names = FALSE, pattern,     mode = ""any"") ","utils","base","4.0.5"
"lsf.str","closure","function","TRUE","FALSE","(pos = -1, envir, ...) ","utils","base","4.0.5"
"maintainer","closure","function","TRUE","FALSE","(pkg) ","utils","base","4.0.5"
"make.packages.html","closure","function","TRUE","FALSE","(lib.loc = .libPaths(), temp = FALSE, verbose = TRUE,     docdir = R.home(""doc"")) ","utils","base","4.0.5"
"make.socket","closure","function","TRUE","FALSE","(host = ""localhost"", port, fail = TRUE, server = FALSE) ","utils","base","4.0.5"
"makeRweaveLatexCodeRunner","closure","function","TRUE","FALSE","(evalFunc = RweaveEvalWithOpt) ","utils","base","4.0.5"
"memory.limit","closure","function","TRUE","FALSE","(size = NA) ","utils","base","4.0.5"
"memory.size","closure","function","TRUE","FALSE","(max = FALSE) ","utils","base","4.0.5"
"menu","closure","function","TRUE","FALSE","(choices, graphics = FALSE, title = NULL) ","utils","base","4.0.5"
"methods","closure","function","TRUE","FALSE","(generic.function, class) ","utils","base","4.0.5"
"mirror2html","closure","function","TRUE","FALSE","(mirrors = NULL, file = ""mirrors.html"", head = ""mirrors-head.html"",     foot = ""mirrors-foot.html"") ","utils","base","4.0.5"
"modifyList","closure","function","TRUE","FALSE","(x, val, keep.null = FALSE) ","utils","base","4.0.5"
"new.packages","closure","function","TRUE","FALSE","(lib.loc = NULL, repos = getOption(""repos""), contriburl = contrib.url(repos,     type), instPkgs = installed.packages(lib.loc = lib.loc, ...),     method, available = NULL, ask = FALSE, ..., type = getOption(""pkgType"")) ","utils","base","4.0.5"
"news","closure","function","TRUE","FALSE","(query, package = ""R"", lib.loc = NULL, format = NULL,     reader = NULL, db = NULL) ","utils","base","4.0.5"
"nsl","closure","function","TRUE","FALSE","(hostname) ","utils","base","4.0.5"
"object.size","closure","function","TRUE","FALSE","(x) ","utils","base","4.0.5"
"old.packages","closure","function","TRUE","FALSE","(lib.loc = NULL, repos = getOption(""repos""), contriburl = contrib.url(repos,     type), instPkgs = installed.packages(lib.loc = lib.loc, ...),     method, available = NULL, checkBuilt = FALSE, ..., type = getOption(""pkgType"")) ","utils","base","4.0.5"
"osVersion","character","character","TRUE","FALSE","NA","utils","base","4.0.5"
"package.skeleton","closure","function","TRUE","FALSE","(name = ""anRpackage"", list = character(), environment = .GlobalEnv,     path = ""."", force = FALSE, code_files = character(), encoding = ""unknown"") ","utils","base","4.0.5"
"packageDate","closure","function","TRUE","FALSE","(pkg, lib.loc = NULL, date.fields = c(""Date"", ""Packaged"",     ""Date/Publication"", ""Built""), tryFormats = c(""%Y-%m-%d"",     ""%Y/%m/%d"", ""%D"", ""%m/%d/%y""), desc = packageDescription(pkg,     lib.loc = lib.loc, fields = date.fields)) ","utils","base","4.0.5"
"packageDescription","closure","function","TRUE","FALSE","(pkg, lib.loc = NULL, fields = NULL, drop = TRUE, encoding = """") ","utils","base","4.0.5"
"packageName","closure","function","TRUE","FALSE","(env = parent.frame()) ","utils","base","4.0.5"
"packageStatus","closure","function","TRUE","FALSE","(lib.loc = NULL, repositories = NULL, method, type = getOption(""pkgType""),     ...) ","utils","base","4.0.5"
"packageVersion","closure","function","TRUE","FALSE","(pkg, lib.loc = NULL) ","utils","base","4.0.5"
"page","closure","function","TRUE","FALSE","(x, method = c(""dput"", ""print""), ...) ","utils","base","4.0.5"
"person","closure","function","TRUE","FALSE","(given = NULL, family = NULL, middle = NULL, email = NULL,     role = NULL, comment = NULL, first = NULL, last = NULL) ","utils","base","4.0.5"
"personList","closure","function","TRUE","FALSE","(...) ","utils","base","4.0.5"
"pico","closure","function","TRUE","FALSE","(name = NULL, file = """") ","utils","base","4.0.5"
"process.events","closure","function","TRUE","FALSE","() ","utils","base","4.0.5"
"prompt","closure","function","TRUE","FALSE","(object, filename = NULL, name = NULL, ...) ","utils","base","4.0.5"
"promptData","closure","function","TRUE","FALSE","(object, filename = NULL, name = NULL) ","utils","base","4.0.5"
"promptImport","closure","function","TRUE","FALSE","(object, filename = NULL, name = NULL, importedFrom = NULL,     importPage = name, ...) ","utils","base","4.0.5"
"promptPackage","closure","function","TRUE","FALSE","(package, lib.loc = NULL, filename = NULL, name = NULL,     final = FALSE) ","utils","base","4.0.5"
"rc.getOption","closure","function","TRUE","FALSE","(name) ","utils","base","4.0.5"
"rc.options","closure","function","TRUE","FALSE","(...) ","utils","base","4.0.5"
"rc.settings","closure","function","TRUE","FALSE","(ops, ns, args, dots, func, ipck, S3, data, help, argdb,     fuzzy, quotes, files) ","utils","base","4.0.5"
"rc.status","closure","function","TRUE","FALSE","() ","utils","base","4.0.5"
"read.DIF","closure","function","TRUE","FALSE","(file, header = FALSE, dec = ""."", numerals = c(""allow.loss"",     ""warn.loss"", ""no.loss""), row.names, col.names, as.is = !stringsAsFactors,     na.strings = ""NA"", colClasses = NA, nrows = -1, skip = 0,     check.names = TRUE, blank.lines.skip = TRUE, stringsAsFactors = default.stringsAsFactors(),     transpose = FALSE, fileEncoding = """") ","utils","base","4.0.5"
"read.csv","closure","function","TRUE","FALSE","(file, header = TRUE, sep = "","", quote = ""\"""", dec = ""."",     fill = TRUE, comment.char = """", ...) ","utils","base","4.0.5"
"read.csv2","closure","function","TRUE","FALSE","(file, header = TRUE, sep = "";"", quote = ""\"""", dec = "","",     fill = TRUE, comment.char = """", ...) ","utils","base","4.0.5"
"read.delim","closure","function","TRUE","FALSE","(file, header = TRUE, sep = ""\t"", quote = ""\"""", dec = ""."",     fill = TRUE, comment.char = """", ...) ","utils","base","4.0.5"
"read.delim2","closure","function","TRUE","FALSE","(file, header = TRUE, sep = ""\t"", quote = ""\"""", dec = "","",     fill = TRUE, comment.char = """", ...) ","utils","base","4.0.5"
"read.fortran","closure","function","TRUE","FALSE","(file, format, ..., as.is = TRUE, colClasses = NA) ","utils","base","4.0.5"
"read.fwf","closure","function","TRUE","FALSE","(file, widths, header = FALSE, sep = ""\t"", skip = 0L,     row.names, col.names, n = -1L, buffersize = 2000, fileEncoding = """",     ...) ","utils","base","4.0.5"
"read.socket","closure","function","TRUE","FALSE","(socket, maxlen = 256L, loop = FALSE) ","utils","base","4.0.5"
"read.table","closure","function","TRUE","FALSE","(file, header = FALSE, sep = """", quote = ""\""'"", dec = ""."",     numerals = c(""allow.loss"", ""warn.loss"", ""no.loss""), row.names,     col.names, as.is = !stringsAsFactors, na.strings = ""NA"",     colClasses = NA, nrows = -1, skip = 0, check.names = TRUE,     fill = !blank.lines.skip, strip.white = FALSE, blank.lines.skip = TRUE,     comment.char = ""#"", allowEscapes = FALSE, flush = FALSE,     stringsAsFactors = default.stringsAsFactors(), fileEncoding = """",     encoding = ""unknown"", text, skipNul = FALSE) ","utils","base","4.0.5"
"readCitationFile","closure","function","TRUE","FALSE","(file, meta = NULL) ","utils","base","4.0.5"
"recover","closure","function","TRUE","FALSE","() ","utils","base","4.0.5"
"relist","closure","function","TRUE","FALSE","(flesh, skeleton = attr(flesh, ""skeleton"")) ","utils","base","4.0.5"
"remove.packages","closure","function","TRUE","FALSE","(pkgs, lib) ","utils","base","4.0.5"
"removeSource","closure","function","TRUE","FALSE","(fn) ","utils","base","4.0.5"
"rtags","closure","function","TRUE","FALSE","(path = ""."", pattern = ""\\.[RrSs]$"", recursive = FALSE,     src = list.files(path = path, pattern = pattern, full.names = TRUE,         recursive = recursive), keep.re = NULL, ofile = """", append = FALSE,     verbose = getOption(""verbose"")) ","utils","base","4.0.5"
"savehistory","closure","function","TRUE","FALSE","(file = "".Rhistory"") ","utils","base","4.0.5"
"select.list","closure","function","TRUE","FALSE","(choices, preselect = NULL, multiple = FALSE, title = NULL,     graphics = getOption(""menu.graphics"")) ","utils","base","4.0.5"
"sessionInfo","closure","function","TRUE","FALSE","(package = NULL) ","utils","base","4.0.5"
"setBreakpoint","closure","function","TRUE","FALSE","(srcfile, line, nameonly = TRUE, envir = parent.frame(),     lastenv, verbose = TRUE, tracer, print = FALSE, clear = FALSE,     ...) ","utils","base","4.0.5"
"setRepositories","closure","function","TRUE","FALSE","(graphics = getOption(""menu.graphics""), ind = NULL,     addURLs = character()) ","utils","base","4.0.5"
"setTxtProgressBar","closure","function","TRUE","FALSE","(pb, value, title = NULL, label = NULL) ","utils","base","4.0.5"
"stack","closure","function","TRUE","FALSE","(x, ...) ","utils","base","4.0.5"
"str","closure","function","TRUE","FALSE","(object, ...) ","utils","base","4.0.5"
"strOptions","closure","function","TRUE","FALSE","(strict.width = ""no"", digits.d = 3L, vec.len = 4L, list.len = 99L,     deparse.lines = NULL, drop.deparse.attr = TRUE, formatNum = function(x,         ...) format(x, trim = TRUE, drop0trailing = TRUE, ...)) ","utils","base","4.0.5"
"strcapture","closure","function","TRUE","FALSE","(pattern, x, proto, perl = FALSE, useBytes = FALSE) ","utils","base","4.0.5"
"summaryRprof","closure","function","TRUE","FALSE","(filename = ""Rprof.out"", chunksize = 5000, memory = c(""none"",     ""both"", ""tseries"", ""stats""), lines = c(""hide"", ""show"", ""both""),     index = 2, diff = TRUE, exclude = NULL, basenames = 1) ","utils","base","4.0.5"
"suppressForeignCheck","closure","function","TRUE","FALSE","(names, package, add = TRUE) ","utils","base","4.0.5"
"tail","closure","function","TRUE","TRUE","(x, ...) ","utils","base","4.0.5"
"tail.matrix","closure","function","TRUE","FALSE","(x, n = 6L, keepnums = TRUE, addrownums, ...) ","utils","base","4.0.5"
"tar","closure","function","TRUE","FALSE","(tarfile, files = NULL, compression = c(""none"", ""gzip"",     ""bzip2"", ""xz""), compression_level = 6, tar = Sys.getenv(""tar""),     extra_flags = """") ","utils","base","4.0.5"
"timestamp","closure","function","TRUE","FALSE","(stamp = date(), prefix = ""##------ "", suffix = "" ------##"",     quiet = FALSE) ","utils","base","4.0.5"
"toBibtex","closure","function","TRUE","FALSE","(object, ...) ","utils","base","4.0.5"
"toLatex","closure","function","TRUE","FALSE","(object, ...) ","utils","base","4.0.5"
"txtProgressBar","closure","function","TRUE","FALSE","(min = 0, max = 1, initial = 0, char = ""="", width = NA,     title, label, style = 1, file = """") ","utils","base","4.0.5"
"type.convert","closure","function","TRUE","FALSE","(x, ...) ","utils","base","4.0.5"
"undebugcall","closure","function","TRUE","FALSE","(call) ","utils","base","4.0.5"
"unstack","closure","function","TRUE","FALSE","(x, ...) ","utils","base","4.0.5"
"untar","closure","function","TRUE","FALSE","(tarfile, files = NULL, list = FALSE, exdir = ""."", compressed = NA,     extras = NULL, verbose = FALSE, restore_times = TRUE, support_old_tars = Sys.getenv(""R_SUPPORT_OLD_TARS"",         FALSE), tar = Sys.getenv(""TAR"")) ","utils","base","4.0.5"
"unzip","closure","function","TRUE","FALSE","(zipfile, files = NULL, list = FALSE, overwrite = TRUE,     junkpaths = FALSE, exdir = ""."", unzip = ""internal"", setTimes = FALSE) ","utils","base","4.0.5"
"update.packages","closure","function","TRUE","FALSE","(lib.loc = NULL, repos = getOption(""repos""), contriburl = contrib.url(repos,     type), method, instlib = NULL, ask = TRUE, available = NULL,     oldPkgs = NULL, ..., checkBuilt = FALSE, type = getOption(""pkgType"")) ","utils","base","4.0.5"
"upgrade","closure","function","TRUE","FALSE","(object, ...) ","utils","base","4.0.5"
"url.show","closure","function","TRUE","FALSE","(url, title = url, file = tempfile(), delete.file = TRUE,     method, ...) ","utils","base","4.0.5"
"vi","closure","function","TRUE","FALSE","(name = NULL, file = """") ","utils","base","4.0.5"
"vignette","closure","function","TRUE","FALSE","(topic, package = NULL, lib.loc = NULL, all = TRUE) ","utils","base","4.0.5"
"warnErrList","closure","function","TRUE","FALSE","(x, warn = TRUE, errValue = NULL) ","utils","base","4.0.5"
"write.csv","closure","function","TRUE","FALSE","(...) ","utils","base","4.0.5"
"write.csv2","closure","function","TRUE","FALSE","(...) ","utils","base","4.0.5"
"write.socket","closure","function","TRUE","FALSE","(socket, string) ","utils","base","4.0.5"
"write.table","closure","function","TRUE","FALSE","(x, file = """", append = FALSE, quote = TRUE, sep = "" "",     eol = ""\n"", na = ""NA"", dec = ""."", row.names = TRUE, col.names = TRUE,     qmethod = c(""escape"", ""double""), fileEncoding = """") ","utils","base","4.0.5"
"xedit","closure","function","TRUE","FALSE","(name = NULL, file = """") ","utils","base","4.0.5"
"xemacs","closure","function","TRUE","FALSE","(name = NULL, file = """") ","utils","base","4.0.5"
"zip","closure","function","TRUE","FALSE","(zipfile, files, flags = ""-r9X"", extras = """", zip = Sys.getenv(""R_ZIPCMD"",     ""zip"")) ","utils","base","4.0.5"
